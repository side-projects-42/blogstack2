{"expireTime":9007200914465207000,"key":"transformer-remark-markdown-ast-0b7e12737b513210ff88d7f5c0a167a6--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"const","position":{"start":{"line":3,"column":3,"offset":4},"end":{"line":3,"column":8,"offset":9},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":8,"offset":9},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Constants are block-scoped, much like variables declared using the ","position":{"start":{"line":5,"column":1,"offset":11},"end":{"line":5,"column":68,"offset":78},"indent":[]}},{"type":"inlineCode","value":"let","position":{"start":{"line":5,"column":68,"offset":78},"end":{"line":5,"column":73,"offset":83},"indent":[]}},{"type":"text","value":" keyword. The value of a constant can't be changed through reassignment, and it can't be redeclared.","position":{"start":{"line":5,"column":73,"offset":83},"end":{"line":5,"column":173,"offset":183},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":11},"end":{"line":5,"column":173,"offset":183},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":7,"column":4,"offset":188},"end":{"line":7,"column":10,"offset":194},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":185},"end":{"line":7,"column":10,"offset":194},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const name1 = value1 [, name2 = value2 [, ... [, nameN = valueN]]];","position":{"start":{"line":9,"column":1,"offset":196},"end":{"line":9,"column":72,"offset":267},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"nameN","position":{"start":{"line":11,"column":1,"offset":269},"end":{"line":11,"column":8,"offset":276},"indent":[]}},{"type":"text","value":"\nThe constant's name, which can be any legal ","position":{"start":{"line":11,"column":8,"offset":276},"end":{"line":12,"column":45,"offset":321},"indent":[1]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Identifier","children":[{"type":"text","value":"identifier","position":{"start":{"line":12,"column":46,"offset":322},"end":{"line":12,"column":56,"offset":332},"indent":[]}}],"position":{"start":{"line":12,"column":45,"offset":321},"end":{"line":12,"column":119,"offset":395},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":12,"column":119,"offset":395},"end":{"line":12,"column":120,"offset":396},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":269},"end":{"line":12,"column":120,"offset":396},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"valueN","position":{"start":{"line":14,"column":1,"offset":398},"end":{"line":14,"column":9,"offset":406},"indent":[]}},{"type":"text","value":"\nThe constant's value. This can be any legal ","position":{"start":{"line":14,"column":9,"offset":406},"end":{"line":15,"column":45,"offset":451},"indent":[1]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#expressions","children":[{"type":"text","value":"expression","position":{"start":{"line":15,"column":46,"offset":452},"end":{"line":15,"column":56,"offset":462},"indent":[]}}],"position":{"start":{"line":15,"column":45,"offset":451},"end":{"line":15,"column":158,"offset":564},"indent":[]}},{"type":"text","value":", including a function expression.","position":{"start":{"line":15,"column":158,"offset":564},"end":{"line":15,"column":192,"offset":598},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":398},"end":{"line":15,"column":192,"offset":598},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":17,"column":1,"offset":600},"end":{"line":17,"column":5,"offset":604},"indent":[]}},{"type":"link","title":null,"url":"../operators/destructuring_assignment","children":[{"type":"text","value":"Destructuring Assignment","position":{"start":{"line":17,"column":6,"offset":605},"end":{"line":17,"column":30,"offset":629},"indent":[]}}],"position":{"start":{"line":17,"column":5,"offset":604},"end":{"line":17,"column":70,"offset":669},"indent":[]}},{"type":"text","value":" syntax can also be used to declare variables.","position":{"start":{"line":17,"column":70,"offset":669},"end":{"line":17,"column":116,"offset":715},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":600},"end":{"line":17,"column":116,"offset":715},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const { bar } = foo; // where foo = { bar:10, baz:12 };\n/* This creates a constant with the name 'bar', which has a value of 10 */","position":{"start":{"line":19,"column":1,"offset":717},"end":{"line":20,"column":79,"offset":855},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":22,"column":4,"offset":860},"end":{"line":22,"column":15,"offset":871},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":857},"end":{"line":22,"column":15,"offset":871},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This declaration creates a constant whose scope can be either global or local to the block in which it is declared. Global constants do ","position":{"start":{"line":24,"column":1,"offset":873},"end":{"line":24,"column":137,"offset":1009},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":24,"column":139,"offset":1011},"end":{"line":24,"column":142,"offset":1014},"indent":[]}}],"position":{"start":{"line":24,"column":137,"offset":1009},"end":{"line":24,"column":144,"offset":1016},"indent":[]}},{"type":"text","value":" become properties of the ","position":{"start":{"line":24,"column":144,"offset":1016},"end":{"line":24,"column":170,"offset":1042},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Web/API/Window","children":[{"type":"inlineCode","value":"window","position":{"start":{"line":24,"column":171,"offset":1043},"end":{"line":24,"column":179,"offset":1051},"indent":[]}}],"position":{"start":{"line":24,"column":170,"offset":1042},"end":{"line":24,"column":237,"offset":1109},"indent":[]}},{"type":"text","value":" object, unlike ","position":{"start":{"line":24,"column":237,"offset":1109},"end":{"line":24,"column":253,"offset":1125},"indent":[]}},{"type":"link","title":null,"url":"var","children":[{"type":"inlineCode","value":"var","position":{"start":{"line":24,"column":254,"offset":1126},"end":{"line":24,"column":259,"offset":1131},"indent":[]}}],"position":{"start":{"line":24,"column":253,"offset":1125},"end":{"line":24,"column":265,"offset":1137},"indent":[]}},{"type":"text","value":" variables.","position":{"start":{"line":24,"column":265,"offset":1137},"end":{"line":24,"column":276,"offset":1148},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":873},"end":{"line":24,"column":276,"offset":1148},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An initializer for a constant is required. You must specify its value in the same statement in which it's declared. (This makes sense, given that it can't be changed later.)","position":{"start":{"line":26,"column":1,"offset":1150},"end":{"line":26,"column":174,"offset":1323},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1150},"end":{"line":26,"column":174,"offset":1323},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":28,"column":1,"offset":1325},"end":{"line":28,"column":5,"offset":1329},"indent":[]}},{"type":"inlineCode","value":"const","position":{"start":{"line":28,"column":5,"offset":1329},"end":{"line":28,"column":12,"offset":1336},"indent":[]}},{"type":"text","value":" creates a read-only reference to a value. It does ","position":{"start":{"line":28,"column":12,"offset":1336},"end":{"line":28,"column":63,"offset":1387},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"not","position":{"start":{"line":28,"column":65,"offset":1389},"end":{"line":28,"column":68,"offset":1392},"indent":[]}}],"position":{"start":{"line":28,"column":63,"offset":1387},"end":{"line":28,"column":70,"offset":1394},"indent":[]}},{"type":"text","value":" mean the value it holds is immutableâ€”just that the variable identifier cannot be reassigned. For instance, in the case where the content is an object, this means the object's contents (e.g., its properties) can be altered.","position":{"start":{"line":28,"column":70,"offset":1394},"end":{"line":28,"column":293,"offset":1617},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":1325},"end":{"line":28,"column":293,"offset":1617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"All the considerations about the \"","position":{"start":{"line":30,"column":1,"offset":1619},"end":{"line":30,"column":35,"offset":1653},"indent":[]}},{"type":"link","title":null,"url":"let#temporal_dead_zone_tdz","children":[{"type":"text","value":"temporal dead zone","position":{"start":{"line":30,"column":36,"offset":1654},"end":{"line":30,"column":54,"offset":1672},"indent":[]}}],"position":{"start":{"line":30,"column":35,"offset":1653},"end":{"line":30,"column":83,"offset":1701},"indent":[]}},{"type":"text","value":"\" apply to both ","position":{"start":{"line":30,"column":83,"offset":1701},"end":{"line":30,"column":99,"offset":1717},"indent":[]}},{"type":"link","title":null,"url":"let","children":[{"type":"inlineCode","value":"let","position":{"start":{"line":30,"column":100,"offset":1718},"end":{"line":30,"column":105,"offset":1723},"indent":[]}}],"position":{"start":{"line":30,"column":99,"offset":1717},"end":{"line":30,"column":111,"offset":1729},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":30,"column":111,"offset":1729},"end":{"line":30,"column":116,"offset":1734},"indent":[]}},{"type":"inlineCode","value":"const","position":{"start":{"line":30,"column":116,"offset":1734},"end":{"line":30,"column":123,"offset":1741},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":30,"column":123,"offset":1741},"end":{"line":30,"column":124,"offset":1742},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":1619},"end":{"line":30,"column":124,"offset":1742},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"A constant cannot share its name with a function or a variable in the same scope.","position":{"start":{"line":32,"column":1,"offset":1744},"end":{"line":32,"column":82,"offset":1825},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":1744},"end":{"line":32,"column":82,"offset":1825},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":34,"column":4,"offset":1830},"end":{"line":34,"column":12,"offset":1838},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1827},"end":{"line":34,"column":12,"offset":1838},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Basic const usage","position":{"start":{"line":36,"column":5,"offset":1844},"end":{"line":36,"column":22,"offset":1861},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1840},"end":{"line":36,"column":22,"offset":1861},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Constants can be declared with uppercase or lowercase, but a common convention is to use all-uppercase letters.","position":{"start":{"line":38,"column":1,"offset":1863},"end":{"line":38,"column":112,"offset":1974},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1863},"end":{"line":38,"column":112,"offset":1974},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// define MY_FAV as a constant and give it the value 7\nconst MY_FAV = 7;\n\n// this will throw an error - Uncaught TypeError: Assignment to constant variable.\nMY_FAV = 20;\n\n// MY_FAV is 7\nconsole.log('my favorite number is: ' + MY_FAV);\n\n// trying to redeclare a constant throws an error\n// Uncaught SyntaxError: Identifier 'MY_FAV' has already been declared\nconst MY_FAV = 20;\n\n// the name MY_FAV is reserved for constant above, so this will fail too\nvar MY_FAV = 20;\n\n// this throws an error too\nlet MY_FAV = 20;","position":{"start":{"line":40,"column":1,"offset":1976},"end":{"line":57,"column":21,"offset":2540},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Block scoping","position":{"start":{"line":59,"column":5,"offset":2546},"end":{"line":59,"column":18,"offset":2559},"indent":[]}}],"position":{"start":{"line":59,"column":1,"offset":2542},"end":{"line":59,"column":18,"offset":2559},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It's important to note the nature of block scoping.","position":{"start":{"line":61,"column":1,"offset":2561},"end":{"line":61,"column":52,"offset":2612},"indent":[]}}],"position":{"start":{"line":61,"column":1,"offset":2561},"end":{"line":61,"column":52,"offset":2612},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"if (MY_FAV === 7) {\n  // this is fine and creates a block scoped MY_FAV variable\n  // (works equally well with let to declare a block scoped non const variable)\n  let MY_FAV = 20;\n\n  // MY_FAV is now 20\n  console.log('my favorite number is ' + MY_FAV);\n\n  // this gets hoisted into the global context and throws an error\n  var MY_FAV = 20;\n}\n\n// MY_FAV is still 7\nconsole.log('my favorite number is ' + MY_FAV);","position":{"start":{"line":63,"column":1,"offset":2614},"end":{"line":76,"column":52,"offset":3069},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"const needs to be initialized","position":{"start":{"line":78,"column":5,"offset":3075},"end":{"line":78,"column":34,"offset":3104},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":3071},"end":{"line":78,"column":34,"offset":3104},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// throws an error\n// Uncaught SyntaxError: Missing initializer in const declaration\n\nconst FOO;","position":{"start":{"line":80,"column":1,"offset":3106},"end":{"line":83,"column":15,"offset":3214},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"const in objects and arrays","position":{"start":{"line":85,"column":5,"offset":3220},"end":{"line":85,"column":32,"offset":3247},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":3216},"end":{"line":85,"column":32,"offset":3247},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"const also works on objects and arrays.","position":{"start":{"line":87,"column":1,"offset":3249},"end":{"line":87,"column":40,"offset":3288},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":3249},"end":{"line":87,"column":40,"offset":3288},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const MY_OBJECT = {'key': 'value'};\n\n// Attempting to overwrite the object throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_OBJECT = {'OTHER_KEY': 'value'};\n\n// However, object keys are not protected,\n// so the following statement is executed without problem\nMY_OBJECT.key = 'otherValue'; // Use Object.freeze() to make object immutable\n\n// The same applies to arrays\nconst MY_ARRAY = [];\n// It's possible to push items into the array\nMY_ARRAY.push('A'); // [\"A\"]\n// However, assigning a new array to the variable throws an error\n// Uncaught TypeError: Assignment to constant variable.\nMY_ARRAY = ['B'];","position":{"start":{"line":89,"column":1,"offset":3290},"end":{"line":105,"column":22,"offset":3975},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":106,"column":1,"offset":3976}}}}