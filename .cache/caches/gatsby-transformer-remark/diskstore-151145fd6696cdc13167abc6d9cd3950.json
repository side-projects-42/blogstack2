{"expireTime":9007200914465207000,"key":"transformer-remark-markdown-ast-d1d715b6ccdf774571de60f795d4e509--","val":{"type":"root","children":[{"type":"code","lang":"py","meta":null,"value":"abs()\t\t\t#Returns the absolute value of a number\nall()\t\t\t#Returns True if all items in an iterable object are true\nany()\t\t\t#Returns True if any item in an iterable object is true\nascii()\t\t\t#Returns a readable version of an object. Replaces none-ascii characters with escape character\nbin()\t\t\t#Returns the binary version of a number\nbool()\t\t\t#Returns the boolean value of the specified object\nbytearray()\t\t#Returns an array of bytes\nbytes()\t\t\t#Returns a bytes object\ncallable()\t\t#Returns True if the specified object is callable, otherwise False\nchr()\t\t\t#Returns a character from the specified Unicode code.\nclassmethod()\t#Converts a method into a class method\ncompile()\t\t#Returns the specified source as an object, ready to be executed\ncomplex()\t\t#Returns a complex number\ndelattr()\t\t#Deletes the specified attribute (property or method) from the specified object\ndict()\t\t\t#Returns a dictionary (Array)\ndir()\t\t\t#Returns a list of the specified object's properties and methods\ndivmod()\t\t#Returns the quotient and the remainder when argument1 is divided by argument2\nenumerate()\t\t#Takes a collection (e.g. a tuple) and returns it as an enumerate object\neval()\t\t\t#Evaluates and executes an expression\nexec()\t\t\t#Executes the specified code (or object)\nfilter()\t\t#Use a filter function to exclude items in an iterable object\nfloat()\t\t\t#Returns a floating point number\nformat()\t\t#Formats a specified value\nfrozenset()\t\t#Returns a frozenset object\ngetattr()\t\t#Returns the value of the specified attribute (property or method)\nglobals()\t\t#Returns the current global symbol table as a dictionary\nhasattr()\t\t#Returns True if the specified object has the specified attribute (property/method)\nhash()\t\t\t#Returns the hash value of a specified object\nhelp()\t\t\t#Executes the built-in help system\nhex()\t\t\t#Converts a number into a hexadecimal value\nid()\t\t\t#Returns the id of an object\ninput()\t\t\t#Allowing user input\nint()\t\t\t#Returns an integer number\nisinstance()\t#Returns True if a specified object is an instance of a specified object\nissubclass()\t#Returns True if a specified class is a subclass of a specified object\niter()\t\t\t#Returns an iterator object\nlen()\t\t\t#Returns the length of an object\nlist()\t\t\t#Returns a list\nlocals()\t\t#Returns an updated dictionary of the current local symbol table\nmap()\t\t\t#Returns the specified iterator with the specified function applied to each item\nmax()\t\t\t#Returns the largest item in an iterable\nmemoryview()\t#Returns a memory view object\nmin()\t\t\t#Returns the smallest item in an iterable\nnext()\t\t\t#Returns the next item in an iterable\nobject()\t\t#Returns a new object\noct()\t\t\t#Converts a number into an octal\nopen()\t\t\t#Opens a file and returns a file object\nord()\t\t\t#Convert an integer representing the Unicode of the specified character\npow()\t\t\t#Returns the value of x to the power of y\nprint()\t\t\t#Prints to the standard output device\nproperty()\t\t#Gets, sets, deletes a property\nrange()\t\t\t#Returns a sequence of numbers, starting from 0 and increments by 1 (by default)\nrepr()\t\t\t#Returns a readable version of an object\nreversed()\t\t#Returns a reversed iterator\nround()\t\t\t#Rounds a numbers\nset()\t\t\t#Returns a new set object\nsetattr()\t\t#Sets an attribute (property/method) of an object\nslice()\t\t\t#Returns a slice object\nsorted()\t\t#Returns a sorted list\nstaticmethod()\t#Converts a method into a static method\nstr()\t\t\t#Returns a string object\nsum()\t\t\t#Sums the items of an iterator\nsuper()\t\t\t#Returns an object that represents the parent class\ntuple()\t\t\t#Returns a tuple\ntype()\t\t\t#Returns the type of an object\nvars()\t\t\t#Returns the __dict__ property of an object\nzip()\t\t\t#Returns an iterator, from two or more iterators","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":72,"column":4,"offset":3654},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":73,"column":1,"offset":3655}}}}