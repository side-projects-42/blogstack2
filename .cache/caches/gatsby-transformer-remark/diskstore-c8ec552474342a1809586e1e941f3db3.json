{"expireTime":9007200914465207000,"key":"transformer-remark-markdown-ast-1bdaac6a93f5f66b961d1a6cd014497e--","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"The simplest way to read a file in Node.js is to use the ","position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":58,"offset":59},"indent":[]}},{"type":"inlineCode","value":"fs.readFile()","position":{"start":{"line":3,"column":58,"offset":59},"end":{"line":3,"column":73,"offset":74},"indent":[]}},{"type":"text","value":" method, passing it the file path, encoding and a callback function that will be called with the file data (and the error):","position":{"start":{"line":3,"column":73,"offset":74},"end":{"line":3,"column":196,"offset":197},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":196,"offset":197},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nconst fs = require('fs');\n\nfs.readFile('/Users/joe/test.txt', 'utf8', (err, data) => {\n    if (err) {\n        console.error(err);\n        return;\n    }\n    console.log(data);\n});","position":{"start":{"line":5,"column":1,"offset":199},"end":{"line":16,"column":4,"offset":390},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively, you can use the synchronous version ","position":{"start":{"line":18,"column":1,"offset":392},"end":{"line":18,"column":52,"offset":443},"indent":[]}},{"type":"inlineCode","value":"fs.readFileSync()","position":{"start":{"line":18,"column":52,"offset":443},"end":{"line":18,"column":71,"offset":462},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":18,"column":71,"offset":462},"end":{"line":18,"column":72,"offset":463},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":392},"end":{"line":18,"column":72,"offset":463},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nconst fs = require('fs');\n\ntry {\n    const data = fs.readFileSync('/Users/joe/test.txt', 'utf8');\n    console.log(data);\n} catch (err) {\n    console.error(err);\n}","position":{"start":{"line":20,"column":1,"offset":465},"end":{"line":30,"column":4,"offset":640},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Both ","position":{"start":{"line":32,"column":1,"offset":642},"end":{"line":32,"column":6,"offset":647},"indent":[]}},{"type":"inlineCode","value":"fs.readFile()","position":{"start":{"line":32,"column":6,"offset":647},"end":{"line":32,"column":21,"offset":662},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":32,"column":21,"offset":662},"end":{"line":32,"column":26,"offset":667},"indent":[]}},{"type":"inlineCode","value":"fs.readFileSync()","position":{"start":{"line":32,"column":26,"offset":667},"end":{"line":32,"column":45,"offset":686},"indent":[]}},{"type":"text","value":" read the full content of the file in memory before returning the data.","position":{"start":{"line":32,"column":45,"offset":686},"end":{"line":32,"column":116,"offset":757},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":642},"end":{"line":32,"column":116,"offset":757},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This means that big files are going to have a major impact on your memory consumption and speed of execution of the program.","position":{"start":{"line":34,"column":1,"offset":759},"end":{"line":34,"column":125,"offset":883},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":759},"end":{"line":34,"column":125,"offset":883},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this case, a better option is to read the file content using streams.","position":{"start":{"line":36,"column":1,"offset":885},"end":{"line":36,"column":73,"offset":957},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":885},"end":{"line":36,"column":73,"offset":957},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":37,"column":1,"offset":958}}}}