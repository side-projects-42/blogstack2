{"expireTime":9007200914465209000,"key":"transformer-remark-markdown-html-ast-67f8576d76c24497fd0f6f436d512a30--","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"JS Fat Arrow Functions","position":{"start":{"line":3,"column":4,"offset":5},"end":{"line":3,"column":26,"offset":27}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":26,"offset":27}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Classical JavaScript function syntax doesn't provide for any flexibility, be that a 1 statement function or an unfortunate multi-page function. Every time you need a function you have to type out the dreaded ","position":{"start":{"line":5,"column":1,"offset":29},"end":{"line":5,"column":209,"offset":237}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function () {}"}],"position":{"start":{"line":5,"column":209,"offset":237},"end":{"line":5,"column":225,"offset":253}}},{"type":"text","value":". More concise function syntax was one of the many reasons why ","position":{"start":{"line":5,"column":225,"offset":253},"end":{"line":5,"column":288,"offset":316}}},{"type":"element","tagName":"a","properties":{"href":"http://coffeescript.org/"},"children":[{"type":"text","value":"CoffeeScript","position":{"start":{"line":5,"column":289,"offset":317},"end":{"line":5,"column":301,"offset":329}}}],"position":{"start":{"line":5,"column":288,"offset":316},"end":{"line":5,"column":328,"offset":356}}},{"type":"text","value":" gained so much momentum back in the day. This is especially pronounced in the case of tiny callback functions. Lets look at a Promise chain:","position":{"start":{"line":5,"column":328,"offset":356},"end":{"line":5,"column":469,"offset":497}}}],"position":{"start":{"line":5,"column":1,"offset":29},"end":{"line":5,"column":469,"offset":497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function getVerifiedToken(selector) {\n  return getUsers(selector)\n    .then(function (users) { return users[0]; })\n    .then(verifyUser)\n    .then(function (user, verifiedToken) { return verifiedToken; })\n    .catch(function (err) { log(err.stack); });\n}\n"}],"position":{"start":{"line":7,"column":1,"offset":499},"end":{"line":16,"column":4,"offset":762}}}],"position":{"start":{"line":7,"column":1,"offset":499},"end":{"line":16,"column":4,"offset":762}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Above is more or less plausible piece of code written using classical JavaScript ","position":{"start":{"line":18,"column":1,"offset":764},"end":{"line":18,"column":82,"offset":845}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":18,"column":82,"offset":845},"end":{"line":18,"column":92,"offset":855}}},{"type":"text","value":" syntax. Here is what the same code could look like rewritten using the arrow syntax:","position":{"start":{"line":18,"column":92,"offset":855},"end":{"line":18,"column":177,"offset":940}}}],"position":{"start":{"line":18,"column":1,"offset":764},"end":{"line":18,"column":177,"offset":940}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function getVerifiedToken(selector) {\n  return getUsers(selector)\n    .then(users => users[0])\n    .then(verifyUser)\n    .then((user, verifiedToken) => verifiedToken)\n    .catch(err => log(err.stack));\n}\n"}],"position":{"start":{"line":20,"column":1,"offset":942},"end":{"line":29,"column":4,"offset":1154}}}],"position":{"start":{"line":20,"column":1,"offset":942},"end":{"line":29,"column":4,"offset":1154}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A few important things to notice here:","position":{"start":{"line":31,"column":1,"offset":1156},"end":{"line":31,"column":39,"offset":1194}}}],"position":{"start":{"line":31,"column":1,"offset":1156},"end":{"line":31,"column":39,"offset":1194}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We've lost ","position":{"start":{"line":33,"column":5,"offset":1200},"end":{"line":33,"column":16,"offset":1211}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":33,"column":16,"offset":1211},"end":{"line":33,"column":26,"offset":1221}}},{"type":"text","value":" and ","position":{"start":{"line":33,"column":26,"offset":1221},"end":{"line":33,"column":31,"offset":1226}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":33,"column":31,"offset":1226},"end":{"line":33,"column":35,"offset":1230}}},{"type":"text","value":" because all of our callback functions are one liners.","position":{"start":{"line":33,"column":35,"offset":1230},"end":{"line":33,"column":89,"offset":1284}}}],"position":{"start":{"line":33,"column":1,"offset":1196},"end":{"line":33,"column":89,"offset":1284}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We've lost ","position":{"start":{"line":34,"column":5,"offset":1289},"end":{"line":34,"column":16,"offset":1300}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"()"}],"position":{"start":{"line":34,"column":16,"offset":1300},"end":{"line":34,"column":20,"offset":1304}}},{"type":"text","value":" around the argument list when there's just one argument (rest arguments are an exception, eg ","position":{"start":{"line":34,"column":20,"offset":1304},"end":{"line":34,"column":114,"offset":1398}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"(...args) => ..."}],"position":{"start":{"line":34,"column":114,"offset":1398},"end":{"line":34,"column":132,"offset":1416}}},{"type":"text","value":")","position":{"start":{"line":34,"column":132,"offset":1416},"end":{"line":34,"column":133,"offset":1417}}}],"position":{"start":{"line":34,"column":1,"offset":1285},"end":{"line":34,"column":133,"offset":1417}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"We've lost the ","position":{"start":{"line":35,"column":5,"offset":1422},"end":{"line":35,"column":20,"offset":1437}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"return"}],"position":{"start":{"line":35,"column":20,"offset":1437},"end":{"line":35,"column":28,"offset":1445}}},{"type":"text","value":" keyword because when omitting ","position":{"start":{"line":35,"column":28,"offset":1445},"end":{"line":35,"column":59,"offset":1476}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":35,"column":59,"offset":1476},"end":{"line":35,"column":63,"offset":1480}}},{"type":"text","value":", single line arrow functions perform an implicit return (these functions are often referred to as lambda functions in other languages).","position":{"start":{"line":35,"column":63,"offset":1480},"end":{"line":35,"column":199,"offset":1616}}}],"position":{"start":{"line":35,"column":1,"offset":1418},"end":{"line":35,"column":199,"offset":1616}}},{"type":"text","value":"\n"}],"position":{"start":{"line":33,"column":1,"offset":1196},"end":{"line":35,"column":199,"offset":1616}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"It's important to reinforce the last point. Implicit return only happens for single statement arrow functions. When arrow function is declared with ","position":{"start":{"line":37,"column":1,"offset":1618},"end":{"line":37,"column":149,"offset":1766}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":37,"column":149,"offset":1766},"end":{"line":37,"column":153,"offset":1770}}},{"type":"text","value":", even if it's a single statement, implicit return does not happen:","position":{"start":{"line":37,"column":153,"offset":1770},"end":{"line":37,"column":220,"offset":1837}}}],"position":{"start":{"line":37,"column":1,"offset":1618},"end":{"line":37,"column":220,"offset":1837}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const getVerifiedToken = selector => {\n  return getUsers()\n    .then(users => users[0])\n    .then(verifyUser)\n    .then((user, verifiedToken) => verifiedToken)\n    .catch(err => log(err.stack));\n}\n"}],"position":{"start":{"line":39,"column":1,"offset":1839},"end":{"line":48,"column":4,"offset":2044}}}],"position":{"start":{"line":39,"column":1,"offset":1839},"end":{"line":48,"column":4,"offset":2044}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's the really fun bit. Because our function has only one statement, we can still get rid of the ","position":{"start":{"line":50,"column":1,"offset":2046},"end":{"line":50,"column":101,"offset":2146}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":50,"column":101,"offset":2146},"end":{"line":50,"column":105,"offset":2150}}},{"type":"text","value":" and it will look almost exactly like ","position":{"start":{"line":50,"column":105,"offset":2150},"end":{"line":50,"column":143,"offset":2188}}},{"type":"element","tagName":"a","properties":{"href":"http://coffeescript.org/"},"children":[{"type":"text","value":"CoffeeScript","position":{"start":{"line":50,"column":144,"offset":2189},"end":{"line":50,"column":156,"offset":2201}}}],"position":{"start":{"line":50,"column":143,"offset":2188},"end":{"line":50,"column":183,"offset":2228}}},{"type":"text","value":" syntax:","position":{"start":{"line":50,"column":183,"offset":2228},"end":{"line":50,"column":191,"offset":2236}}}],"position":{"start":{"line":50,"column":1,"offset":2046},"end":{"line":50,"column":191,"offset":2236}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const getVerifiedToken = selector =>\n  getUsers()\n    .then(users => users[0])\n    .then(verifyUser)\n    .then((user, verifiedToken) => verifiedToken)\n    .catch(err => log(err.stack));\n"}],"position":{"start":{"line":52,"column":1,"offset":2238},"end":{"line":60,"column":4,"offset":2432}}}],"position":{"start":{"line":52,"column":1,"offset":2238},"end":{"line":60,"column":4,"offset":2432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Yep, the example above is completely valid ES2015 syntax (I was also surprised that it ","position":{"start":{"line":62,"column":1,"offset":2434},"end":{"line":62,"column":88,"offset":2521}}},{"type":"element","tagName":"a","properties":{"href":"http://babeljs.io/repl/#?"},"children":[{"type":"text","value":"compiles fine","position":{"start":{"line":62,"column":89,"offset":2522},"end":{"line":62,"column":102,"offset":2535}}}],"position":{"start":{"line":62,"column":88,"offset":2521},"end":{"line":62,"column":130,"offset":2563}}},{"type":"text","value":"). When we talk about single statement arrow functions, it doesn't mean the statement can't be spread out to multiple lines for better comprehension.","position":{"start":{"line":62,"column":130,"offset":2563},"end":{"line":62,"column":279,"offset":2712}}}],"position":{"start":{"line":62,"column":1,"offset":2434},"end":{"line":62,"column":279,"offset":2712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There's one caveat, however, with omitting ","position":{"start":{"line":64,"column":1,"offset":2714},"end":{"line":64,"column":44,"offset":2757}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":64,"column":44,"offset":2757},"end":{"line":64,"column":48,"offset":2761}}},{"type":"text","value":" from arrow functions -- how do you return an empty object, eg ","position":{"start":{"line":64,"column":48,"offset":2761},"end":{"line":64,"column":111,"offset":2824}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":64,"column":111,"offset":2824},"end":{"line":64,"column":115,"offset":2828}}},{"type":"text","value":"?","position":{"start":{"line":64,"column":115,"offset":2828},"end":{"line":64,"column":116,"offset":2829}}}],"position":{"start":{"line":64,"column":1,"offset":2714},"end":{"line":64,"column":116,"offset":2829}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const emptyObject = () => {};\nemptyObject(); // ?\n"}],"position":{"start":{"line":66,"column":1,"offset":2831},"end":{"line":70,"column":4,"offset":2889}}}],"position":{"start":{"line":66,"column":1,"offset":2831},"end":{"line":70,"column":4,"offset":2889}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Unfortunately there's no way to distinguish between empty block ","position":{"start":{"line":72,"column":1,"offset":2891},"end":{"line":72,"column":65,"offset":2955}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":72,"column":65,"offset":2955},"end":{"line":72,"column":69,"offset":2959}}},{"type":"text","value":" and an object ","position":{"start":{"line":72,"column":69,"offset":2959},"end":{"line":72,"column":84,"offset":2974}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":72,"column":84,"offset":2974},"end":{"line":72,"column":88,"offset":2978}}},{"type":"text","value":". Because of that ","position":{"start":{"line":72,"column":88,"offset":2978},"end":{"line":72,"column":106,"offset":2996}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"emptyObject()"}],"position":{"start":{"line":72,"column":106,"offset":2996},"end":{"line":72,"column":121,"offset":3011}}},{"type":"text","value":" evaluates to ","position":{"start":{"line":72,"column":121,"offset":3011},"end":{"line":72,"column":135,"offset":3025}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"undefined"}],"position":{"start":{"line":72,"column":135,"offset":3025},"end":{"line":72,"column":146,"offset":3036}}},{"type":"text","value":" and ","position":{"start":{"line":72,"column":146,"offset":3036},"end":{"line":72,"column":151,"offset":3041}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":72,"column":151,"offset":3041},"end":{"line":72,"column":155,"offset":3045}}},{"type":"text","value":" interpreted as empty block. To return an empty object from fat arrow functions you have to surround it with brackets like so ","position":{"start":{"line":72,"column":155,"offset":3045},"end":{"line":72,"column":281,"offset":3171}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"({})"}],"position":{"start":{"line":72,"column":281,"offset":3171},"end":{"line":72,"column":287,"offset":3177}}},{"type":"text","value":":","position":{"start":{"line":72,"column":287,"offset":3177},"end":{"line":72,"column":288,"offset":3178}}}],"position":{"start":{"line":72,"column":1,"offset":2891},"end":{"line":72,"column":288,"offset":3178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"const emptyObject = () => ({});\nemptyObject(); // {}\n"}],"position":{"start":{"line":74,"column":1,"offset":3180},"end":{"line":78,"column":4,"offset":3241}}}],"position":{"start":{"line":74,"column":1,"offset":3180},"end":{"line":78,"column":4,"offset":3241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Here's all of the above together:","position":{"start":{"line":80,"column":1,"offset":3243},"end":{"line":80,"column":34,"offset":3276}}}],"position":{"start":{"line":80,"column":1,"offset":3243},"end":{"line":80,"column":34,"offset":3276}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function () { return 1; }\n() => { return 1; }\n() => 1\n\nfunction (a) { return a * 2; }\n(a) => { return a * 2; }\n(a) => a * 2\na => a * 2\n\nfunction (a, b) { return a * b; }\n(a, b) => { return a * b; }\n(a, b) => a * b\n\nfunction () { return arguments[0]; }\n(...args) => args[0]\n\n() => {} // undefined\n() => ({}) // {}\n"}],"position":{"start":{"line":82,"column":1,"offset":3278},"end":{"line":102,"column":4,"offset":3599}}}],"position":{"start":{"line":82,"column":1,"offset":3278},"end":{"line":102,"column":4,"offset":3599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Lexical ","position":{"start":{"line":104,"column":4,"offset":3604},"end":{"line":104,"column":12,"offset":3612}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":104,"column":12,"offset":3612},"end":{"line":104,"column":18,"offset":3618}}}],"position":{"start":{"line":104,"column":1,"offset":3601},"end":{"line":104,"column":18,"offset":3618}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The story of clobbering ","position":{"start":{"line":106,"column":1,"offset":3620},"end":{"line":106,"column":25,"offset":3644}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":106,"column":25,"offset":3644},"end":{"line":106,"column":31,"offset":3650}}},{"type":"text","value":" in JavaScript is a really old one. Each ","position":{"start":{"line":106,"column":31,"offset":3650},"end":{"line":106,"column":72,"offset":3691}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":106,"column":72,"offset":3691},"end":{"line":106,"column":82,"offset":3701}}},{"type":"text","value":" in JavaScript defines its own ","position":{"start":{"line":106,"column":82,"offset":3701},"end":{"line":106,"column":113,"offset":3732}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":106,"column":113,"offset":3732},"end":{"line":106,"column":119,"offset":3738}}},{"type":"text","value":" context, which is as easy to get around as it is annoying. The example below tries to display a clock that updates every second using jQuery:","position":{"start":{"line":106,"column":119,"offset":3738},"end":{"line":106,"column":261,"offset":3880}}}],"position":{"start":{"line":106,"column":1,"offset":3620},"end":{"line":106,"column":261,"offset":3880}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"$('.current-time').each(function () {\n  setInterval(function () {\n    $(this).text(Date.now());\n  }, 1000);\n});\n"}],"position":{"start":{"line":108,"column":1,"offset":3882},"end":{"line":115,"column":4,"offset":4002}}}],"position":{"start":{"line":108,"column":1,"offset":3882},"end":{"line":115,"column":4,"offset":4002}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"When attempting to reference the DOM element ","position":{"start":{"line":117,"column":1,"offset":4004},"end":{"line":117,"column":46,"offset":4049}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":117,"column":46,"offset":4049},"end":{"line":117,"column":52,"offset":4055}}},{"type":"text","value":" set by ","position":{"start":{"line":117,"column":52,"offset":4055},"end":{"line":117,"column":60,"offset":4063}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"each"}],"position":{"start":{"line":117,"column":60,"offset":4063},"end":{"line":117,"column":66,"offset":4069}}},{"type":"text","value":" in the ","position":{"start":{"line":117,"column":66,"offset":4069},"end":{"line":117,"column":74,"offset":4077}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"setInterval"}],"position":{"start":{"line":117,"column":74,"offset":4077},"end":{"line":117,"column":87,"offset":4090}}},{"type":"text","value":" callback, we unfortunately get a brand new ","position":{"start":{"line":117,"column":87,"offset":4090},"end":{"line":117,"column":131,"offset":4134}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":117,"column":131,"offset":4134},"end":{"line":117,"column":137,"offset":4140}}},{"type":"text","value":" that belongs to the callback itself. A common way around this is to declare ","position":{"start":{"line":117,"column":137,"offset":4140},"end":{"line":117,"column":214,"offset":4217}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"that"}],"position":{"start":{"line":117,"column":214,"offset":4217},"end":{"line":117,"column":220,"offset":4223}}},{"type":"text","value":" or ","position":{"start":{"line":117,"column":220,"offset":4223},"end":{"line":117,"column":224,"offset":4227}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"self"}],"position":{"start":{"line":117,"column":224,"offset":4227},"end":{"line":117,"column":230,"offset":4233}}},{"type":"text","value":" variable:","position":{"start":{"line":117,"column":230,"offset":4233},"end":{"line":117,"column":240,"offset":4243}}}],"position":{"start":{"line":117,"column":1,"offset":4004},"end":{"line":117,"column":240,"offset":4243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"$('.current-time').each(function () {\n  var self = this;\n\n  setInterval(function () {\n    $(self).text(Date.now());\n  }, 1000);\n});\n"}],"position":{"start":{"line":119,"column":1,"offset":4245},"end":{"line":128,"column":4,"offset":4385}}}],"position":{"start":{"line":119,"column":1,"offset":4245},"end":{"line":128,"column":4,"offset":4385}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The fat arrow functions allow you to solve this problem because they don't introduce their own ","position":{"start":{"line":130,"column":1,"offset":4387},"end":{"line":130,"column":96,"offset":4482}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":130,"column":96,"offset":4482},"end":{"line":130,"column":102,"offset":4488}}},{"type":"text","value":":","position":{"start":{"line":130,"column":102,"offset":4488},"end":{"line":130,"column":103,"offset":4489}}}],"position":{"start":{"line":130,"column":1,"offset":4387},"end":{"line":130,"column":103,"offset":4489}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"$('.current-time').each(function () {\n  setInterval(() => $(this).text(Date.now()), 1000);\n});\n"}],"position":{"start":{"line":132,"column":1,"offset":4491},"end":{"line":137,"column":4,"offset":4594}}}],"position":{"start":{"line":132,"column":1,"offset":4491},"end":{"line":137,"column":4,"offset":4594}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"What about arguments?","position":{"start":{"line":139,"column":4,"offset":4599},"end":{"line":139,"column":25,"offset":4620}}}],"position":{"start":{"line":139,"column":1,"offset":4596},"end":{"line":139,"column":25,"offset":4620}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"One of the caveats with arrow functions is that they also don't have their own ","position":{"start":{"line":141,"column":1,"offset":4622},"end":{"line":141,"column":80,"offset":4701}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"arguments"}],"position":{"start":{"line":141,"column":80,"offset":4701},"end":{"line":141,"column":91,"offset":4712}}},{"type":"text","value":" variable like regular functions:","position":{"start":{"line":141,"column":91,"offset":4712},"end":{"line":141,"column":124,"offset":4745}}}],"position":{"start":{"line":141,"column":1,"offset":4622},"end":{"line":141,"column":124,"offset":4745}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function log(msg) {\n  const print = () => console.log(arguments[0]);\n  print(`LOG: ${msg}`);\n}\n\nlog('hello'); // hello\n"}],"position":{"start":{"line":143,"column":1,"offset":4747},"end":{"line":151,"column":4,"offset":4874}}}],"position":{"start":{"line":143,"column":1,"offset":4747},"end":{"line":151,"column":4,"offset":4874}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To reiterate, fat arrow functions don't have their own ","position":{"start":{"line":153,"column":1,"offset":4876},"end":{"line":153,"column":56,"offset":4931}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":153,"column":56,"offset":4931},"end":{"line":153,"column":62,"offset":4937}}},{"type":"text","value":" and ","position":{"start":{"line":153,"column":62,"offset":4937},"end":{"line":153,"column":67,"offset":4942}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"arguments"}],"position":{"start":{"line":153,"column":67,"offset":4942},"end":{"line":153,"column":78,"offset":4953}}},{"type":"text","value":". Having said that, you can still get all arguments passed into the arrow functions using rest parameters (also known as spread operator):","position":{"start":{"line":153,"column":78,"offset":4953},"end":{"line":153,"column":216,"offset":5091}}}],"position":{"start":{"line":153,"column":1,"offset":4876},"end":{"line":153,"column":216,"offset":5091}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function log(msg) {\n  const print = (...args) => console.log(args[0]);\n  print(`LOG: ${msg}`);\n}\n\nlog('hello'); // LOG: hello\n"}],"position":{"start":{"line":155,"column":1,"offset":5093},"end":{"line":163,"column":4,"offset":5227}}}],"position":{"start":{"line":155,"column":1,"offset":5093},"end":{"line":163,"column":4,"offset":5227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"What about yield?","position":{"start":{"line":165,"column":4,"offset":5232},"end":{"line":165,"column":21,"offset":5249}}}],"position":{"start":{"line":165,"column":1,"offset":5229},"end":{"line":165,"column":21,"offset":5249}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Fat arrow functions can't be used as generators. That's it -- no exceptions, no caveats and no workarounds.","position":{"start":{"line":167,"column":1,"offset":5251},"end":{"line":167,"column":108,"offset":5358}}}],"position":{"start":{"line":167,"column":1,"offset":5251},"end":{"line":167,"column":108,"offset":5358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Bottom Line","position":{"start":{"line":169,"column":4,"offset":5363},"end":{"line":169,"column":15,"offset":5374}}}],"position":{"start":{"line":169,"column":1,"offset":5360},"end":{"line":169,"column":15,"offset":5374}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Fat arrow functions are one of my favorite additions to JavaScript. It might be very tempting to just start using ","position":{"start":{"line":171,"column":1,"offset":5376},"end":{"line":171,"column":115,"offset":5490}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"=>"}],"position":{"start":{"line":171,"column":115,"offset":5490},"end":{"line":171,"column":119,"offset":5494}}},{"type":"text","value":" instead of ","position":{"start":{"line":171,"column":119,"offset":5494},"end":{"line":171,"column":131,"offset":5506}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"function"}],"position":{"start":{"line":171,"column":131,"offset":5506},"end":{"line":171,"column":141,"offset":5516}}},{"type":"text","value":" everywhere. I've seen whole libraries written just using ","position":{"start":{"line":171,"column":141,"offset":5516},"end":{"line":171,"column":199,"offset":5574}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"=>"}],"position":{"start":{"line":171,"column":199,"offset":5574},"end":{"line":171,"column":203,"offset":5578}}},{"type":"text","value":" and I don't think it's the right thing to do because of the special features that ","position":{"start":{"line":171,"column":203,"offset":5578},"end":{"line":171,"column":286,"offset":5661}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"=>"}],"position":{"start":{"line":171,"column":286,"offset":5661},"end":{"line":171,"column":290,"offset":5665}}},{"type":"text","value":" introduces. I recommend using arrow functions only in places where you explicitly want to use the new features:","position":{"start":{"line":171,"column":290,"offset":5665},"end":{"line":171,"column":402,"offset":5777}}}],"position":{"start":{"line":171,"column":1,"offset":5376},"end":{"line":171,"column":402,"offset":5777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Single statement functions that immediately return (lambdas)","position":{"start":{"line":173,"column":3,"offset":5781},"end":{"line":173,"column":63,"offset":5841}}}],"position":{"start":{"line":173,"column":1,"offset":5779},"end":{"line":173,"column":63,"offset":5841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Functions that need to work with parent scope ","position":{"start":{"line":174,"column":3,"offset":5844},"end":{"line":174,"column":49,"offset":5890}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":174,"column":49,"offset":5890},"end":{"line":174,"column":55,"offset":5896}}}],"position":{"start":{"line":174,"column":1,"offset":5842},"end":{"line":174,"column":55,"offset":5896}}},{"type":"text","value":"\n"}],"position":{"start":{"line":173,"column":1,"offset":5779},"end":{"line":174,"column":55,"offset":5896}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":175,"column":1,"offset":5897}}}}