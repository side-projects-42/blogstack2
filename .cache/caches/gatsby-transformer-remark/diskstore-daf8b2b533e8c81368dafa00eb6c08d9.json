{"expireTime":9007200914465209000,"key":"transformer-remark-markdown-html-ast-f7b8cb044367cbaf824c26748674dabf--","val":{"type":"root","children":[{"type":"raw","value":"<!--StartFragment-->","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":21,"offset":21}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"1. Array","position":{"start":{"line":4,"column":5,"offset":27},"end":{"line":4,"column":13,"offset":35}}}],"position":{"start":{"line":4,"column":1,"offset":23},"end":{"line":4,"column":13,"offset":35}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The most basic of all data structures, an array stores data in memory for later use. Each array has a fixed number of cells decided on its creation, and each cell has a corresponding numeric index used to select its data. Whenever you’d like to use the array, all you need are the desired indices, and you can access any of the data within.","position":{"start":{"line":6,"column":1,"offset":37},"end":{"line":6,"column":341,"offset":377}}}],"position":{"start":{"line":6,"column":1,"offset":37},"end":{"line":6,"column":341,"offset":377}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/ab40ae120edb6f03676fd5bd971feb1f59801ee43d90464c5f3c0ac7f5dc4c25/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f35313633353033373435373631323830","alt":null},"children":[],"position":{"start":{"line":8,"column":2,"offset":380},"end":{"line":8,"column":271,"offset":649}}}],"position":{"start":{"line":8,"column":1,"offset":379},"end":{"line":8,"column":538,"offset":916}}}],"position":{"start":{"line":8,"column":1,"offset":379},"end":{"line":8,"column":538,"offset":916}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advantages","position":{"start":{"line":10,"column":1,"offset":918},"end":{"line":10,"column":11,"offset":928}}}],"position":{"start":{"line":10,"column":1,"offset":918},"end":{"line":10,"column":11,"offset":928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Simple to create and use.","position":{"start":{"line":12,"column":5,"offset":934},"end":{"line":12,"column":30,"offset":959}}}],"position":{"start":{"line":12,"column":1,"offset":930},"end":{"line":12,"column":30,"offset":959}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Foundational building block for complex data structures","position":{"start":{"line":13,"column":5,"offset":964},"end":{"line":13,"column":60,"offset":1019}}}],"position":{"start":{"line":13,"column":1,"offset":960},"end":{"line":13,"column":60,"offset":1019}}},{"type":"text","value":"\n"}],"position":{"start":{"line":12,"column":1,"offset":930},"end":{"line":13,"column":60,"offset":1019}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":15,"column":1,"offset":1021},"end":{"line":15,"column":14,"offset":1034}}}],"position":{"start":{"line":15,"column":1,"offset":1021},"end":{"line":15,"column":14,"offset":1034}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Fixed size","position":{"start":{"line":17,"column":5,"offset":1040},"end":{"line":17,"column":15,"offset":1050}}}],"position":{"start":{"line":17,"column":1,"offset":1036},"end":{"line":17,"column":15,"offset":1050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Expensive to insert/delete or resequence values","position":{"start":{"line":18,"column":5,"offset":1055},"end":{"line":18,"column":52,"offset":1102}}}],"position":{"start":{"line":18,"column":1,"offset":1051},"end":{"line":18,"column":52,"offset":1102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Inefficient to sort","position":{"start":{"line":19,"column":5,"offset":1107},"end":{"line":19,"column":24,"offset":1126}}}],"position":{"start":{"line":19,"column":1,"offset":1103},"end":{"line":19,"column":24,"offset":1126}}},{"type":"text","value":"\n"}],"position":{"start":{"line":17,"column":1,"offset":1036},"end":{"line":19,"column":24,"offset":1126}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications"},"children":[],"position":{"start":{"line":21,"column":6,"offset":1133},"end":{"line":21,"column":104,"offset":1231}}},{"type":"text","value":"Applications","position":{"start":{"line":21,"column":104,"offset":1231},"end":{"line":21,"column":116,"offset":1243}}}],"position":{"start":{"line":21,"column":1,"offset":1128},"end":{"line":21,"column":116,"offset":1243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Basic spreadsheets","position":{"start":{"line":23,"column":5,"offset":1249},"end":{"line":23,"column":23,"offset":1267}}}],"position":{"start":{"line":23,"column":1,"offset":1245},"end":{"line":23,"column":23,"offset":1267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Within complex structures such as hash tables","position":{"start":{"line":24,"column":5,"offset":1272},"end":{"line":24,"column":50,"offset":1317}}}],"position":{"start":{"line":24,"column":1,"offset":1268},"end":{"line":24,"column":50,"offset":1317}}},{"type":"text","value":"\n"}],"position":{"start":{"line":23,"column":1,"offset":1245},"end":{"line":24,"column":50,"offset":1317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":26,"column":1,"offset":1319},"end":{"line":27,"column":1,"offset":1321}}},{"type":"text","value":"\n"},{"type":"text","value":"\\","position":{"start":{"line":27,"column":1,"offset":1321},"end":{"line":27,"column":2,"offset":1322}}}],"position":{"start":{"line":26,"column":1,"offset":1319},"end":{"line":27,"column":2,"offset":1322}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#2-queues"},"children":[],"position":{"start":{"line":29,"column":5,"offset":1328},"end":{"line":29,"column":99,"offset":1422}}},{"type":"text","value":"2. Queues","position":{"start":{"line":29,"column":99,"offset":1422},"end":{"line":29,"column":108,"offset":1431}}}],"position":{"start":{"line":29,"column":1,"offset":1324},"end":{"line":29,"column":108,"offset":1431}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Queues are conceptually similar to stacks; both are sequential structures, but queues process elements in the order they were entered rather than the most recent element.","position":{"start":{"line":31,"column":1,"offset":1433},"end":{"line":31,"column":171,"offset":1603}}}],"position":{"start":{"line":31,"column":1,"offset":1433},"end":{"line":31,"column":171,"offset":1603}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"As a result, queues can be thought of as a FIFO (First In, First Out) version of stacks. These are helpful as a buffer for requests, storing each request in the order it was received until it can be processed.","position":{"start":{"line":33,"column":1,"offset":1605},"end":{"line":33,"column":210,"offset":1814}}}],"position":{"start":{"line":33,"column":1,"offset":1605},"end":{"line":33,"column":210,"offset":1814}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/0e19efa8b7251690191848de4d8538c36f7619aa1a69b46a306b16b19274edb0/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34363038323536343133353332313630","alt":null},"children":[],"position":{"start":{"line":35,"column":2,"offset":1817},"end":{"line":35,"column":271,"offset":2086}}}],"position":{"start":{"line":35,"column":1,"offset":1816},"end":{"line":35,"column":538,"offset":2353}}}],"position":{"start":{"line":35,"column":1,"offset":1816},"end":{"line":35,"column":538,"offset":2353}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For a visual, consider a single-lane tunnel: the first car to enter is the first car to exit. If other cars should wish to exit, but the first stops, all cars will have to wait for the first to exit before they can proceed.","position":{"start":{"line":37,"column":1,"offset":2355},"end":{"line":37,"column":224,"offset":2578}}}],"position":{"start":{"line":37,"column":1,"offset":2355},"end":{"line":37,"column":224,"offset":2578}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advantages","position":{"start":{"line":39,"column":1,"offset":2580},"end":{"line":39,"column":11,"offset":2590}}}],"position":{"start":{"line":39,"column":1,"offset":2580},"end":{"line":39,"column":11,"offset":2590}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":41,"column":5,"offset":2596},"end":{"line":41,"column":17,"offset":2608}}}],"position":{"start":{"line":41,"column":1,"offset":2592},"end":{"line":41,"column":17,"offset":2608}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Orders data in the order it was received","position":{"start":{"line":42,"column":5,"offset":2613},"end":{"line":42,"column":45,"offset":2653}}}],"position":{"start":{"line":42,"column":1,"offset":2609},"end":{"line":42,"column":45,"offset":2653}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Low runtime","position":{"start":{"line":43,"column":5,"offset":2658},"end":{"line":43,"column":16,"offset":2669}}}],"position":{"start":{"line":43,"column":1,"offset":2654},"end":{"line":43,"column":16,"offset":2669}}},{"type":"text","value":"\n"}],"position":{"start":{"line":41,"column":1,"offset":2592},"end":{"line":43,"column":16,"offset":2669}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":45,"column":1,"offset":2671},"end":{"line":45,"column":14,"offset":2684}}}],"position":{"start":{"line":45,"column":1,"offset":2671},"end":{"line":45,"column":14,"offset":2684}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Can only retrieve the oldest element","position":{"start":{"line":47,"column":5,"offset":2690},"end":{"line":47,"column":41,"offset":2726}}}],"position":{"start":{"line":47,"column":1,"offset":2686},"end":{"line":47,"column":41,"offset":2726}}},{"type":"text","value":"\n"}],"position":{"start":{"line":47,"column":1,"offset":2686},"end":{"line":47,"column":41,"offset":2726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-1"},"children":[],"position":{"start":{"line":49,"column":6,"offset":2733},"end":{"line":49,"column":106,"offset":2833}}},{"type":"text","value":"Applications","position":{"start":{"line":49,"column":106,"offset":2833},"end":{"line":49,"column":118,"offset":2845}}}],"position":{"start":{"line":49,"column":1,"offset":2728},"end":{"line":49,"column":118,"offset":2845}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Effective as a buffer when receiving frequent data","position":{"start":{"line":51,"column":5,"offset":2851},"end":{"line":51,"column":55,"offset":2901}}}],"position":{"start":{"line":51,"column":1,"offset":2847},"end":{"line":51,"column":55,"offset":2901}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Convenient way to store order-sensitive data such as stored voicemails","position":{"start":{"line":52,"column":5,"offset":2906},"end":{"line":52,"column":75,"offset":2976}}}],"position":{"start":{"line":52,"column":1,"offset":2902},"end":{"line":52,"column":75,"offset":2976}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Ensures the oldest data is processed first","position":{"start":{"line":53,"column":5,"offset":2981},"end":{"line":53,"column":47,"offset":3023}}}],"position":{"start":{"line":53,"column":1,"offset":2977},"end":{"line":53,"column":47,"offset":3023}}},{"type":"text","value":"\n"}],"position":{"start":{"line":51,"column":1,"offset":2847},"end":{"line":53,"column":47,"offset":3023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":55,"column":1,"offset":3025},"end":{"line":56,"column":1,"offset":3027}}},{"type":"text","value":"\n"},{"type":"text","value":"\\","position":{"start":{"line":56,"column":1,"offset":3027},"end":{"line":56,"column":2,"offset":3028}}}],"position":{"start":{"line":55,"column":1,"offset":3025},"end":{"line":56,"column":2,"offset":3028}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#3-linked-list"},"children":[],"position":{"start":{"line":58,"column":5,"offset":3034},"end":{"line":58,"column":104,"offset":3133}}},{"type":"text","value":"3. Linked List","position":{"start":{"line":58,"column":104,"offset":3133},"end":{"line":58,"column":118,"offset":3147}}}],"position":{"start":{"line":58,"column":1,"offset":3030},"end":{"line":58,"column":118,"offset":3147}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Linked lists are a data structure which, unlike the previous three, does not use physical placement of data in memory. This means that, rather than indexes or positions, linked lists use a referencing system: elements are stored in nodes that contain a pointer to the next node, repeating until all nodes are linked.","position":{"start":{"line":60,"column":1,"offset":3149},"end":{"line":60,"column":317,"offset":3465}}}],"position":{"start":{"line":60,"column":1,"offset":3149},"end":{"line":60,"column":317,"offset":3465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This system allows efficient insertion and removal of items without the need for reorganization.","position":{"start":{"line":62,"column":1,"offset":3467},"end":{"line":62,"column":97,"offset":3563}}}],"position":{"start":{"line":62,"column":1,"offset":3467},"end":{"line":62,"column":97,"offset":3563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/c5b4f3b037de92da7118b3bbf05e9485a28507729cf9d9cffc2c17f37189971f/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34353336323436353035333038313630","alt":null},"children":[],"position":{"start":{"line":64,"column":2,"offset":3566},"end":{"line":64,"column":271,"offset":3835}}}],"position":{"start":{"line":64,"column":1,"offset":3565},"end":{"line":64,"column":538,"offset":4102}}}],"position":{"start":{"line":64,"column":1,"offset":3565},"end":{"line":64,"column":538,"offset":4102}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advantages","position":{"start":{"line":66,"column":1,"offset":4104},"end":{"line":66,"column":11,"offset":4114}}}],"position":{"start":{"line":66,"column":1,"offset":4104},"end":{"line":66,"column":11,"offset":4114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Efficient insertion and removal of new elements","position":{"start":{"line":68,"column":5,"offset":4120},"end":{"line":68,"column":52,"offset":4167}}}],"position":{"start":{"line":68,"column":1,"offset":4116},"end":{"line":68,"column":52,"offset":4167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Less complex than restructuring an array","position":{"start":{"line":69,"column":5,"offset":4172},"end":{"line":69,"column":45,"offset":4212}}}],"position":{"start":{"line":69,"column":1,"offset":4168},"end":{"line":69,"column":45,"offset":4212}}},{"type":"text","value":"\n"}],"position":{"start":{"line":68,"column":1,"offset":4116},"end":{"line":69,"column":45,"offset":4212}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":71,"column":1,"offset":4214},"end":{"line":71,"column":14,"offset":4227}}}],"position":{"start":{"line":71,"column":1,"offset":4214},"end":{"line":71,"column":14,"offset":4227}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Uses more memory than arrays","position":{"start":{"line":73,"column":5,"offset":4233},"end":{"line":73,"column":33,"offset":4261}}}],"position":{"start":{"line":73,"column":1,"offset":4229},"end":{"line":73,"column":33,"offset":4261}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Inefficient to retrieve a specific element","position":{"start":{"line":74,"column":5,"offset":4266},"end":{"line":74,"column":47,"offset":4308}}}],"position":{"start":{"line":74,"column":1,"offset":4262},"end":{"line":74,"column":47,"offset":4308}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Inefficient to traverse the list backward","position":{"start":{"line":75,"column":5,"offset":4313},"end":{"line":75,"column":46,"offset":4354}}}],"position":{"start":{"line":75,"column":1,"offset":4309},"end":{"line":75,"column":46,"offset":4354}}},{"type":"text","value":"\n"}],"position":{"start":{"line":73,"column":1,"offset":4229},"end":{"line":75,"column":46,"offset":4354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-2"},"children":[],"position":{"start":{"line":77,"column":6,"offset":4361},"end":{"line":77,"column":106,"offset":4461}}},{"type":"text","value":"Applications","position":{"start":{"line":77,"column":106,"offset":4461},"end":{"line":77,"column":118,"offset":4473}}}],"position":{"start":{"line":77,"column":1,"offset":4356},"end":{"line":77,"column":118,"offset":4473}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Best used when data must be added and removed in quick succession from unknown locations","position":{"start":{"line":79,"column":5,"offset":4479},"end":{"line":79,"column":93,"offset":4567}}}],"position":{"start":{"line":79,"column":1,"offset":4475},"end":{"line":79,"column":93,"offset":4567}}},{"type":"text","value":"\n"}],"position":{"start":{"line":79,"column":1,"offset":4475},"end":{"line":79,"column":93,"offset":4567}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":81,"column":1,"offset":4569},"end":{"line":82,"column":1,"offset":4571}}},{"type":"text","value":"\n"},{"type":"text","value":"\\","position":{"start":{"line":82,"column":1,"offset":4571},"end":{"line":82,"column":2,"offset":4572}}}],"position":{"start":{"line":81,"column":1,"offset":4569},"end":{"line":82,"column":2,"offset":4572}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#4-trees"},"children":[],"position":{"start":{"line":84,"column":5,"offset":4578},"end":{"line":84,"column":98,"offset":4671}}},{"type":"text","value":"4. Trees","position":{"start":{"line":84,"column":98,"offset":4671},"end":{"line":84,"column":106,"offset":4679}}}],"position":{"start":{"line":84,"column":1,"offset":4574},"end":{"line":84,"column":106,"offset":4679}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Trees are another relation-based data structure, which specialize in representing hierarchical structures. Like a linked list, nodes contain both elements of data and pointers marking its relation to immediate nodes.","position":{"start":{"line":86,"column":1,"offset":4681},"end":{"line":86,"column":217,"offset":4897}}}],"position":{"start":{"line":86,"column":1,"offset":4681},"end":{"line":86,"column":217,"offset":4897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Each tree has a “root” node, off of which all other nodes branch. The root contains references to all elements directly below it, which are known as its “child nodes”. This continues, with each child node, branching off into more child nodes.","position":{"start":{"line":88,"column":1,"offset":4899},"end":{"line":88,"column":243,"offset":5141}}}],"position":{"start":{"line":88,"column":1,"offset":4899},"end":{"line":88,"column":243,"offset":5141}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Nodes with linked child nodes are called internal nodes while those without child nodes are external nodes. A common type of tree is the “binary search tree” which is used to easily search stored data.","position":{"start":{"line":90,"column":1,"offset":5143},"end":{"line":90,"column":202,"offset":5344}}}],"position":{"start":{"line":90,"column":1,"offset":5143},"end":{"line":90,"column":202,"offset":5344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"These search operations are highly efficient, as its search duration is dependent not on the number of nodes but on the number of levels down the tree.","position":{"start":{"line":92,"column":1,"offset":5346},"end":{"line":92,"column":152,"offset":5497}}}],"position":{"start":{"line":92,"column":1,"offset":5346},"end":{"line":92,"column":152,"offset":5497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/82cd3953e721f75e55b74c5854d64d3de002098592eba6338aa152f3ad1b4cc6/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34383630343534383739383837333630","alt":null},"children":[],"position":{"start":{"line":94,"column":2,"offset":5500},"end":{"line":94,"column":271,"offset":5769}}}],"position":{"start":{"line":94,"column":1,"offset":5499},"end":{"line":94,"column":538,"offset":6036}}}],"position":{"start":{"line":94,"column":1,"offset":5499},"end":{"line":94,"column":538,"offset":6036}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This type of tree is defined by four strict rules:","position":{"start":{"line":96,"column":1,"offset":6038},"end":{"line":96,"column":51,"offset":6088}}}],"position":{"start":{"line":96,"column":1,"offset":6038},"end":{"line":96,"column":51,"offset":6088}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The left subtree contains only nodes with elements lesser than the root.","position":{"start":{"line":98,"column":4,"offset":6093},"end":{"line":98,"column":76,"offset":6165}}}],"position":{"start":{"line":98,"column":1,"offset":6090},"end":{"line":98,"column":76,"offset":6165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The right subtree contains only nodes with elements greater than the root.","position":{"start":{"line":99,"column":4,"offset":6169},"end":{"line":99,"column":78,"offset":6243}}}],"position":{"start":{"line":99,"column":1,"offset":6166},"end":{"line":99,"column":78,"offset":6243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Left and right subtrees must also be a binary search tree. They must follow the above rules with the “root” of their tree.","position":{"start":{"line":100,"column":4,"offset":6247},"end":{"line":100,"column":126,"offset":6369}}}],"position":{"start":{"line":100,"column":1,"offset":6244},"end":{"line":100,"column":126,"offset":6369}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"There can be no duplicate nodes, i.e. no two nodes can have the same value.","position":{"start":{"line":101,"column":4,"offset":6373},"end":{"line":101,"column":79,"offset":6448}}}],"position":{"start":{"line":101,"column":1,"offset":6370},"end":{"line":101,"column":79,"offset":6448}}},{"type":"text","value":"\n"}],"position":{"start":{"line":98,"column":1,"offset":6090},"end":{"line":101,"column":79,"offset":6448}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advantages","position":{"start":{"line":103,"column":1,"offset":6450},"end":{"line":103,"column":11,"offset":6460}}}],"position":{"start":{"line":103,"column":1,"offset":6450},"end":{"line":103,"column":11,"offset":6460}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Ideal for storing hierarchical relationships","position":{"start":{"line":105,"column":5,"offset":6466},"end":{"line":105,"column":49,"offset":6510}}}],"position":{"start":{"line":105,"column":1,"offset":6462},"end":{"line":105,"column":49,"offset":6510}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Dynamic size","position":{"start":{"line":106,"column":5,"offset":6515},"end":{"line":106,"column":17,"offset":6527}}}],"position":{"start":{"line":106,"column":1,"offset":6511},"end":{"line":106,"column":17,"offset":6527}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Quick at insert and delete operations","position":{"start":{"line":107,"column":5,"offset":6532},"end":{"line":107,"column":42,"offset":6569}}}],"position":{"start":{"line":107,"column":1,"offset":6528},"end":{"line":107,"column":42,"offset":6569}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In a binary search tree, inserted nodes are sequenced immediately.","position":{"start":{"line":108,"column":5,"offset":6574},"end":{"line":108,"column":71,"offset":6640}}}],"position":{"start":{"line":108,"column":1,"offset":6570},"end":{"line":108,"column":71,"offset":6640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Binary search trees are efficient at searches; length is only O(height)O(height).","position":{"start":{"line":109,"column":5,"offset":6645},"end":{"line":109,"column":86,"offset":6726}}}],"position":{"start":{"line":109,"column":1,"offset":6641},"end":{"line":109,"column":86,"offset":6726}}},{"type":"text","value":"\n"}],"position":{"start":{"line":105,"column":1,"offset":6462},"end":{"line":109,"column":86,"offset":6726}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":111,"column":1,"offset":6728},"end":{"line":111,"column":14,"offset":6741}}}],"position":{"start":{"line":111,"column":1,"offset":6728},"end":{"line":111,"column":14,"offset":6741}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Slow to rearrange nodes","position":{"start":{"line":113,"column":5,"offset":6747},"end":{"line":113,"column":28,"offset":6770}}}],"position":{"start":{"line":113,"column":1,"offset":6743},"end":{"line":113,"column":28,"offset":6770}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Child nodes hold no information about their parent node","position":{"start":{"line":114,"column":5,"offset":6775},"end":{"line":114,"column":60,"offset":6830}}}],"position":{"start":{"line":114,"column":1,"offset":6771},"end":{"line":114,"column":60,"offset":6830}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Binary search trees are not as fast as the more complicated hash table","position":{"start":{"line":115,"column":5,"offset":6835},"end":{"line":115,"column":75,"offset":6905}}}],"position":{"start":{"line":115,"column":1,"offset":6831},"end":{"line":115,"column":75,"offset":6905}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Binary search trees can degenerate into linear search (scanning all elements) if not implemented with balanced subtrees.","position":{"start":{"line":116,"column":5,"offset":6910},"end":{"line":116,"column":125,"offset":7030}}}],"position":{"start":{"line":116,"column":1,"offset":6906},"end":{"line":116,"column":125,"offset":7030}}},{"type":"text","value":"\n"}],"position":{"start":{"line":113,"column":1,"offset":6743},"end":{"line":116,"column":125,"offset":7030}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-3"},"children":[],"position":{"start":{"line":118,"column":6,"offset":7037},"end":{"line":118,"column":106,"offset":7137}}},{"type":"text","value":"Applications","position":{"start":{"line":118,"column":106,"offset":7137},"end":{"line":118,"column":118,"offset":7149}}}],"position":{"start":{"line":118,"column":1,"offset":7032},"end":{"line":118,"column":118,"offset":7149}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Storing hierarchical data such as a file location.","position":{"start":{"line":120,"column":5,"offset":7155},"end":{"line":120,"column":55,"offset":7205}}}],"position":{"start":{"line":120,"column":1,"offset":7151},"end":{"line":120,"column":55,"offset":7205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Binary search trees are excellent for tasks needing searching or ordering of data.","position":{"start":{"line":121,"column":5,"offset":7210},"end":{"line":121,"column":87,"offset":7292}}}],"position":{"start":{"line":121,"column":1,"offset":7206},"end":{"line":121,"column":87,"offset":7292}}},{"type":"text","value":"\n"}],"position":{"start":{"line":120,"column":1,"offset":7151},"end":{"line":121,"column":87,"offset":7292}}},{"type":"text","value":"\n"},{"type":"element","tagName":"blockquote","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"*","position":{"start":{"line":123,"column":5,"offset":7298},"end":{"line":123,"column":7,"offset":7300}}},{"type":"text","value":"Enjoying the article?","position":{"start":{"line":123,"column":7,"offset":7300},"end":{"line":123,"column":28,"offset":7321}}}],"position":{"start":{"line":123,"column":3,"offset":7296},"end":{"line":123,"column":30,"offset":7323}}},{"type":"text","value":" Scroll down to","position":{"start":{"line":123,"column":30,"offset":7323},"end":{"line":123,"column":45,"offset":7338}}},{"type":"text","value":"*","position":{"start":{"line":123,"column":45,"offset":7338},"end":{"line":123,"column":47,"offset":7340}}},{"type":"text","value":" ","position":{"start":{"line":123,"column":47,"offset":7340},"end":{"line":123,"column":48,"offset":7341}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://www.educative.io/blog/blog-newsletter-annoucement"},"children":[{"type":"text","value":"sign up","position":{"start":{"line":123,"column":50,"offset":7343},"end":{"line":123,"column":57,"offset":7350}}}],"position":{"start":{"line":123,"column":49,"offset":7342},"end":{"line":123,"column":117,"offset":7410}}}],"position":{"start":{"line":123,"column":48,"offset":7341},"end":{"line":123,"column":118,"offset":7411}}},{"type":"text","value":" ","position":{"start":{"line":123,"column":118,"offset":7411},"end":{"line":123,"column":119,"offset":7412}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"for our free, bi-monthly newsletter.","position":{"start":{"line":123,"column":120,"offset":7413},"end":{"line":123,"column":156,"offset":7449}}}],"position":{"start":{"line":123,"column":119,"offset":7412},"end":{"line":123,"column":157,"offset":7450}}}],"position":{"start":{"line":123,"column":3,"offset":7296},"end":{"line":123,"column":157,"offset":7450}}},{"type":"text","value":"\n"}],"position":{"start":{"line":123,"column":1,"offset":7294},"end":{"line":123,"column":157,"offset":7450}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":125,"column":1,"offset":7452},"end":{"line":125,"column":2,"offset":7453}}}],"position":{"start":{"line":125,"column":1,"offset":7452},"end":{"line":125,"column":2,"offset":7453}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#5-graphs"},"children":[],"position":{"start":{"line":127,"column":5,"offset":7459},"end":{"line":127,"column":99,"offset":7553}}},{"type":"text","value":"5. Graphs","position":{"start":{"line":127,"column":99,"offset":7553},"end":{"line":127,"column":108,"offset":7562}}}],"position":{"start":{"line":127,"column":1,"offset":7455},"end":{"line":127,"column":108,"offset":7562}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Graphs are a relation-based data structure helpful for storing web-like relationships. Each node, or vertex, as they’re called in graphs, has a title (A, B, C, etc.), a value contained within, and a list of links (called edges) it has with other vertices.","position":{"start":{"line":129,"column":1,"offset":7564},"end":{"line":129,"column":256,"offset":7819}}}],"position":{"start":{"line":129,"column":1,"offset":7564},"end":{"line":129,"column":256,"offset":7819}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/615c0612c32e8d319d2c79e596885e4aceb6ce7dc64ac235ede92637fac589f9/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f34393132363931303737343437363830","alt":null},"children":[],"position":{"start":{"line":131,"column":2,"offset":7822},"end":{"line":131,"column":271,"offset":8091}}}],"position":{"start":{"line":131,"column":1,"offset":7821},"end":{"line":131,"column":538,"offset":8358}}}],"position":{"start":{"line":131,"column":1,"offset":7821},"end":{"line":131,"column":538,"offset":8358}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"In the above example, each circle is a vertex, and each line is an edge. If produced in writing, this structure would look like:","position":{"start":{"line":133,"column":1,"offset":8360},"end":{"line":133,"column":129,"offset":8488}}}],"position":{"start":{"line":133,"column":1,"offset":8360},"end":{"line":133,"column":129,"offset":8488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"V = {a, b, c, d}","position":{"start":{"line":135,"column":2,"offset":8491},"end":{"line":135,"column":18,"offset":8507}}}],"position":{"start":{"line":135,"column":1,"offset":8490},"end":{"line":135,"column":19,"offset":8508}}}],"position":{"start":{"line":135,"column":1,"offset":8490},"end":{"line":135,"column":19,"offset":8508}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"E = {ab, ac, bc, cd}","position":{"start":{"line":137,"column":2,"offset":8511},"end":{"line":137,"column":22,"offset":8531}}}],"position":{"start":{"line":137,"column":1,"offset":8510},"end":{"line":137,"column":23,"offset":8532}}}],"position":{"start":{"line":137,"column":1,"offset":8510},"end":{"line":137,"column":23,"offset":8532}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"While hard to visualize at first, this structure is invaluable in conveying relationship charts in textual form, anything from circuitry to train networks.","position":{"start":{"line":139,"column":1,"offset":8534},"end":{"line":139,"column":156,"offset":8689}}}],"position":{"start":{"line":139,"column":1,"offset":8534},"end":{"line":139,"column":156,"offset":8689}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advantages","position":{"start":{"line":141,"column":1,"offset":8691},"end":{"line":141,"column":11,"offset":8701}}}],"position":{"start":{"line":141,"column":1,"offset":8691},"end":{"line":141,"column":11,"offset":8701}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Can quickly convey visuals over text","position":{"start":{"line":143,"column":5,"offset":8707},"end":{"line":143,"column":41,"offset":8743}}}],"position":{"start":{"line":143,"column":1,"offset":8703},"end":{"line":143,"column":41,"offset":8743}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Usable to model a diverse number of subjects so long as they contain a relational structure","position":{"start":{"line":144,"column":5,"offset":8748},"end":{"line":144,"column":96,"offset":8839}}}],"position":{"start":{"line":144,"column":1,"offset":8744},"end":{"line":144,"column":96,"offset":8839}}},{"type":"text","value":"\n"}],"position":{"start":{"line":143,"column":1,"offset":8703},"end":{"line":144,"column":96,"offset":8839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":146,"column":1,"offset":8841},"end":{"line":146,"column":14,"offset":8854}}}],"position":{"start":{"line":146,"column":1,"offset":8841},"end":{"line":146,"column":14,"offset":8854}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"At a higher level, text can be time-consuming to convert to an image.","position":{"start":{"line":148,"column":5,"offset":8860},"end":{"line":148,"column":74,"offset":8929}}}],"position":{"start":{"line":148,"column":1,"offset":8856},"end":{"line":148,"column":74,"offset":8929}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"It can be difficult to see the existing edges or how many edges a given vertex has connected to it","position":{"start":{"line":149,"column":5,"offset":8934},"end":{"line":149,"column":103,"offset":9032}}}],"position":{"start":{"line":149,"column":1,"offset":8930},"end":{"line":149,"column":103,"offset":9032}}},{"type":"text","value":"\n"}],"position":{"start":{"line":148,"column":1,"offset":8856},"end":{"line":149,"column":103,"offset":9032}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-4"},"children":[],"position":{"start":{"line":151,"column":6,"offset":9039},"end":{"line":151,"column":106,"offset":9139}}},{"type":"text","value":"Applications","position":{"start":{"line":151,"column":106,"offset":9139},"end":{"line":151,"column":118,"offset":9151}}}],"position":{"start":{"line":151,"column":1,"offset":9034},"end":{"line":151,"column":118,"offset":9151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Network representations","position":{"start":{"line":153,"column":5,"offset":9157},"end":{"line":153,"column":28,"offset":9180}}}],"position":{"start":{"line":153,"column":1,"offset":9153},"end":{"line":153,"column":28,"offset":9180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Modeling social networks, such as Facebook.","position":{"start":{"line":154,"column":5,"offset":9185},"end":{"line":154,"column":48,"offset":9228}}}],"position":{"start":{"line":154,"column":1,"offset":9181},"end":{"line":154,"column":48,"offset":9228}}},{"type":"text","value":"\n"}],"position":{"start":{"line":153,"column":1,"offset":9153},"end":{"line":154,"column":48,"offset":9228}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":156,"column":1,"offset":9230},"end":{"line":156,"column":2,"offset":9231}}}],"position":{"start":{"line":156,"column":1,"offset":9230},"end":{"line":156,"column":2,"offset":9231}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#6-hash-tables-map"},"children":[],"position":{"start":{"line":158,"column":5,"offset":9237},"end":{"line":158,"column":108,"offset":9340}}},{"type":"text","value":"6. Hash Tables (Map)","position":{"start":{"line":158,"column":108,"offset":9340},"end":{"line":158,"column":128,"offset":9360}}}],"position":{"start":{"line":158,"column":1,"offset":9233},"end":{"line":158,"column":128,"offset":9360}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Hash tables are a complex data structure capable of storing large amounts of information and retrieving specific elements efficiently. This data structure relies on the concept of key/value pairs, where the “key” is a searched string and the “value” is the data paired with that key.","position":{"start":{"line":160,"column":1,"offset":9362},"end":{"line":160,"column":284,"offset":9645}}}],"position":{"start":{"line":160,"column":1,"offset":9362},"end":{"line":160,"column":284,"offset":9645}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/ed02956a5f707a017dc59966166c26835374fa0b48a9b6d0aaec06367d4dae10/68747470733a2f2f7777772e6564756361746976652e696f2f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36373435393131313633303932393932","alt":null},"children":[],"position":{"start":{"line":162,"column":2,"offset":9648},"end":{"line":162,"column":271,"offset":9917}}}],"position":{"start":{"line":162,"column":1,"offset":9647},"end":{"line":162,"column":538,"offset":10184}}},{"type":"text","value":" Each searched key is converted from its string form into a numerical value, called a hash, using a predefined hash function. This hash then points to a storage bucket – a smaller subgroup within the table. It then searches the bucket for the originally entered key and returns the value associated with that key.","position":{"start":{"line":162,"column":538,"offset":10184},"end":{"line":162,"column":851,"offset":10497}}}],"position":{"start":{"line":162,"column":1,"offset":9647},"end":{"line":162,"column":851,"offset":10497}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Advantages","position":{"start":{"line":164,"column":1,"offset":10499},"end":{"line":164,"column":11,"offset":10509}}}],"position":{"start":{"line":164,"column":1,"offset":10499},"end":{"line":164,"column":11,"offset":10509}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Key can be in any form, while array’s indices must be integers","position":{"start":{"line":166,"column":5,"offset":10515},"end":{"line":166,"column":67,"offset":10577}}}],"position":{"start":{"line":166,"column":1,"offset":10511},"end":{"line":166,"column":67,"offset":10577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Highly efficient search function","position":{"start":{"line":167,"column":5,"offset":10582},"end":{"line":167,"column":37,"offset":10614}}}],"position":{"start":{"line":167,"column":1,"offset":10578},"end":{"line":167,"column":37,"offset":10614}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Constant number of operations for each search","position":{"start":{"line":168,"column":5,"offset":10619},"end":{"line":168,"column":50,"offset":10664}}}],"position":{"start":{"line":168,"column":1,"offset":10615},"end":{"line":168,"column":50,"offset":10664}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Constant cost for insertion or deletion operations","position":{"start":{"line":169,"column":5,"offset":10669},"end":{"line":169,"column":55,"offset":10719}}}],"position":{"start":{"line":169,"column":1,"offset":10665},"end":{"line":169,"column":55,"offset":10719}}},{"type":"text","value":"\n"}],"position":{"start":{"line":166,"column":1,"offset":10511},"end":{"line":169,"column":55,"offset":10719}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Disadvantages","position":{"start":{"line":171,"column":1,"offset":10721},"end":{"line":171,"column":14,"offset":10734}}}],"position":{"start":{"line":171,"column":1,"offset":10721},"end":{"line":171,"column":14,"offset":10734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Collisions: an error caused when two keys convert to the same hash code or two hash codes point to the same value.","position":{"start":{"line":173,"column":5,"offset":10740},"end":{"line":173,"column":119,"offset":10854}}}],"position":{"start":{"line":173,"column":1,"offset":10736},"end":{"line":173,"column":119,"offset":10854}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"These errors can be common and often require an overhaul of the hash function.","position":{"start":{"line":174,"column":5,"offset":10859},"end":{"line":174,"column":83,"offset":10937}}}],"position":{"start":{"line":174,"column":1,"offset":10855},"end":{"line":174,"column":83,"offset":10937}}},{"type":"text","value":"\n"}],"position":{"start":{"line":173,"column":1,"offset":10736},"end":{"line":174,"column":83,"offset":10937}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#applications-5"},"children":[],"position":{"start":{"line":176,"column":6,"offset":10944},"end":{"line":176,"column":106,"offset":11044}}},{"type":"text","value":"Applications","position":{"start":{"line":176,"column":106,"offset":11044},"end":{"line":176,"column":118,"offset":11056}}}],"position":{"start":{"line":176,"column":1,"offset":10939},"end":{"line":176,"column":118,"offset":11056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Database storage","position":{"start":{"line":178,"column":5,"offset":11062},"end":{"line":178,"column":21,"offset":11078}}}],"position":{"start":{"line":178,"column":1,"offset":11058},"end":{"line":178,"column":21,"offset":11078}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Address lookups by name","position":{"start":{"line":179,"column":5,"offset":11083},"end":{"line":179,"column":28,"offset":11106}}}],"position":{"start":{"line":179,"column":1,"offset":11079},"end":{"line":179,"column":28,"offset":11106}}},{"type":"text","value":"\n"}],"position":{"start":{"line":178,"column":1,"offset":11058},"end":{"line":179,"column":28,"offset":11106}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Each hash table can be very different, from the types of the keys and values, to the way their hash functions work. Due to these differences and the multi-layered aspects of a hash table, it is nearly impossible to encapsulate so generally.","position":{"start":{"line":181,"column":1,"offset":11108},"end":{"line":181,"column":241,"offset":11348}}}],"position":{"start":{"line":181,"column":1,"offset":11108},"end":{"line":181,"column":241,"offset":11348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"br","properties":{},"children":[],"position":{"start":{"line":183,"column":1,"offset":11350},"end":{"line":184,"column":1,"offset":11352}}},{"type":"text","value":"\n"},{"type":"text","value":"\\","position":{"start":{"line":184,"column":1,"offset":11352},"end":{"line":184,"column":2,"offset":11353}}}],"position":{"start":{"line":183,"column":1,"offset":11350},"end":{"line":184,"column":2,"offset":11353}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#data-structure-interview-questions"},"children":[],"position":{"start":{"line":186,"column":5,"offset":11359},"end":{"line":186,"column":125,"offset":11479}}},{"type":"text","value":"Data structure interview questions","position":{"start":{"line":186,"column":125,"offset":11479},"end":{"line":186,"column":159,"offset":11513}}}],"position":{"start":{"line":186,"column":1,"offset":11355},"end":{"line":186,"column":159,"offset":11513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"For many developers and programmers, data structures are most important for ","position":{"start":{"line":188,"column":1,"offset":11515},"end":{"line":188,"column":77,"offset":11591}}},{"type":"element","tagName":"a","properties":{"href":"https://www.educative.io/blog/acing-the-javascript-interview-top-questions-explained"},"children":[{"type":"text","value":"cracking Javascript coding interviews","position":{"start":{"line":188,"column":78,"offset":11592},"end":{"line":188,"column":115,"offset":11629}}}],"position":{"start":{"line":188,"column":77,"offset":11591},"end":{"line":188,"column":202,"offset":11716}}},{"type":"text","value":". Questions and problems on data structures are fundamental to modern-day coding interviews. In fact, they have a lot to say over your hireability and entry-level rate as a candidate.","position":{"start":{"line":188,"column":202,"offset":11716},"end":{"line":188,"column":385,"offset":11899}}}],"position":{"start":{"line":188,"column":1,"offset":11515},"end":{"line":188,"column":385,"offset":11899}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Today, we will be going over seven common coding interview questions for JavaScript data structures, one for each of the data structures we discussed above. Each will also discuss its time complexity based on the ","position":{"start":{"line":190,"column":1,"offset":11901},"end":{"line":190,"column":214,"offset":12114}}},{"type":"element","tagName":"a","properties":{"href":"https://www.educative.io/blog/a-big-o-primer-for-beginning-devs"},"children":[{"type":"text","value":"BigO notation","position":{"start":{"line":190,"column":215,"offset":12115},"end":{"line":190,"column":228,"offset":12128}}}],"position":{"start":{"line":190,"column":214,"offset":12114},"end":{"line":190,"column":294,"offset":12194}}},{"type":"text","value":" theory.","position":{"start":{"line":190,"column":294,"offset":12194},"end":{"line":190,"column":302,"offset":12202}}}],"position":{"start":{"line":190,"column":1,"offset":11901},"end":{"line":190,"column":302,"offset":12202}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":192,"column":1,"offset":12204},"end":{"line":192,"column":2,"offset":12205}}}],"position":{"start":{"line":192,"column":1,"offset":12204},"end":{"line":192,"column":2,"offset":12205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#array-remove-all-even-integers-from-an-array"},"children":[],"position":{"start":{"line":194,"column":6,"offset":12212},"end":{"line":194,"column":136,"offset":12342}}},{"type":"text","value":"Array: Remove all even integers from an array","position":{"start":{"line":194,"column":136,"offset":12342},"end":{"line":194,"column":181,"offset":12387}}}],"position":{"start":{"line":194,"column":1,"offset":12207},"end":{"line":194,"column":181,"offset":12387}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":196,"column":3,"offset":12391},"end":{"line":196,"column":21,"offset":12409}}}],"position":{"start":{"line":196,"column":1,"offset":12389},"end":{"line":196,"column":23,"offset":12411}}},{"type":"text","value":" Implement a function ","position":{"start":{"line":196,"column":23,"offset":12411},"end":{"line":196,"column":45,"offset":12433}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"removeEven(arr)"}],"position":{"start":{"line":196,"column":45,"offset":12433},"end":{"line":196,"column":62,"offset":12450}}},{"type":"text","value":", which takes an array arr in its input and removes all the even elements from a given array.","position":{"start":{"line":196,"column":62,"offset":12450},"end":{"line":196,"column":155,"offset":12543}}}],"position":{"start":{"line":196,"column":1,"offset":12389},"end":{"line":196,"column":155,"offset":12543}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":198,"column":3,"offset":12547},"end":{"line":198,"column":9,"offset":12553}}}],"position":{"start":{"line":198,"column":1,"offset":12545},"end":{"line":198,"column":11,"offset":12555}}},{"type":"text","value":" An array of random integers","position":{"start":{"line":198,"column":11,"offset":12555},"end":{"line":198,"column":39,"offset":12583}}}],"position":{"start":{"line":198,"column":1,"offset":12545},"end":{"line":198,"column":39,"offset":12583}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":200,"column":1,"offset":12585},"end":{"line":202,"column":4,"offset":12593}}}],"position":{"start":{"line":200,"column":1,"offset":12585},"end":{"line":202,"column":4,"offset":12593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":204,"column":3,"offset":12597},"end":{"line":204,"column":10,"offset":12604}}}],"position":{"start":{"line":204,"column":1,"offset":12595},"end":{"line":204,"column":12,"offset":12606}}},{"type":"text","value":" an array containing only odd integers","position":{"start":{"line":204,"column":12,"offset":12606},"end":{"line":204,"column":50,"offset":12644}}}],"position":{"start":{"line":204,"column":1,"offset":12595},"end":{"line":204,"column":50,"offset":12644}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":206,"column":1,"offset":12646},"end":{"line":208,"column":4,"offset":12654}}}],"position":{"start":{"line":206,"column":1,"offset":12646},"end":{"line":208,"column":4,"offset":12654}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"There are two ways you could solve this coding problem in an interview. Let’s discuss each.","position":{"start":{"line":210,"column":1,"offset":12656},"end":{"line":210,"column":92,"offset":12747}}}],"position":{"start":{"line":210,"column":1,"offset":12656},"end":{"line":210,"column":92,"offset":12747}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":212,"column":1,"offset":12749},"end":{"line":212,"column":2,"offset":12750}}}],"position":{"start":{"line":212,"column":1,"offset":12749},"end":{"line":212,"column":2,"offset":12750}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Solution #1: Doing it “by hand”","position":{"start":{"line":214,"column":3,"offset":12754},"end":{"line":214,"column":34,"offset":12785}}}],"position":{"start":{"line":214,"column":1,"offset":12752},"end":{"line":214,"column":36,"offset":12787}}}],"position":{"start":{"line":214,"column":1,"offset":12752},"end":{"line":214,"column":36,"offset":12787}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"123456789function removeEven(arr) { var odds = ","position":{"start":{"line":216,"column":1,"offset":12789},"end":{"line":216,"column":48,"offset":12836}}},{"type":"text","value":"[","position":{"start":{"line":216,"column":48,"offset":12836},"end":{"line":216,"column":50,"offset":12838}}},{"type":"text","value":"] for (let number of arr) { if (number % 2 != 0) // Check if the item in the list is NOT even ('%' is the modulus symbol!) odds.push(number) //If it isn't even append it to the empty list } return odds // Return the new list}console.log(removeEven(","position":{"start":{"line":216,"column":50,"offset":12838},"end":{"line":216,"column":298,"offset":13086}}},{"type":"text","value":"[","position":{"start":{"line":216,"column":298,"offset":13086},"end":{"line":216,"column":300,"offset":13088}}},{"type":"text","value":"3, 2, 41, 3, 34]))Run","position":{"start":{"line":216,"column":300,"offset":13088},"end":{"line":216,"column":321,"offset":13109}}}],"position":{"start":{"line":216,"column":1,"offset":12789},"end":{"line":216,"column":321,"offset":13109}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This approach starts with the first element of the array. If that current element is not even, it pushes this element into a new array. If it is even, it will move to the next element, repeating until it reaches the end of the array. In regards to time complexity, since the entire array has to be iterated over, this solution is in ","position":{"start":{"line":218,"column":1,"offset":13111},"end":{"line":218,"column":334,"offset":13444}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O(n)O(n).","position":{"start":{"line":218,"column":335,"offset":13445},"end":{"line":218,"column":344,"offset":13454}}}],"position":{"start":{"line":218,"column":334,"offset":13444},"end":{"line":218,"column":345,"offset":13455}}}],"position":{"start":{"line":218,"column":1,"offset":13111},"end":{"line":218,"column":345,"offset":13455}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":220,"column":1,"offset":13457},"end":{"line":220,"column":2,"offset":13458}}}],"position":{"start":{"line":220,"column":1,"offset":13457},"end":{"line":220,"column":2,"offset":13458}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Solution #2: Using filter() and lambda function","position":{"start":{"line":222,"column":3,"offset":13462},"end":{"line":222,"column":50,"offset":13509}}}],"position":{"start":{"line":222,"column":1,"offset":13460},"end":{"line":222,"column":52,"offset":13511}}}],"position":{"start":{"line":222,"column":1,"offset":13460},"end":{"line":222,"column":52,"offset":13511}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"1234function removeEven(arr) { return arr.filter((v => (v % 2) != 0))}console.log(removeEven(","position":{"start":{"line":224,"column":1,"offset":13513},"end":{"line":224,"column":94,"offset":13606}}},{"type":"text","value":"[","position":{"start":{"line":224,"column":94,"offset":13606},"end":{"line":224,"column":96,"offset":13608}}},{"type":"text","value":"3,2,41,3,34]))","position":{"start":{"line":224,"column":96,"offset":13608},"end":{"line":224,"column":110,"offset":13622}}}],"position":{"start":{"line":224,"column":1,"offset":13513},"end":{"line":224,"column":110,"offset":13622}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This solution also begins with the first element and checks if it is even. If it is even, it filters out this element. If not, skips to the next element, repeating this process until it reaches the end of the array.","position":{"start":{"line":226,"column":1,"offset":13624},"end":{"line":226,"column":216,"offset":13839}}}],"position":{"start":{"line":226,"column":1,"offset":13624},"end":{"line":226,"column":216,"offset":13839}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The filter function uses lambda or arrow functions, which use shorter, simpler syntax. The filter filters out the element for which the lambda function returns false. The time complexity of this is the same as the time complexity of the previous solution.","position":{"start":{"line":228,"column":1,"offset":13841},"end":{"line":228,"column":256,"offset":14096}}}],"position":{"start":{"line":228,"column":1,"offset":13841},"end":{"line":228,"column":256,"offset":14096}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":230,"column":1,"offset":14098},"end":{"line":230,"column":2,"offset":14099}}}],"position":{"start":{"line":230,"column":1,"offset":14098},"end":{"line":230,"column":2,"offset":14099}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#stack-check-for-balanced-parentheses-using-a-stack"},"children":[],"position":{"start":{"line":232,"column":6,"offset":14106},"end":{"line":232,"column":142,"offset":14242}}},{"type":"text","value":"Stack: Check for balanced parentheses using a stack","position":{"start":{"line":232,"column":142,"offset":14242},"end":{"line":232,"column":193,"offset":14293}}}],"position":{"start":{"line":232,"column":1,"offset":14101},"end":{"line":232,"column":193,"offset":14293}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":234,"column":3,"offset":14297},"end":{"line":234,"column":21,"offset":14315}}}],"position":{"start":{"line":234,"column":1,"offset":14295},"end":{"line":234,"column":23,"offset":14317}}},{"type":"text","value":" Implement the ","position":{"start":{"line":234,"column":23,"offset":14317},"end":{"line":234,"column":38,"offset":14332}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"isBalanced()"}],"position":{"start":{"line":234,"column":38,"offset":14332},"end":{"line":234,"column":52,"offset":14346}}},{"type":"text","value":" function to take a string containing only curly ","position":{"start":{"line":234,"column":52,"offset":14346},"end":{"line":234,"column":101,"offset":14395}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{}"}],"position":{"start":{"line":234,"column":101,"offset":14395},"end":{"line":234,"column":105,"offset":14399}}},{"type":"text","value":", square ","position":{"start":{"line":234,"column":105,"offset":14399},"end":{"line":234,"column":114,"offset":14408}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[]"}],"position":{"start":{"line":234,"column":114,"offset":14408},"end":{"line":234,"column":118,"offset":14412}}},{"type":"text","value":", and round ","position":{"start":{"line":234,"column":118,"offset":14412},"end":{"line":234,"column":130,"offset":14424}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"()"}],"position":{"start":{"line":234,"column":130,"offset":14424},"end":{"line":234,"column":134,"offset":14428}}},{"type":"text","value":" parentheses. The function should tell us if all the parentheses in the string are balanced. This means that every opening parenthesis will have a closing one. For example, ","position":{"start":{"line":234,"column":134,"offset":14428},"end":{"line":234,"column":307,"offset":14601}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{[]}"}],"position":{"start":{"line":234,"column":307,"offset":14601},"end":{"line":234,"column":313,"offset":14607}}},{"type":"text","value":" is balanced, but ","position":{"start":{"line":234,"column":313,"offset":14607},"end":{"line":234,"column":331,"offset":14625}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{[}]"}],"position":{"start":{"line":234,"column":331,"offset":14625},"end":{"line":234,"column":337,"offset":14631}}},{"type":"text","value":" is not.","position":{"start":{"line":234,"column":337,"offset":14631},"end":{"line":234,"column":345,"offset":14639}}}],"position":{"start":{"line":234,"column":1,"offset":14295},"end":{"line":234,"column":345,"offset":14639}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":236,"column":3,"offset":14643},"end":{"line":236,"column":9,"offset":14649}}}],"position":{"start":{"line":236,"column":1,"offset":14641},"end":{"line":236,"column":11,"offset":14651}}},{"type":"text","value":" A string consisting solely of ","position":{"start":{"line":236,"column":11,"offset":14651},"end":{"line":236,"column":42,"offset":14682}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"("}],"position":{"start":{"line":236,"column":42,"offset":14682},"end":{"line":236,"column":45,"offset":14685}}},{"type":"text","value":", ","position":{"start":{"line":236,"column":45,"offset":14685},"end":{"line":236,"column":47,"offset":14687}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":")"}],"position":{"start":{"line":236,"column":47,"offset":14687},"end":{"line":236,"column":50,"offset":14690}}},{"type":"text","value":", ","position":{"start":{"line":236,"column":50,"offset":14690},"end":{"line":236,"column":52,"offset":14692}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"{"}],"position":{"start":{"line":236,"column":52,"offset":14692},"end":{"line":236,"column":55,"offset":14695}}},{"type":"text","value":", ","position":{"start":{"line":236,"column":55,"offset":14695},"end":{"line":236,"column":57,"offset":14697}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"}"}],"position":{"start":{"line":236,"column":57,"offset":14697},"end":{"line":236,"column":60,"offset":14700}}},{"type":"text","value":", ","position":{"start":{"line":236,"column":60,"offset":14700},"end":{"line":236,"column":62,"offset":14702}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"["}],"position":{"start":{"line":236,"column":62,"offset":14702},"end":{"line":236,"column":65,"offset":14705}}},{"type":"text","value":" and ","position":{"start":{"line":236,"column":65,"offset":14705},"end":{"line":236,"column":70,"offset":14710}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"]"}],"position":{"start":{"line":236,"column":70,"offset":14710},"end":{"line":236,"column":73,"offset":14713}}}],"position":{"start":{"line":236,"column":1,"offset":14641},"end":{"line":236,"column":73,"offset":14713}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":238,"column":1,"offset":14715},"end":{"line":240,"column":4,"offset":14723}}}],"position":{"start":{"line":238,"column":1,"offset":14715},"end":{"line":240,"column":4,"offset":14723}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":242,"column":3,"offset":14727},"end":{"line":242,"column":10,"offset":14734}}}],"position":{"start":{"line":242,"column":1,"offset":14725},"end":{"line":242,"column":12,"offset":14736}}},{"type":"text","value":" Returns ","position":{"start":{"line":242,"column":12,"offset":14736},"end":{"line":242,"column":21,"offset":14745}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"False"}],"position":{"start":{"line":242,"column":21,"offset":14745},"end":{"line":242,"column":28,"offset":14752}}},{"type":"text","value":" if the expression doesn’t have balanced parentheses. If it does, the function returns ","position":{"start":{"line":242,"column":28,"offset":14752},"end":{"line":242,"column":115,"offset":14839}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"True"}],"position":{"start":{"line":242,"column":115,"offset":14839},"end":{"line":242,"column":121,"offset":14845}}},{"type":"text","value":".","position":{"start":{"line":242,"column":121,"offset":14845},"end":{"line":242,"column":122,"offset":14846}}}],"position":{"start":{"line":242,"column":1,"offset":14725},"end":{"line":242,"column":122,"offset":14846}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":244,"column":1,"offset":14848},"end":{"line":246,"column":4,"offset":14856}}}],"position":{"start":{"line":244,"column":1,"offset":14848},"end":{"line":246,"column":4,"offset":14856}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To solve this problem, we can simply use a stack of characters. Look below at the code to see how it works.","position":{"start":{"line":248,"column":1,"offset":14858},"end":{"line":248,"column":108,"offset":14965}}}],"position":{"start":{"line":248,"column":1,"offset":14858},"end":{"line":248,"column":108,"offset":14965}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"index.jsStack.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Stack { constructor() { this.items = ","position":{"start":{"line":250,"column":1,"offset":14967},"end":{"line":250,"column":143,"offset":15109}}},{"type":"text","value":"[","position":{"start":{"line":250,"column":143,"offset":15109},"end":{"line":250,"column":145,"offset":15111}}},{"type":"text","value":"]; this.top = null; } getTop() { if (this.items.length == 0) return null; return this.top; } isEmpty() { return this.items.length == 0; } size() { return this.items.length; } push(element) { this.items.push(element); this.top = element; } pop() { if (this.items.length != 0) { if (this.items.length == 1) { this.top = null; return this.items.pop();Run","position":{"start":{"line":250,"column":145,"offset":15111},"end":{"line":250,"column":496,"offset":15462}}}],"position":{"start":{"line":250,"column":1,"offset":14967},"end":{"line":250,"column":496,"offset":15462}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This process will iterate over the string one character at a time. We can determine that the string is unbalanced based on two factors:","position":{"start":{"line":252,"column":1,"offset":15464},"end":{"line":252,"column":136,"offset":15599}}}],"position":{"start":{"line":252,"column":1,"offset":15464},"end":{"line":252,"column":136,"offset":15599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ol","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The stack is empty.","position":{"start":{"line":254,"column":4,"offset":15604},"end":{"line":254,"column":23,"offset":15623}}}],"position":{"start":{"line":254,"column":1,"offset":15601},"end":{"line":254,"column":23,"offset":15623}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"The top element in the stack is not the right type.","position":{"start":{"line":255,"column":4,"offset":15627},"end":{"line":255,"column":55,"offset":15678}}}],"position":{"start":{"line":255,"column":1,"offset":15624},"end":{"line":255,"column":55,"offset":15678}}},{"type":"text","value":"\n"}],"position":{"start":{"line":254,"column":1,"offset":15601},"end":{"line":255,"column":55,"offset":15678}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"If either of these conditions is true, we return ","position":{"start":{"line":257,"column":1,"offset":15680},"end":{"line":257,"column":50,"offset":15729}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"False"}],"position":{"start":{"line":257,"column":50,"offset":15729},"end":{"line":257,"column":57,"offset":15736}}},{"type":"text","value":". If the parenthesis is an opening parenthesis, it is pushed into the stack. If by the end all are balanced, the stack will be empty. If it is not empty, we return ","position":{"start":{"line":257,"column":57,"offset":15736},"end":{"line":257,"column":221,"offset":15900}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"False"}],"position":{"start":{"line":257,"column":221,"offset":15900},"end":{"line":257,"column":228,"offset":15907}}},{"type":"text","value":". Since we traverse the string exp only once, the time complexity is ","position":{"start":{"line":257,"column":228,"offset":15907},"end":{"line":257,"column":297,"offset":15976}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":257,"column":298,"offset":15977},"end":{"line":257,"column":302,"offset":15981}}}],"position":{"start":{"line":257,"column":297,"offset":15976},"end":{"line":257,"column":303,"offset":15982}}},{"type":"text","value":".","position":{"start":{"line":257,"column":303,"offset":15982},"end":{"line":257,"column":304,"offset":15983}}}],"position":{"start":{"line":257,"column":1,"offset":15680},"end":{"line":257,"column":304,"offset":15983}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":259,"column":1,"offset":15985},"end":{"line":259,"column":2,"offset":15986}}}],"position":{"start":{"line":259,"column":1,"offset":15985},"end":{"line":259,"column":2,"offset":15986}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#queue-generate-binary-numbers-from-1-to-n"},"children":[],"position":{"start":{"line":261,"column":6,"offset":15993},"end":{"line":261,"column":133,"offset":16120}}},{"type":"text","value":"Queue: Generate Binary Numbers from 1 to n","position":{"start":{"line":261,"column":133,"offset":16120},"end":{"line":261,"column":175,"offset":16162}}}],"position":{"start":{"line":261,"column":1,"offset":15988},"end":{"line":261,"column":175,"offset":16162}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":263,"column":3,"offset":16166},"end":{"line":263,"column":21,"offset":16184}}}],"position":{"start":{"line":263,"column":1,"offset":16164},"end":{"line":263,"column":23,"offset":16186}}},{"type":"text","value":" Implement a function ","position":{"start":{"line":263,"column":23,"offset":16186},"end":{"line":263,"column":45,"offset":16208}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"findBin(n)"}],"position":{"start":{"line":263,"column":45,"offset":16208},"end":{"line":263,"column":57,"offset":16220}}},{"type":"text","value":", which will generate binary numbers from ","position":{"start":{"line":263,"column":57,"offset":16220},"end":{"line":263,"column":99,"offset":16262}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":263,"column":99,"offset":16262},"end":{"line":263,"column":102,"offset":16265}}},{"type":"text","value":" to ","position":{"start":{"line":263,"column":102,"offset":16265},"end":{"line":263,"column":106,"offset":16269}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"n"}],"position":{"start":{"line":263,"column":106,"offset":16269},"end":{"line":263,"column":109,"offset":16272}}},{"type":"text","value":" in the form of a string using a queue.","position":{"start":{"line":263,"column":109,"offset":16272},"end":{"line":263,"column":148,"offset":16311}}}],"position":{"start":{"line":263,"column":1,"offset":16164},"end":{"line":263,"column":148,"offset":16311}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":265,"column":3,"offset":16315},"end":{"line":265,"column":9,"offset":16321}}}],"position":{"start":{"line":265,"column":1,"offset":16313},"end":{"line":265,"column":11,"offset":16323}}},{"type":"text","value":" A positive integer n","position":{"start":{"line":265,"column":11,"offset":16323},"end":{"line":265,"column":32,"offset":16344}}}],"position":{"start":{"line":265,"column":1,"offset":16313},"end":{"line":265,"column":32,"offset":16344}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":267,"column":1,"offset":16346},"end":{"line":269,"column":4,"offset":16354}}}],"position":{"start":{"line":267,"column":1,"offset":16346},"end":{"line":269,"column":4,"offset":16354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":271,"column":3,"offset":16358},"end":{"line":271,"column":10,"offset":16365}}}],"position":{"start":{"line":271,"column":1,"offset":16356},"end":{"line":271,"column":12,"offset":16367}}},{"type":"text","value":" Returns binary numbers in the form of strings from ","position":{"start":{"line":271,"column":12,"offset":16367},"end":{"line":271,"column":64,"offset":16419}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":271,"column":64,"offset":16419},"end":{"line":271,"column":67,"offset":16422}}},{"type":"text","value":" up to ","position":{"start":{"line":271,"column":67,"offset":16422},"end":{"line":271,"column":74,"offset":16429}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"n"}],"position":{"start":{"line":271,"column":74,"offset":16429},"end":{"line":271,"column":77,"offset":16432}}}],"position":{"start":{"line":271,"column":1,"offset":16356},"end":{"line":271,"column":77,"offset":16432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":273,"column":1,"offset":16434},"end":{"line":275,"column":4,"offset":16442}}}],"position":{"start":{"line":273,"column":1,"offset":16434},"end":{"line":275,"column":4,"offset":16442}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The easiest way to solve this problem is using a queue to generate new numbers from previous numbers. Let’s break that down.","position":{"start":{"line":277,"column":1,"offset":16444},"end":{"line":277,"column":125,"offset":16568}}}],"position":{"start":{"line":277,"column":1,"offset":16444},"end":{"line":277,"column":125,"offset":16568}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"index.jsQueue.js12345678910111213141516171819202122232425262728293031\"use strict\";module.exports = class Queue { constructor() { this.items = ","position":{"start":{"line":279,"column":1,"offset":16570},"end":{"line":279,"column":143,"offset":16712}}},{"type":"text","value":"[","position":{"start":{"line":279,"column":143,"offset":16712},"end":{"line":279,"column":145,"offset":16714}}},{"type":"text","value":"]; this.front = null; this.back = null; } isEmpty() { return this.items.length == 0; } getFront() { if (this.items.length != 0) { return this.items","position":{"start":{"line":279,"column":145,"offset":16714},"end":{"line":279,"column":292,"offset":16861}}},{"type":"text","value":"[","position":{"start":{"line":279,"column":292,"offset":16861},"end":{"line":279,"column":294,"offset":16863}}},{"type":"text","value":"0]; } else return null; } size() { return this.items.length; } enqueue(element) { this.items.push(element); }Run","position":{"start":{"line":279,"column":294,"offset":16863},"end":{"line":279,"column":406,"offset":16975}}}],"position":{"start":{"line":279,"column":1,"offset":16570},"end":{"line":279,"column":406,"offset":16975}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The key is to generate consecutive binary numbers by appending 0 and 1 to previous binary numbers. To clarify,","position":{"start":{"line":281,"column":1,"offset":16977},"end":{"line":281,"column":111,"offset":17087}}}],"position":{"start":{"line":281,"column":1,"offset":16977},"end":{"line":281,"column":111,"offset":17087}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"10 and 11 can be generated if 0 and 1 are appended to 1.","position":{"start":{"line":283,"column":5,"offset":17093},"end":{"line":283,"column":61,"offset":17149}}}],"position":{"start":{"line":283,"column":1,"offset":17089},"end":{"line":283,"column":61,"offset":17149}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"100 and 101 are generated if 0 and 1 are appended to 10.","position":{"start":{"line":284,"column":5,"offset":17154},"end":{"line":284,"column":61,"offset":17210}}}],"position":{"start":{"line":284,"column":1,"offset":17150},"end":{"line":284,"column":61,"offset":17210}}},{"type":"text","value":"\n"}],"position":{"start":{"line":283,"column":1,"offset":17089},"end":{"line":284,"column":61,"offset":17210}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Once we generate a binary number, it is then enqueued to a queue so that new binary numbers can be generated if we append 0 and 1 when that number will be enqueued.","position":{"start":{"line":286,"column":1,"offset":17212},"end":{"line":286,"column":165,"offset":17376}}}],"position":{"start":{"line":286,"column":1,"offset":17212},"end":{"line":286,"column":165,"offset":17376}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since a queue follows the ","position":{"start":{"line":288,"column":1,"offset":17378},"end":{"line":288,"column":27,"offset":17404}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"First-In First-Out","position":{"start":{"line":288,"column":28,"offset":17405},"end":{"line":288,"column":46,"offset":17423}}}],"position":{"start":{"line":288,"column":27,"offset":17404},"end":{"line":288,"column":47,"offset":17424}}},{"type":"text","value":" property, the enqueued binary numbers are dequeued so that the resulting array is mathematically correct.","position":{"start":{"line":288,"column":47,"offset":17424},"end":{"line":288,"column":153,"offset":17530}}}],"position":{"start":{"line":288,"column":1,"offset":17378},"end":{"line":288,"column":153,"offset":17530}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Look at the code above. On line 7, ","position":{"start":{"line":290,"column":1,"offset":17532},"end":{"line":290,"column":36,"offset":17567}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":290,"column":36,"offset":17567},"end":{"line":290,"column":39,"offset":17570}}},{"type":"text","value":" is enqueued. To generate the sequence of binary numbers, a number is dequeued and stored in the array ","position":{"start":{"line":290,"column":39,"offset":17570},"end":{"line":290,"column":142,"offset":17673}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"result"}],"position":{"start":{"line":290,"column":142,"offset":17673},"end":{"line":290,"column":150,"offset":17681}}},{"type":"text","value":". On lines 11-12, we append ","position":{"start":{"line":290,"column":150,"offset":17681},"end":{"line":290,"column":178,"offset":17709}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"0"}],"position":{"start":{"line":290,"column":178,"offset":17709},"end":{"line":290,"column":181,"offset":17712}}},{"type":"text","value":" and ","position":{"start":{"line":290,"column":181,"offset":17712},"end":{"line":290,"column":186,"offset":17717}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"1"}],"position":{"start":{"line":290,"column":186,"offset":17717},"end":{"line":290,"column":189,"offset":17720}}},{"type":"text","value":" to produce the next numbers.","position":{"start":{"line":290,"column":189,"offset":17720},"end":{"line":290,"column":218,"offset":17749}}}],"position":{"start":{"line":290,"column":1,"offset":17532},"end":{"line":290,"column":218,"offset":17749}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Those new numbers are also enqueued at lines 14-15. The queue will take integer values, so it converts the string to an integer as it is enqueued.","position":{"start":{"line":292,"column":1,"offset":17751},"end":{"line":292,"column":147,"offset":17897}}}],"position":{"start":{"line":292,"column":1,"offset":17751},"end":{"line":292,"column":147,"offset":17897}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The time complexity of this solution is in ","position":{"start":{"line":294,"column":1,"offset":17899},"end":{"line":294,"column":44,"offset":17942}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O(n)O(n)","position":{"start":{"line":294,"column":45,"offset":17943},"end":{"line":294,"column":53,"offset":17951}}}],"position":{"start":{"line":294,"column":44,"offset":17942},"end":{"line":294,"column":54,"offset":17952}}},{"type":"text","value":" since constant-time operations are executed for n times.","position":{"start":{"line":294,"column":54,"offset":17952},"end":{"line":294,"column":111,"offset":18009}}}],"position":{"start":{"line":294,"column":1,"offset":17899},"end":{"line":294,"column":111,"offset":18009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":296,"column":1,"offset":18011},"end":{"line":296,"column":2,"offset":18012}}}],"position":{"start":{"line":296,"column":1,"offset":18011},"end":{"line":296,"column":2,"offset":18012}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#linked-list-reverse-a-linked-list"},"children":[],"position":{"start":{"line":298,"column":6,"offset":18019},"end":{"line":298,"column":125,"offset":18138}}},{"type":"text","value":"Linked List: Reverse a linked list","position":{"start":{"line":298,"column":125,"offset":18138},"end":{"line":298,"column":159,"offset":18172}}}],"position":{"start":{"line":298,"column":1,"offset":18014},"end":{"line":298,"column":159,"offset":18172}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":300,"column":3,"offset":18176},"end":{"line":300,"column":21,"offset":18194}}}],"position":{"start":{"line":300,"column":1,"offset":18174},"end":{"line":300,"column":23,"offset":18196}}},{"type":"text","value":" Write the ","position":{"start":{"line":300,"column":23,"offset":18196},"end":{"line":300,"column":34,"offset":18207}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"reverse"}],"position":{"start":{"line":300,"column":34,"offset":18207},"end":{"line":300,"column":43,"offset":18216}}},{"type":"text","value":" function to take a singly linked list and reverse it in place.","position":{"start":{"line":300,"column":43,"offset":18216},"end":{"line":300,"column":106,"offset":18279}}}],"position":{"start":{"line":300,"column":1,"offset":18174},"end":{"line":300,"column":106,"offset":18279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":302,"column":3,"offset":18283},"end":{"line":302,"column":9,"offset":18289}}}],"position":{"start":{"line":302,"column":1,"offset":18281},"end":{"line":302,"column":11,"offset":18291}}},{"type":"text","value":" a singly linked list","position":{"start":{"line":302,"column":11,"offset":18291},"end":{"line":302,"column":32,"offset":18312}}}],"position":{"start":{"line":302,"column":1,"offset":18281},"end":{"line":302,"column":32,"offset":18312}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":304,"column":1,"offset":18314},"end":{"line":306,"column":4,"offset":18322}}}],"position":{"start":{"line":304,"column":1,"offset":18314},"end":{"line":306,"column":4,"offset":18322}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":308,"column":3,"offset":18326},"end":{"line":308,"column":10,"offset":18333}}}],"position":{"start":{"line":308,"column":1,"offset":18324},"end":{"line":308,"column":12,"offset":18335}}},{"type":"text","value":" a reverse linked list","position":{"start":{"line":308,"column":12,"offset":18335},"end":{"line":308,"column":34,"offset":18357}}}],"position":{"start":{"line":308,"column":1,"offset":18324},"end":{"line":308,"column":34,"offset":18357}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":310,"column":1,"offset":18359},"end":{"line":312,"column":4,"offset":18367}}}],"position":{"start":{"line":310,"column":1,"offset":18359},"end":{"line":312,"column":4,"offset":18367}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The easiest way to solve this problem is by using iterative pointer manipulation. Let’s take a look.","position":{"start":{"line":314,"column":1,"offset":18369},"end":{"line":314,"column":101,"offset":18469}}}],"position":{"start":{"line":314,"column":1,"offset":18369},"end":{"line":314,"column":101,"offset":18469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"index.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class LinkedList { constructor() { this.head = null; } //Insertion At Head insertAtHead(newData) { let tempNode = new Node(newData); tempNode.nextElement = this.head; this.head = tempNode; return this; //returning the updated list } isEmpty() { return (this.head == null); } //function to print the linked list printList() { if (this.isEmpty()) { console.log(\"Empty List\"); return false; } else { let temp = this.head; while (temp != null) { process.stdout.write(String(temp.data)); process.stdout.write(\" -> \"); temp = temp.nextElement;Run","position":{"start":{"line":316,"column":1,"offset":18471},"end":{"line":316,"column":686,"offset":19156}}}],"position":{"start":{"line":316,"column":1,"offset":18471},"end":{"line":316,"column":686,"offset":19156}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We use a loop to iterate through the input list. For a ","position":{"start":{"line":318,"column":1,"offset":19158},"end":{"line":318,"column":56,"offset":19213}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"current"}],"position":{"start":{"line":318,"column":56,"offset":19213},"end":{"line":318,"column":65,"offset":19222}}},{"type":"text","value":" node, its link with the ","position":{"start":{"line":318,"column":65,"offset":19222},"end":{"line":318,"column":90,"offset":19247}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"previous"}],"position":{"start":{"line":318,"column":90,"offset":19247},"end":{"line":318,"column":100,"offset":19257}}},{"type":"text","value":" node is reversed. then, ","position":{"start":{"line":318,"column":100,"offset":19257},"end":{"line":318,"column":125,"offset":19282}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"next"}],"position":{"start":{"line":318,"column":125,"offset":19282},"end":{"line":318,"column":131,"offset":19288}}},{"type":"text","value":" stores the next node in the list. Let’s break that down by line.","position":{"start":{"line":318,"column":131,"offset":19288},"end":{"line":318,"column":196,"offset":19353}}}],"position":{"start":{"line":318,"column":1,"offset":19158},"end":{"line":318,"column":196,"offset":19353}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Line 22- Store the ","position":{"start":{"line":320,"column":5,"offset":19359},"end":{"line":320,"column":24,"offset":19378}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"current"}],"position":{"start":{"line":320,"column":24,"offset":19378},"end":{"line":320,"column":33,"offset":19387}}},{"type":"text","value":" node’s ","position":{"start":{"line":320,"column":33,"offset":19387},"end":{"line":320,"column":41,"offset":19395}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nextElement"}],"position":{"start":{"line":320,"column":41,"offset":19395},"end":{"line":320,"column":54,"offset":19408}}},{"type":"text","value":" in ","position":{"start":{"line":320,"column":54,"offset":19408},"end":{"line":320,"column":58,"offset":19412}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"next"}],"position":{"start":{"line":320,"column":58,"offset":19412},"end":{"line":320,"column":64,"offset":19418}}}],"position":{"start":{"line":320,"column":1,"offset":19355},"end":{"line":320,"column":64,"offset":19418}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Line 23 - Set ","position":{"start":{"line":321,"column":5,"offset":19423},"end":{"line":321,"column":19,"offset":19437}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"current"}],"position":{"start":{"line":321,"column":19,"offset":19437},"end":{"line":321,"column":28,"offset":19446}}},{"type":"text","value":" node’s ","position":{"start":{"line":321,"column":28,"offset":19446},"end":{"line":321,"column":36,"offset":19454}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"nextElement"}],"position":{"start":{"line":321,"column":36,"offset":19454},"end":{"line":321,"column":49,"offset":19467}}},{"type":"text","value":" to ","position":{"start":{"line":321,"column":49,"offset":19467},"end":{"line":321,"column":53,"offset":19471}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"previous"}],"position":{"start":{"line":321,"column":53,"offset":19471},"end":{"line":321,"column":63,"offset":19481}}}],"position":{"start":{"line":321,"column":1,"offset":19419},"end":{"line":321,"column":63,"offset":19481}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Line 24 - Make the ","position":{"start":{"line":322,"column":5,"offset":19486},"end":{"line":322,"column":24,"offset":19505}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"current"}],"position":{"start":{"line":322,"column":24,"offset":19505},"end":{"line":322,"column":33,"offset":19514}}},{"type":"text","value":" node the new ","position":{"start":{"line":322,"column":33,"offset":19514},"end":{"line":322,"column":47,"offset":19528}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"previous"}],"position":{"start":{"line":322,"column":47,"offset":19528},"end":{"line":322,"column":57,"offset":19538}}},{"type":"text","value":" for the next iteration","position":{"start":{"line":322,"column":57,"offset":19538},"end":{"line":322,"column":80,"offset":19561}}}],"position":{"start":{"line":322,"column":1,"offset":19482},"end":{"line":322,"column":80,"offset":19561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Line 25 - Use ","position":{"start":{"line":323,"column":5,"offset":19566},"end":{"line":323,"column":19,"offset":19580}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"next"}],"position":{"start":{"line":323,"column":19,"offset":19580},"end":{"line":323,"column":25,"offset":19586}}},{"type":"text","value":" to go to the next node","position":{"start":{"line":323,"column":25,"offset":19586},"end":{"line":323,"column":48,"offset":19609}}}],"position":{"start":{"line":323,"column":1,"offset":19562},"end":{"line":323,"column":48,"offset":19609}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Line 29 - We reset the ","position":{"start":{"line":324,"column":5,"offset":19614},"end":{"line":324,"column":28,"offset":19637}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"head"}],"position":{"start":{"line":324,"column":28,"offset":19637},"end":{"line":324,"column":34,"offset":19643}}},{"type":"text","value":" pointer to point at the last node","position":{"start":{"line":324,"column":34,"offset":19643},"end":{"line":324,"column":68,"offset":19677}}}],"position":{"start":{"line":324,"column":1,"offset":19610},"end":{"line":324,"column":68,"offset":19677}}},{"type":"text","value":"\n"}],"position":{"start":{"line":320,"column":1,"offset":19355},"end":{"line":324,"column":68,"offset":19677}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since the list is traversed only once, the algorithm runs in ","position":{"start":{"line":326,"column":1,"offset":19679},"end":{"line":326,"column":62,"offset":19740}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O(n)","position":{"start":{"line":326,"column":63,"offset":19741},"end":{"line":326,"column":67,"offset":19745}}}],"position":{"start":{"line":326,"column":62,"offset":19740},"end":{"line":326,"column":68,"offset":19746}}},{"type":"text","value":".","position":{"start":{"line":326,"column":68,"offset":19746},"end":{"line":326,"column":69,"offset":19747}}}],"position":{"start":{"line":326,"column":1,"offset":19679},"end":{"line":326,"column":69,"offset":19747}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":328,"column":1,"offset":19749},"end":{"line":328,"column":2,"offset":19750}}}],"position":{"start":{"line":328,"column":1,"offset":19749},"end":{"line":328,"column":2,"offset":19750}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#tree-find-the-minimum-value-in-a-binary-search-tree"},"children":[],"position":{"start":{"line":330,"column":6,"offset":19757},"end":{"line":330,"column":143,"offset":19894}}},{"type":"text","value":"Tree: Find the Minimum Value in a Binary Search Tree","position":{"start":{"line":330,"column":143,"offset":19894},"end":{"line":330,"column":195,"offset":19946}}}],"position":{"start":{"line":330,"column":1,"offset":19752},"end":{"line":330,"column":195,"offset":19946}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":332,"column":3,"offset":19950},"end":{"line":332,"column":21,"offset":19968}}}],"position":{"start":{"line":332,"column":1,"offset":19948},"end":{"line":332,"column":23,"offset":19970}}},{"type":"text","value":" Use the ","position":{"start":{"line":332,"column":23,"offset":19970},"end":{"line":332,"column":32,"offset":19979}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"findMin(root)"}],"position":{"start":{"line":332,"column":32,"offset":19979},"end":{"line":332,"column":47,"offset":19994}}},{"type":"text","value":" function to find the minimum value in a Binary Search Tree.","position":{"start":{"line":332,"column":47,"offset":19994},"end":{"line":332,"column":107,"offset":20054}}}],"position":{"start":{"line":332,"column":1,"offset":19948},"end":{"line":332,"column":107,"offset":20054}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":334,"column":3,"offset":20058},"end":{"line":334,"column":9,"offset":20064}}}],"position":{"start":{"line":334,"column":1,"offset":20056},"end":{"line":334,"column":11,"offset":20066}}},{"type":"text","value":" a root node for a binary search tree","position":{"start":{"line":334,"column":11,"offset":20066},"end":{"line":334,"column":48,"offset":20103}}}],"position":{"start":{"line":334,"column":1,"offset":20056},"end":{"line":334,"column":48,"offset":20103}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":336,"column":1,"offset":20105},"end":{"line":338,"column":4,"offset":20113}}}],"position":{"start":{"line":336,"column":1,"offset":20105},"end":{"line":338,"column":4,"offset":20113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":340,"column":3,"offset":20117},"end":{"line":340,"column":10,"offset":20124}}}],"position":{"start":{"line":340,"column":1,"offset":20115},"end":{"line":340,"column":12,"offset":20126}}},{"type":"text","value":" the smallest integer value from that binary search tree","position":{"start":{"line":340,"column":12,"offset":20126},"end":{"line":340,"column":68,"offset":20182}}}],"position":{"start":{"line":340,"column":1,"offset":20115},"end":{"line":340,"column":68,"offset":20182}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":342,"column":1,"offset":20184},"end":{"line":344,"column":4,"offset":20192}}}],"position":{"start":{"line":342,"column":1,"offset":20184},"end":{"line":344,"column":4,"offset":20192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Let’s look at an easy solution for this problem.","position":{"start":{"line":346,"column":1,"offset":20194},"end":{"line":346,"column":49,"offset":20242}}}],"position":{"start":{"line":346,"column":1,"offset":20194},"end":{"line":346,"column":49,"offset":20242}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":348,"column":1,"offset":20244},"end":{"line":348,"column":2,"offset":20245}}}],"position":{"start":{"line":348,"column":1,"offset":20244},"end":{"line":348,"column":2,"offset":20245}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Solution: Iterative ","position":{"start":{"line":350,"column":3,"offset":20249},"end":{"line":350,"column":23,"offset":20269}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"findMin( )"}],"position":{"start":{"line":350,"column":23,"offset":20269},"end":{"line":350,"column":35,"offset":20281}}}],"position":{"start":{"line":350,"column":1,"offset":20247},"end":{"line":350,"column":37,"offset":20283}}}],"position":{"start":{"line":350,"column":1,"offset":20247},"end":{"line":350,"column":37,"offset":20283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"This solution begins by checking if the root is ","position":{"start":{"line":352,"column":1,"offset":20285},"end":{"line":352,"column":49,"offset":20333}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"null"}],"position":{"start":{"line":352,"column":49,"offset":20333},"end":{"line":352,"column":55,"offset":20339}}},{"type":"text","value":". It returns ","position":{"start":{"line":352,"column":55,"offset":20339},"end":{"line":352,"column":68,"offset":20352}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"null"}],"position":{"start":{"line":352,"column":68,"offset":20352},"end":{"line":352,"column":74,"offset":20358}}},{"type":"text","value":" if so. It then moves to the left subtree and continues with each node’s left child until the left-most child is reached.","position":{"start":{"line":352,"column":74,"offset":20358},"end":{"line":352,"column":195,"offset":20479}}}],"position":{"start":{"line":352,"column":1,"offset":20285},"end":{"line":352,"column":195,"offset":20479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"index.jsBinarySearchTree.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const Node = require('./Node.js');module.exports = class BinarySearchTree { constructor(rootValue) { this.root = new Node(rootValue); } insert(currentNode, newValue) { if (currentNode === null) { currentNode = new Node(newValue); } else if (newValue < currentNode.val) { currentNode.leftChild = this.insert(currentNode.leftChild, newValue); } else { currentNode.rightChild = this.insert(currentNode.rightChild, newValue); } return currentNode; } insertBST(newValue) { if(this.root==null){ this.root=new Node(newValue); return; } this.insert(this.root, newValue); } preOrderPrint(currentNode) { if (currentNode !== null) { console.log(currentNode.val); this.preOrderPrint(currentNode.leftChild);Run\\","position":{"start":{"line":354,"column":1,"offset":20481},"end":{"line":354,"column":799,"offset":21279}}}],"position":{"start":{"line":354,"column":1,"offset":20481},"end":{"line":354,"column":799,"offset":21279}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#graph-remove-edge"},"children":[],"position":{"start":{"line":356,"column":6,"offset":21286},"end":{"line":356,"column":109,"offset":21389}}},{"type":"text","value":"Graph: Remove Edge","position":{"start":{"line":356,"column":109,"offset":21389},"end":{"line":356,"column":127,"offset":21407}}}],"position":{"start":{"line":356,"column":1,"offset":21281},"end":{"line":356,"column":127,"offset":21407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":358,"column":3,"offset":21411},"end":{"line":358,"column":21,"offset":21429}}}],"position":{"start":{"line":358,"column":1,"offset":21409},"end":{"line":358,"column":23,"offset":21431}}},{"type":"text","value":" Implement the removeEdge function to take a source and a destination as arguments. It should detect if an edge exists between them.","position":{"start":{"line":358,"column":23,"offset":21431},"end":{"line":358,"column":155,"offset":21563}}}],"position":{"start":{"line":358,"column":1,"offset":21409},"end":{"line":358,"column":155,"offset":21563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":360,"column":3,"offset":21567},"end":{"line":360,"column":9,"offset":21573}}}],"position":{"start":{"line":360,"column":1,"offset":21565},"end":{"line":360,"column":11,"offset":21575}}},{"type":"text","value":" A graph, a source, and a destination","position":{"start":{"line":360,"column":11,"offset":21575},"end":{"line":360,"column":48,"offset":21612}}}],"position":{"start":{"line":360,"column":1,"offset":21565},"end":{"line":360,"column":48,"offset":21612}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md"},"children":[{"type":"element","tagName":"img","properties":{"src":"","alt":null},"children":[],"position":{"start":{"line":362,"column":2,"offset":21615},"end":{"line":362,"column":7,"offset":21620}}}],"position":{"start":{"line":362,"column":1,"offset":21614},"end":{"line":362,"column":91,"offset":21704}}},{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/428156ffac3c84ccdc035827728a34648c3fb537f5967696fff27d5625f9fc18/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget"},"children":[],"position":{"start":{"line":362,"column":92,"offset":21705},"end":{"line":362,"column":445,"offset":22058}}}],"position":{"start":{"line":362,"column":91,"offset":21704},"end":{"line":362,"column":790,"offset":22403}}},{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/bab248d2d24b5387823fe7b0259e5ce89b5b38e322500cae5fe67b5a379dad90/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36353736313335363639323834383634","alt":"widget"},"children":[],"position":{"start":{"line":362,"column":791,"offset":22404},"end":{"line":362,"column":1154,"offset":22767}}}],"position":{"start":{"line":362,"column":790,"offset":22403},"end":{"line":362,"column":1509,"offset":23122}}}],"position":{"start":{"line":362,"column":1,"offset":21614},"end":{"line":362,"column":1509,"offset":23122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":364,"column":3,"offset":23126},"end":{"line":364,"column":10,"offset":23133}}}],"position":{"start":{"line":364,"column":1,"offset":23124},"end":{"line":364,"column":12,"offset":23135}}},{"type":"text","value":" A graph with the edge between the source and the destination removed.","position":{"start":{"line":364,"column":12,"offset":23135},"end":{"line":364,"column":82,"offset":23205}}}],"position":{"start":{"line":364,"column":1,"offset":23124},"end":{"line":364,"column":82,"offset":23205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":366,"column":1,"offset":23207},"end":{"line":368,"column":4,"offset":23215}}}],"position":{"start":{"line":366,"column":1,"offset":23207},"end":{"line":368,"column":4,"offset":23215}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md"},"children":[{"type":"element","tagName":"img","properties":{"src":"","alt":null},"children":[],"position":{"start":{"line":370,"column":2,"offset":23218},"end":{"line":370,"column":7,"offset":23223}}}],"position":{"start":{"line":370,"column":1,"offset":23217},"end":{"line":370,"column":91,"offset":23307}}},{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/3c66578e7e5a92a7e8bbe6957356049a8d4206d6d9a91ed2fd6460c7b9fb8ff5/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3630302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget"},"children":[],"position":{"start":{"line":370,"column":92,"offset":23308},"end":{"line":370,"column":445,"offset":23661}}}],"position":{"start":{"line":370,"column":91,"offset":23307},"end":{"line":370,"column":790,"offset":24006}}},{"type":"element","tagName":"a","properties":{"href":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034"},"children":[{"type":"element","tagName":"img","properties":{"src":"https://camo.githubusercontent.com/da5b513fd1a1678e0b6d6209a9673acb5555e3a7f863eb1580ff38d71f6bbfed/68747470733a2f2f7777772e6564756361746976652e696f2f63646e2d6367692f696d6167652f663d6175746f2c6669743d636f6e7461696e2c773d3330302c713d31302f6170692f706167652f363039343438343838333337343038302f696d6167652f646f776e6c6f61642f36303338353930393834323930333034","alt":"widget"},"children":[],"position":{"start":{"line":370,"column":791,"offset":24007},"end":{"line":370,"column":1154,"offset":24370}}}],"position":{"start":{"line":370,"column":790,"offset":24006},"end":{"line":370,"column":1509,"offset":24725}}}],"position":{"start":{"line":370,"column":1,"offset":23217},"end":{"line":370,"column":1509,"offset":24725}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The solution to this problem is fairly simple: we use Indexing and deletion. Take a look","position":{"start":{"line":372,"column":1,"offset":24727},"end":{"line":372,"column":89,"offset":24815}}}],"position":{"start":{"line":372,"column":1,"offset":24727},"end":{"line":372,"column":89,"offset":24815}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"index.jsGraph.jsLinkedList.jsNode.js12345678910111213141516171819202122232425262728293031\"use strict\";const LinkedList = require('./LinkedList.js');const Node = require('./Node.js');module.exports = class Graph { constructor(vertices) { this.vertices = vertices; this.list = ","position":{"start":{"line":374,"column":1,"offset":24817},"end":{"line":374,"column":276,"offset":25092}}},{"type":"text","value":"[","position":{"start":{"line":374,"column":276,"offset":25092},"end":{"line":374,"column":278,"offset":25094}}},{"type":"text","value":"]; var it; for (it = 0; it < vertices; it++) { let temp = new LinkedList(); this.list.push(temp); } } addEdge(source, destination) { if (source < this.vertices && destination < this.vertices) this.list","position":{"start":{"line":374,"column":278,"offset":25094},"end":{"line":374,"column":479,"offset":25295}}},{"type":"text","value":"[","position":{"start":{"line":374,"column":479,"offset":25295},"end":{"line":374,"column":481,"offset":25297}}},{"type":"text","value":"source].insertAtHead(destination); return this; } printGraph() { console.log(\">>Adjacency List of Directed Graph<<\"); var i; for (i = 0; i < this.list.length; i++) { process.stdout.write(\"|\" + String(i) + \"| => \");Run","position":{"start":{"line":374,"column":481,"offset":25297},"end":{"line":374,"column":698,"offset":25514}}}],"position":{"start":{"line":374,"column":1,"offset":24817},"end":{"line":374,"column":698,"offset":25514}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Since our vertices are stored in an array, we can access the ","position":{"start":{"line":376,"column":1,"offset":25516},"end":{"line":376,"column":62,"offset":25577}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"source"}],"position":{"start":{"line":376,"column":62,"offset":25577},"end":{"line":376,"column":70,"offset":25585}}},{"type":"text","value":" linked list. We then call the ","position":{"start":{"line":376,"column":70,"offset":25585},"end":{"line":376,"column":101,"offset":25616}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"delete"}],"position":{"start":{"line":376,"column":101,"offset":25616},"end":{"line":376,"column":109,"offset":25624}}},{"type":"text","value":" function for linked lists. The time complexity for this solution is O(E) since we may have to traverse E edges.","position":{"start":{"line":376,"column":109,"offset":25624},"end":{"line":376,"column":221,"offset":25736}}}],"position":{"start":{"line":376,"column":1,"offset":25516},"end":{"line":376,"column":221,"offset":25736}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"\\","position":{"start":{"line":378,"column":1,"offset":25738},"end":{"line":378,"column":2,"offset":25739}}}],"position":{"start":{"line":378,"column":1,"offset":25738},"end":{"line":378,"column":2,"offset":25739}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h4","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"https://github.com/bgoonz/INTERVIEW-PREP-COMPLETE/blob/master/useful-downloads.md#hash-table-convert-max-heap-to-min-heap"},"children":[],"position":{"start":{"line":380,"column":6,"offset":25746},"end":{"line":380,"column":131,"offset":25871}}},{"type":"text","value":"Hash Table: Convert Max-Heap to Min-Heap","position":{"start":{"line":380,"column":131,"offset":25871},"end":{"line":380,"column":171,"offset":25911}}}],"position":{"start":{"line":380,"column":1,"offset":25741},"end":{"line":380,"column":171,"offset":25911}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Problem statement:","position":{"start":{"line":382,"column":3,"offset":25915},"end":{"line":382,"column":21,"offset":25933}}}],"position":{"start":{"line":382,"column":1,"offset":25913},"end":{"line":382,"column":23,"offset":25935}}},{"type":"text","value":" Implement the function ","position":{"start":{"line":382,"column":23,"offset":25935},"end":{"line":382,"column":47,"offset":25959}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"convertMax(maxHeap)"}],"position":{"start":{"line":382,"column":47,"offset":25959},"end":{"line":382,"column":68,"offset":25980}}},{"type":"text","value":" to convert a binary max-heap into a binary min-heap. ","position":{"start":{"line":382,"column":68,"offset":25980},"end":{"line":382,"column":122,"offset":26034}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maxHeap"}],"position":{"start":{"line":382,"column":122,"offset":26034},"end":{"line":382,"column":131,"offset":26043}}},{"type":"text","value":" should be an array in the ","position":{"start":{"line":382,"column":131,"offset":26043},"end":{"line":382,"column":158,"offset":26070}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maxHeap"}],"position":{"start":{"line":382,"column":158,"offset":26070},"end":{"line":382,"column":167,"offset":26079}}},{"type":"text","value":" format, i.e the parent is greater than its children.","position":{"start":{"line":382,"column":167,"offset":26079},"end":{"line":382,"column":220,"offset":26132}}}],"position":{"start":{"line":382,"column":1,"offset":25913},"end":{"line":382,"column":220,"offset":26132}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Input:","position":{"start":{"line":384,"column":3,"offset":26136},"end":{"line":384,"column":9,"offset":26142}}}],"position":{"start":{"line":384,"column":1,"offset":26134},"end":{"line":384,"column":11,"offset":26144}}},{"type":"text","value":" a Max-Heap","position":{"start":{"line":384,"column":11,"offset":26144},"end":{"line":384,"column":22,"offset":26155}}}],"position":{"start":{"line":384,"column":1,"offset":26134},"end":{"line":384,"column":22,"offset":26155}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":386,"column":1,"offset":26157},"end":{"line":388,"column":4,"offset":26165}}}],"position":{"start":{"line":386,"column":1,"offset":26157},"end":{"line":388,"column":4,"offset":26165}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Output:","position":{"start":{"line":390,"column":3,"offset":26169},"end":{"line":390,"column":10,"offset":26176}}}],"position":{"start":{"line":390,"column":1,"offset":26167},"end":{"line":390,"column":12,"offset":26178}}},{"type":"text","value":" returns the converted array","position":{"start":{"line":390,"column":12,"offset":26178},"end":{"line":390,"column":40,"offset":26206}}}],"position":{"start":{"line":390,"column":1,"offset":26167},"end":{"line":390,"column":40,"offset":26206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":""}],"position":{"start":{"line":392,"column":1,"offset":26208},"end":{"line":394,"column":4,"offset":26216}}}],"position":{"start":{"line":392,"column":1,"offset":26208},"end":{"line":394,"column":4,"offset":26216}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"To solve this problem, we must min heapify all parent nodes. Take a look.","position":{"start":{"line":396,"column":1,"offset":26218},"end":{"line":396,"column":74,"offset":26291}}}],"position":{"start":{"line":396,"column":1,"offset":26218},"end":{"line":396,"column":74,"offset":26291}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"123456789101112131415161718192021222324252627function minHeapify(heap, index) { var left = index ","position":{"start":{"line":398,"column":1,"offset":26293},"end":{"line":398,"column":98,"offset":26390}}},{"type":"text","value":"*","position":{"start":{"line":398,"column":98,"offset":26390},"end":{"line":398,"column":100,"offset":26392}}},{"type":"text","value":" 2; var right = (index ","position":{"start":{"line":398,"column":100,"offset":26392},"end":{"line":398,"column":123,"offset":26415}}},{"type":"text","value":"*","position":{"start":{"line":398,"column":123,"offset":26415},"end":{"line":398,"column":125,"offset":26417}}},{"type":"text","value":" 2) + 1; var smallest = index; if ((heap.length > left) && (heap","position":{"start":{"line":398,"column":125,"offset":26417},"end":{"line":398,"column":189,"offset":26481}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":189,"offset":26481},"end":{"line":398,"column":191,"offset":26483}}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":191,"offset":26483},"end":{"line":398,"column":207,"offset":26499}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":207,"offset":26499},"end":{"line":398,"column":209,"offset":26501}}},{"type":"text","value":"left])) { smallest = left } if ((heap.length > right) && (heap","position":{"start":{"line":398,"column":209,"offset":26501},"end":{"line":398,"column":271,"offset":26563}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":271,"offset":26563},"end":{"line":398,"column":273,"offset":26565}}},{"type":"text","value":"smallest] > heap","position":{"start":{"line":398,"column":273,"offset":26565},"end":{"line":398,"column":289,"offset":26581}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":289,"offset":26581},"end":{"line":398,"column":291,"offset":26583}}},{"type":"text","value":"right])) smallest = right if (smallest != index) { var tmp = heap","position":{"start":{"line":398,"column":291,"offset":26583},"end":{"line":398,"column":356,"offset":26648}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":356,"offset":26648},"end":{"line":398,"column":358,"offset":26650}}},{"type":"text","value":"smallest] heap","position":{"start":{"line":398,"column":358,"offset":26650},"end":{"line":398,"column":372,"offset":26664}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":372,"offset":26664},"end":{"line":398,"column":374,"offset":26666}}},{"type":"text","value":"smallest] = heap","position":{"start":{"line":398,"column":374,"offset":26666},"end":{"line":398,"column":390,"offset":26682}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":390,"offset":26682},"end":{"line":398,"column":392,"offset":26684}}},{"type":"text","value":"index] heap","position":{"start":{"line":398,"column":392,"offset":26684},"end":{"line":398,"column":403,"offset":26695}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":403,"offset":26695},"end":{"line":398,"column":405,"offset":26697}}},{"type":"text","value":"index] = tmp minHeapify(heap, smallest) } return heap;}function convertMax(maxHeap) { for (var i = Math.floor((maxHeap.length) / 2); i > -1; i--) maxHeap = minHeapify(maxHeap, i) return maxHeap}var maxHeap = ","position":{"start":{"line":398,"column":405,"offset":26697},"end":{"line":398,"column":613,"offset":26905}}},{"type":"text","value":"[","position":{"start":{"line":398,"column":613,"offset":26905},"end":{"line":398,"column":615,"offset":26907}}},{"type":"text","value":"9,4,7,1,-2,6,5]console.log(convertMax(maxHeap))Run","position":{"start":{"line":398,"column":615,"offset":26907},"end":{"line":398,"column":665,"offset":26957}}}],"position":{"start":{"line":398,"column":1,"offset":26293},"end":{"line":398,"column":665,"offset":26957}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"We consider ","position":{"start":{"line":400,"column":1,"offset":26959},"end":{"line":400,"column":13,"offset":26971}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"maxHeap"}],"position":{"start":{"line":400,"column":13,"offset":26971},"end":{"line":400,"column":22,"offset":26980}}},{"type":"text","value":" to be a regular array and reorder it to accurately represent a min-heap. You can see this done in the code above. The ","position":{"start":{"line":400,"column":22,"offset":26980},"end":{"line":400,"column":141,"offset":27099}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"convertMax()"}],"position":{"start":{"line":400,"column":141,"offset":27099},"end":{"line":400,"column":155,"offset":27113}}},{"type":"text","value":" function then restores the heap property on all nodes from the lowest parent node by calling the ","position":{"start":{"line":400,"column":155,"offset":27113},"end":{"line":400,"column":253,"offset":27211}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"minHeapify()"}],"position":{"start":{"line":400,"column":253,"offset":27211},"end":{"line":400,"column":267,"offset":27225}}},{"type":"text","value":" function. In regards to time complexity, this solution takes ","position":{"start":{"line":400,"column":267,"offset":27225},"end":{"line":400,"column":329,"offset":27287}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"O(nlog(n))O(nlog(n))","position":{"start":{"line":400,"column":330,"offset":27288},"end":{"line":400,"column":350,"offset":27308}}}],"position":{"start":{"line":400,"column":329,"offset":27287},"end":{"line":400,"column":351,"offset":27309}}},{"type":"text","value":" time.","position":{"start":{"line":400,"column":351,"offset":27309},"end":{"line":400,"column":357,"offset":27315}}}],"position":{"start":{"line":400,"column":1,"offset":26959},"end":{"line":400,"column":357,"offset":27315}}},{"type":"text","value":"\n"},{"type":"raw","value":"<!--EndFragment-->","position":{"start":{"line":402,"column":1,"offset":27317},"end":{"line":402,"column":19,"offset":27335}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":403,"column":1,"offset":27336}}}}