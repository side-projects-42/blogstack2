{"expireTime":9007200914465207000,"key":"transformer-remark-markdown-ast-d20f7470fbe684dbf406033b2102fb05--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Array.prototype.reduce()","position":{"start":{"line":3,"column":3,"offset":4},"end":{"line":3,"column":27,"offset":28},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":27,"offset":28},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1,"offset":30},"end":{"line":5,"column":5,"offset":34},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":5,"column":5,"offset":34},"end":{"line":5,"column":15,"offset":44},"indent":[]}},{"type":"text","value":" method executes a ","position":{"start":{"line":5,"column":15,"offset":44},"end":{"line":5,"column":34,"offset":63},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"reducer","position":{"start":{"line":5,"column":36,"offset":65},"end":{"line":5,"column":43,"offset":72},"indent":[]}}],"position":{"start":{"line":5,"column":34,"offset":63},"end":{"line":5,"column":45,"offset":74},"indent":[]}},{"type":"text","value":" function (that you provide) on each element of the array, resulting in a single output value.","position":{"start":{"line":5,"column":45,"offset":74},"end":{"line":5,"column":139,"offset":168},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":30},"end":{"line":5,"column":139,"offset":168},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":7,"column":1,"offset":170},"end":{"line":7,"column":5,"offset":174},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"reducer","position":{"start":{"line":7,"column":7,"offset":176},"end":{"line":7,"column":14,"offset":183},"indent":[]}}],"position":{"start":{"line":7,"column":5,"offset":174},"end":{"line":7,"column":16,"offset":185},"indent":[]}},{"type":"text","value":" function takes four arguments:","position":{"start":{"line":7,"column":16,"offset":185},"end":{"line":7,"column":47,"offset":216},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":170},"end":{"line":7,"column":47,"offset":216},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Accumulator","position":{"start":{"line":9,"column":5,"offset":222},"end":{"line":9,"column":16,"offset":233},"indent":[]}}],"position":{"start":{"line":9,"column":5,"offset":222},"end":{"line":9,"column":16,"offset":233},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":218},"end":{"line":9,"column":16,"offset":233},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Current Value","position":{"start":{"line":10,"column":5,"offset":238},"end":{"line":10,"column":18,"offset":251},"indent":[]}}],"position":{"start":{"line":10,"column":5,"offset":238},"end":{"line":10,"column":18,"offset":251},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":234},"end":{"line":10,"column":18,"offset":251},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Current Index","position":{"start":{"line":11,"column":5,"offset":256},"end":{"line":11,"column":18,"offset":269},"indent":[]}}],"position":{"start":{"line":11,"column":5,"offset":256},"end":{"line":11,"column":18,"offset":269},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":252},"end":{"line":11,"column":18,"offset":269},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Source Array","position":{"start":{"line":12,"column":5,"offset":274},"end":{"line":12,"column":17,"offset":286},"indent":[]}}],"position":{"start":{"line":12,"column":5,"offset":274},"end":{"line":12,"column":17,"offset":286},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":270},"end":{"line":12,"column":17,"offset":286},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":218},"end":{"line":12,"column":17,"offset":286},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Your ","position":{"start":{"line":14,"column":1,"offset":288},"end":{"line":14,"column":6,"offset":293},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"reducer","position":{"start":{"line":14,"column":8,"offset":295},"end":{"line":14,"column":15,"offset":302},"indent":[]}}],"position":{"start":{"line":14,"column":6,"offset":293},"end":{"line":14,"column":17,"offset":304},"indent":[]}},{"type":"text","value":" function's returned value is assigned to the accumulator, whose value is remembered across each iteration throughout the array, and ultimately becomes the final, single resulting value.","position":{"start":{"line":14,"column":17,"offset":304},"end":{"line":14,"column":203,"offset":490},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":288},"end":{"line":14,"column":203,"offset":490},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":16,"column":4,"offset":495},"end":{"line":16,"column":10,"offset":501},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":492},"end":{"line":16,"column":10,"offset":501},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Arrow function\nreduce((accumulator, currentValue) => { ... } )\nreduce((accumulator, currentValue, index) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... } )\nreduce((accumulator, currentValue, index, array) => { ... }, initialValue)\n\n// Reducer function\nreduce(reducerFn)\nreduce(reducerFn, initialValue)\n\n// Inline reducer function\nreduce(function reducerFn(accumulator, currentValue) { ... })\nreduce(function reducerFn(accumulator, currentValue, index) { ... })\nreduce(function reducerFn(accumulator, currentValue, index, array){ ... })\nreduce(function reducerFn(accumulator, currentValue, index, array) { ... }, initialValue)","position":{"start":{"line":18,"column":1,"offset":503},"end":{"line":32,"column":94,"offset":1207},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Parameters","position":{"start":{"line":34,"column":5,"offset":1213},"end":{"line":34,"column":15,"offset":1223},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":1209},"end":{"line":34,"column":15,"offset":1223},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"callback","position":{"start":{"line":36,"column":1,"offset":1225},"end":{"line":36,"column":11,"offset":1235},"indent":[]}},{"type":"text","value":"\nA function to execute on each element in the array (except for the first, if no ","position":{"start":{"line":36,"column":11,"offset":1235},"end":{"line":37,"column":81,"offset":1316},"indent":[1]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":37,"column":81,"offset":1316},"end":{"line":37,"column":95,"offset":1330},"indent":[]}},{"type":"text","value":" is supplied).","position":{"start":{"line":37,"column":95,"offset":1330},"end":{"line":37,"column":109,"offset":1344},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":1225},"end":{"line":37,"column":109,"offset":1344},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"It takes four arguments:","position":{"start":{"line":39,"column":1,"offset":1346},"end":{"line":39,"column":25,"offset":1370},"indent":[]}}],"position":{"start":{"line":39,"column":1,"offset":1346},"end":{"line":39,"column":25,"offset":1370},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"accumulator","position":{"start":{"line":41,"column":1,"offset":1372},"end":{"line":41,"column":14,"offset":1385},"indent":[]}},{"type":"text","value":"\nThe accumulator accumulates callback's return values. It is the accumulated value previously returned in the last invocation of the callbackâ€”or ","position":{"start":{"line":41,"column":14,"offset":1385},"end":{"line":42,"column":145,"offset":1530},"indent":[1]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":42,"column":145,"offset":1530},"end":{"line":42,"column":159,"offset":1544},"indent":[]}},{"type":"text","value":", if it was supplied (see below).","position":{"start":{"line":42,"column":159,"offset":1544},"end":{"line":42,"column":192,"offset":1577},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":1372},"end":{"line":42,"column":192,"offset":1577},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"currentValue","position":{"start":{"line":44,"column":1,"offset":1579},"end":{"line":44,"column":15,"offset":1593},"indent":[]}},{"type":"text","value":"\nThe current element being processed in the array.","position":{"start":{"line":44,"column":15,"offset":1593},"end":{"line":45,"column":50,"offset":1643},"indent":[1]}}],"position":{"start":{"line":44,"column":1,"offset":1579},"end":{"line":45,"column":50,"offset":1643},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"index","position":{"start":{"line":47,"column":1,"offset":1645},"end":{"line":47,"column":8,"offset":1652},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":47,"column":8,"offset":1652},"end":{"line":47,"column":9,"offset":1653},"indent":[]}},{"type":"html","value":"<span class=\"badge inline optional\">","position":{"start":{"line":47,"column":9,"offset":1653},"end":{"line":47,"column":45,"offset":1689},"indent":[]}},{"type":"text","value":"Optional","position":{"start":{"line":47,"column":45,"offset":1689},"end":{"line":47,"column":53,"offset":1697},"indent":[]}},{"type":"html","value":"</span>","position":{"start":{"line":47,"column":53,"offset":1697},"end":{"line":47,"column":60,"offset":1704},"indent":[]}},{"type":"text","value":"\nThe index of the current element being processed in the array. Starts from index ","position":{"start":{"line":47,"column":60,"offset":1704},"end":{"line":48,"column":82,"offset":1786},"indent":[1]}},{"type":"inlineCode","value":"0","position":{"start":{"line":48,"column":82,"offset":1786},"end":{"line":48,"column":85,"offset":1789},"indent":[]}},{"type":"text","value":" if an ","position":{"start":{"line":48,"column":85,"offset":1789},"end":{"line":48,"column":92,"offset":1796},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":48,"column":92,"offset":1796},"end":{"line":48,"column":106,"offset":1810},"indent":[]}},{"type":"text","value":" is provided. Otherwise, it starts from index ","position":{"start":{"line":48,"column":106,"offset":1810},"end":{"line":48,"column":152,"offset":1856},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":48,"column":152,"offset":1856},"end":{"line":48,"column":155,"offset":1859},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":48,"column":155,"offset":1859},"end":{"line":48,"column":156,"offset":1860},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":1645},"end":{"line":48,"column":156,"offset":1860},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"array","position":{"start":{"line":50,"column":1,"offset":1862},"end":{"line":50,"column":8,"offset":1869},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":50,"column":8,"offset":1869},"end":{"line":50,"column":9,"offset":1870},"indent":[]}},{"type":"html","value":"<span class=\"badge inline optional\">","position":{"start":{"line":50,"column":9,"offset":1870},"end":{"line":50,"column":45,"offset":1906},"indent":[]}},{"type":"text","value":"Optional","position":{"start":{"line":50,"column":45,"offset":1906},"end":{"line":50,"column":53,"offset":1914},"indent":[]}},{"type":"html","value":"</span>","position":{"start":{"line":50,"column":53,"offset":1914},"end":{"line":50,"column":60,"offset":1921},"indent":[]}},{"type":"text","value":"\nThe array ","position":{"start":{"line":50,"column":60,"offset":1921},"end":{"line":51,"column":11,"offset":1932},"indent":[1]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":51,"column":11,"offset":1932},"end":{"line":51,"column":21,"offset":1942},"indent":[]}},{"type":"text","value":" was called upon.","position":{"start":{"line":51,"column":21,"offset":1942},"end":{"line":51,"column":38,"offset":1959},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1862},"end":{"line":51,"column":38,"offset":1959},"indent":[1]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"initialValue","position":{"start":{"line":53,"column":1,"offset":1961},"end":{"line":53,"column":15,"offset":1975},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":53,"column":15,"offset":1975},"end":{"line":53,"column":16,"offset":1976},"indent":[]}},{"type":"html","value":"<span class=\"badge inline optional\">","position":{"start":{"line":53,"column":16,"offset":1976},"end":{"line":53,"column":52,"offset":2012},"indent":[]}},{"type":"text","value":"Optional","position":{"start":{"line":53,"column":52,"offset":2012},"end":{"line":53,"column":60,"offset":2020},"indent":[]}},{"type":"html","value":"</span>","position":{"start":{"line":53,"column":60,"offset":2020},"end":{"line":53,"column":67,"offset":2027},"indent":[]}},{"type":"text","value":"\nA value to use as the first argument to the first call of the ","position":{"start":{"line":53,"column":67,"offset":2027},"end":{"line":54,"column":63,"offset":2090},"indent":[1]}},{"type":"inlineCode","value":"callback","position":{"start":{"line":54,"column":63,"offset":2090},"end":{"line":54,"column":73,"offset":2100},"indent":[]}},{"type":"text","value":". If no ","position":{"start":{"line":54,"column":73,"offset":2100},"end":{"line":54,"column":81,"offset":2108},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":54,"column":81,"offset":2108},"end":{"line":54,"column":95,"offset":2122},"indent":[]}},{"type":"text","value":" is supplied, the first element in the array will be used as the initial ","position":{"start":{"line":54,"column":95,"offset":2122},"end":{"line":54,"column":168,"offset":2195},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":54,"column":168,"offset":2195},"end":{"line":54,"column":181,"offset":2208},"indent":[]}},{"type":"text","value":" value and skipped as ","position":{"start":{"line":54,"column":181,"offset":2208},"end":{"line":54,"column":203,"offset":2230},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":54,"column":203,"offset":2230},"end":{"line":54,"column":217,"offset":2244},"indent":[]}},{"type":"text","value":". Calling ","position":{"start":{"line":54,"column":217,"offset":2244},"end":{"line":54,"column":227,"offset":2254},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":54,"column":227,"offset":2254},"end":{"line":54,"column":237,"offset":2264},"indent":[]}},{"type":"text","value":" on an empty array without an ","position":{"start":{"line":54,"column":237,"offset":2264},"end":{"line":54,"column":267,"offset":2294},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":54,"column":267,"offset":2294},"end":{"line":54,"column":281,"offset":2308},"indent":[]}},{"type":"text","value":" will throw a ","position":{"start":{"line":54,"column":281,"offset":2308},"end":{"line":54,"column":295,"offset":2322},"indent":[]}},{"type":"link","title":null,"url":"../typeerror","children":[{"type":"inlineCode","value":"TypeError","position":{"start":{"line":54,"column":296,"offset":2323},"end":{"line":54,"column":307,"offset":2334},"indent":[]}}],"position":{"start":{"line":54,"column":295,"offset":2322},"end":{"line":54,"column":322,"offset":2349},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":54,"column":322,"offset":2349},"end":{"line":54,"column":323,"offset":2350},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1961},"end":{"line":54,"column":323,"offset":2350},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Return value","position":{"start":{"line":56,"column":5,"offset":2356},"end":{"line":56,"column":17,"offset":2368},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":2352},"end":{"line":56,"column":17,"offset":2368},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The single value that results from the reduction.","position":{"start":{"line":58,"column":1,"offset":2370},"end":{"line":58,"column":50,"offset":2419},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":2370},"end":{"line":58,"column":50,"offset":2419},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":60,"column":4,"offset":2424},"end":{"line":60,"column":15,"offset":2435},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":2421},"end":{"line":60,"column":15,"offset":2435},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":62,"column":1,"offset":2437},"end":{"line":62,"column":5,"offset":2441},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":62,"column":5,"offset":2441},"end":{"line":62,"column":15,"offset":2451},"indent":[]}},{"type":"text","value":" method executes the ","position":{"start":{"line":62,"column":15,"offset":2451},"end":{"line":62,"column":36,"offset":2472},"indent":[]}},{"type":"inlineCode","value":"callback","position":{"start":{"line":62,"column":36,"offset":2472},"end":{"line":62,"column":46,"offset":2482},"indent":[]}},{"type":"text","value":" once for each assigned value present in the array, taking four arguments:","position":{"start":{"line":62,"column":46,"offset":2482},"end":{"line":62,"column":120,"offset":2556},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":2437},"end":{"line":62,"column":120,"offset":2556},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"accumulator","position":{"start":{"line":64,"column":5,"offset":2562},"end":{"line":64,"column":18,"offset":2575},"indent":[]}}],"position":{"start":{"line":64,"column":5,"offset":2562},"end":{"line":64,"column":18,"offset":2575},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2558},"end":{"line":64,"column":18,"offset":2575},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"currentValue","position":{"start":{"line":65,"column":5,"offset":2580},"end":{"line":65,"column":19,"offset":2594},"indent":[]}}],"position":{"start":{"line":65,"column":5,"offset":2580},"end":{"line":65,"column":19,"offset":2594},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":2576},"end":{"line":65,"column":19,"offset":2594},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"currentIndex","position":{"start":{"line":66,"column":5,"offset":2599},"end":{"line":66,"column":19,"offset":2613},"indent":[]}}],"position":{"start":{"line":66,"column":5,"offset":2599},"end":{"line":66,"column":19,"offset":2613},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":2595},"end":{"line":66,"column":19,"offset":2613},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"inlineCode","value":"array","position":{"start":{"line":67,"column":5,"offset":2618},"end":{"line":67,"column":12,"offset":2625},"indent":[]}}],"position":{"start":{"line":67,"column":5,"offset":2618},"end":{"line":67,"column":12,"offset":2625},"indent":[]}}],"position":{"start":{"line":67,"column":1,"offset":2614},"end":{"line":67,"column":12,"offset":2625},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":2558},"end":{"line":67,"column":12,"offset":2625},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The first time the callback is called, ","position":{"start":{"line":69,"column":1,"offset":2627},"end":{"line":69,"column":40,"offset":2666},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":69,"column":40,"offset":2666},"end":{"line":69,"column":53,"offset":2679},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":69,"column":53,"offset":2679},"end":{"line":69,"column":58,"offset":2684},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":69,"column":58,"offset":2684},"end":{"line":69,"column":72,"offset":2698},"indent":[]}},{"type":"text","value":" can be one of two values. If ","position":{"start":{"line":69,"column":72,"offset":2698},"end":{"line":69,"column":102,"offset":2728},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":69,"column":102,"offset":2728},"end":{"line":69,"column":116,"offset":2742},"indent":[]}},{"type":"text","value":" is provided in the call to ","position":{"start":{"line":69,"column":116,"offset":2742},"end":{"line":69,"column":144,"offset":2770},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":69,"column":144,"offset":2770},"end":{"line":69,"column":154,"offset":2780},"indent":[]}},{"type":"text","value":", then ","position":{"start":{"line":69,"column":154,"offset":2780},"end":{"line":69,"column":161,"offset":2787},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":69,"column":161,"offset":2787},"end":{"line":69,"column":174,"offset":2800},"indent":[]}},{"type":"text","value":" will be equal to ","position":{"start":{"line":69,"column":174,"offset":2800},"end":{"line":69,"column":192,"offset":2818},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":69,"column":192,"offset":2818},"end":{"line":69,"column":206,"offset":2832},"indent":[]}},{"type":"text","value":", and ","position":{"start":{"line":69,"column":206,"offset":2832},"end":{"line":69,"column":212,"offset":2838},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":69,"column":212,"offset":2838},"end":{"line":69,"column":226,"offset":2852},"indent":[]}},{"type":"text","value":" will be equal to the first value in the array. If no ","position":{"start":{"line":69,"column":226,"offset":2852},"end":{"line":69,"column":280,"offset":2906},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":69,"column":280,"offset":2906},"end":{"line":69,"column":294,"offset":2920},"indent":[]}},{"type":"text","value":" is provided, then ","position":{"start":{"line":69,"column":294,"offset":2920},"end":{"line":69,"column":313,"offset":2939},"indent":[]}},{"type":"inlineCode","value":"accumulator","position":{"start":{"line":69,"column":313,"offset":2939},"end":{"line":69,"column":326,"offset":2952},"indent":[]}},{"type":"text","value":" will be equal to the first value in the array, and ","position":{"start":{"line":69,"column":326,"offset":2952},"end":{"line":69,"column":378,"offset":3004},"indent":[]}},{"type":"inlineCode","value":"currentValue","position":{"start":{"line":69,"column":378,"offset":3004},"end":{"line":69,"column":392,"offset":3018},"indent":[]}},{"type":"text","value":" will be equal to the second.","position":{"start":{"line":69,"column":392,"offset":3018},"end":{"line":69,"column":421,"offset":3047},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":2627},"end":{"line":69,"column":421,"offset":3047},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":71,"column":3,"offset":3051},"end":{"line":71,"column":8,"offset":3056},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":3049},"end":{"line":71,"column":10,"offset":3058},"indent":[]}},{"type":"text","value":" If ","position":{"start":{"line":71,"column":10,"offset":3058},"end":{"line":71,"column":14,"offset":3062},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":71,"column":14,"offset":3062},"end":{"line":71,"column":28,"offset":3076},"indent":[]}},{"type":"text","value":" is not provided, ","position":{"start":{"line":71,"column":28,"offset":3076},"end":{"line":71,"column":46,"offset":3094},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":71,"column":46,"offset":3094},"end":{"line":71,"column":56,"offset":3104},"indent":[]}},{"type":"text","value":" will execute the callback function starting at index ","position":{"start":{"line":71,"column":56,"offset":3104},"end":{"line":71,"column":110,"offset":3158},"indent":[]}},{"type":"inlineCode","value":"1","position":{"start":{"line":71,"column":110,"offset":3158},"end":{"line":71,"column":113,"offset":3161},"indent":[]}},{"type":"text","value":", skipping the first index. If ","position":{"start":{"line":71,"column":113,"offset":3161},"end":{"line":71,"column":144,"offset":3192},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":71,"column":144,"offset":3192},"end":{"line":71,"column":158,"offset":3206},"indent":[]}},{"type":"text","value":" is provided, it will start at index ","position":{"start":{"line":71,"column":158,"offset":3206},"end":{"line":71,"column":195,"offset":3243},"indent":[]}},{"type":"inlineCode","value":"0","position":{"start":{"line":71,"column":195,"offset":3243},"end":{"line":71,"column":198,"offset":3246},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":71,"column":198,"offset":3246},"end":{"line":71,"column":199,"offset":3247},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":3049},"end":{"line":71,"column":199,"offset":3247},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the array is empty and no ","position":{"start":{"line":73,"column":1,"offset":3249},"end":{"line":73,"column":30,"offset":3278},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":73,"column":30,"offset":3278},"end":{"line":73,"column":44,"offset":3292},"indent":[]}},{"type":"text","value":" is provided, ","position":{"start":{"line":73,"column":44,"offset":3292},"end":{"line":73,"column":58,"offset":3306},"indent":[]}},{"type":"link","title":null,"url":"../typeerror","children":[{"type":"inlineCode","value":"TypeError","position":{"start":{"line":73,"column":59,"offset":3307},"end":{"line":73,"column":70,"offset":3318},"indent":[]}}],"position":{"start":{"line":73,"column":58,"offset":3306},"end":{"line":73,"column":85,"offset":3333},"indent":[]}},{"type":"text","value":" will be thrown.","position":{"start":{"line":73,"column":85,"offset":3333},"end":{"line":73,"column":101,"offset":3349},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":3249},"end":{"line":73,"column":101,"offset":3349},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If the array only has one element (regardless of position) and no ","position":{"start":{"line":75,"column":1,"offset":3351},"end":{"line":75,"column":67,"offset":3417},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":75,"column":67,"offset":3417},"end":{"line":75,"column":81,"offset":3431},"indent":[]}},{"type":"text","value":" is provided, or if ","position":{"start":{"line":75,"column":81,"offset":3431},"end":{"line":75,"column":101,"offset":3451},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":75,"column":101,"offset":3451},"end":{"line":75,"column":115,"offset":3465},"indent":[]}},{"type":"text","value":" is provided but the array is empty, the solo value will be returned ","position":{"start":{"line":75,"column":115,"offset":3465},"end":{"line":75,"column":184,"offset":3534},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"without","position":{"start":{"line":75,"column":185,"offset":3535},"end":{"line":75,"column":192,"offset":3542},"indent":[]}}],"position":{"start":{"line":75,"column":184,"offset":3534},"end":{"line":75,"column":193,"offset":3543},"indent":[]}},{"type":"text","value":" calling ","position":{"start":{"line":75,"column":193,"offset":3543},"end":{"line":75,"column":202,"offset":3552},"indent":[]}},{"type":"emphasis","children":[{"type":"inlineCode","value":"callback","position":{"start":{"line":75,"column":203,"offset":3553},"end":{"line":75,"column":213,"offset":3563},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":75,"column":213,"offset":3563},"end":{"line":75,"column":214,"offset":3564},"indent":[]}}],"position":{"start":{"line":75,"column":202,"offset":3552},"end":{"line":75,"column":215,"offset":3565},"indent":[]}}],"position":{"start":{"line":75,"column":1,"offset":3351},"end":{"line":75,"column":215,"offset":3565},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"It is almost always safer to provide an ","position":{"start":{"line":77,"column":1,"offset":3567},"end":{"line":77,"column":41,"offset":3607},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":77,"column":41,"offset":3607},"end":{"line":77,"column":55,"offset":3621},"indent":[]}},{"type":"text","value":", because there can be up to ","position":{"start":{"line":77,"column":55,"offset":3621},"end":{"line":77,"column":84,"offset":3650},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"four","position":{"start":{"line":77,"column":85,"offset":3651},"end":{"line":77,"column":89,"offset":3655},"indent":[]}}],"position":{"start":{"line":77,"column":84,"offset":3650},"end":{"line":77,"column":90,"offset":3656},"indent":[]}},{"type":"text","value":" possible output types without ","position":{"start":{"line":77,"column":90,"offset":3656},"end":{"line":77,"column":121,"offset":3687},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":77,"column":121,"offset":3687},"end":{"line":77,"column":135,"offset":3701},"indent":[]}},{"type":"text","value":", as shown in the following example:","position":{"start":{"line":77,"column":135,"offset":3701},"end":{"line":77,"column":171,"offset":3737},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":3567},"end":{"line":77,"column":171,"offset":3737},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let maxCallback = ( acc, cur ) => Math.max( acc.x, cur.x );\nlet maxCallback2 = ( max, cur ) => Math.max( max, cur );\n\n// reduce without initialValue\n[ { x: 2 }, { x: 22 }, { x: 42 } ].reduce( maxCallback ); // NaN\n[ { x: 2 }, { x: 22 }            ].reduce( maxCallback ); // 22\n[ { x: 2 }                       ].reduce( maxCallback ); // { x: 2 }\n[                                ].reduce( maxCallback ); // TypeError\n\n// map & reduce with initialValue; better solution, also works for empty or larger arrays\n[ { x: 22 }, { x: 42 } ].map( el => el.x )\n                        .reduce( maxCallback2, -Infinity );","position":{"start":{"line":79,"column":1,"offset":3739},"end":{"line":90,"column":64,"offset":4391},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"How reduce() works","position":{"start":{"line":92,"column":5,"offset":4397},"end":{"line":92,"column":23,"offset":4415},"indent":[]}}],"position":{"start":{"line":92,"column":1,"offset":4393},"end":{"line":92,"column":23,"offset":4415},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Suppose the following use of ","position":{"start":{"line":94,"column":1,"offset":4417},"end":{"line":94,"column":30,"offset":4446},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":94,"column":30,"offset":4446},"end":{"line":94,"column":40,"offset":4456},"indent":[]}},{"type":"text","value":" occurred:","position":{"start":{"line":94,"column":40,"offset":4456},"end":{"line":94,"column":50,"offset":4466},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":4417},"end":{"line":94,"column":50,"offset":4466},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {\n  return accumulator + currentValue\n})","position":{"start":{"line":96,"column":1,"offset":4468},"end":{"line":98,"column":7,"offset":4600},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The callback would be invoked four times, with the arguments and return values in each call being as follows:","position":{"start":{"line":100,"column":1,"offset":4602},"end":{"line":100,"column":110,"offset":4711},"indent":[]}}],"position":{"start":{"line":100,"column":1,"offset":4602},"end":{"line":100,"column":110,"offset":4711},"indent":[]}},{"type":"html","value":"<table>\n<thead>\n<tr class=\"header\">\n<th>\n<code>callback</code> iteration</th>\n<th>\n<code>accumulator</code>\n</th>\n<th>\n<code>currentValue</code>\n</th>\n<th>\n<code>currentIndex</code>\n</th>\n<th>\n<code>array</code>\n</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>first call</td>\n<td>\n<code>0</code>\n</td>\n<td>\n<code>1</code>\n</td>\n<td>\n<code>1</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>1</code>\n</td>\n</tr>\n<tr class=\"even\">\n<td>second call</td>\n<td>\n<code>1</code>\n</td>\n<td>\n<code>2</code>\n</td>\n<td>\n<code>2</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>3</code>\n</td>\n</tr>\n<tr class=\"odd\">\n<td>third call</td>\n<td>\n<code>3</code>\n</td>\n<td>\n<code>3</code>\n</td>\n<td>\n<code>3</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>6</code>\n</td>\n</tr>\n<tr class=\"even\">\n<td>fourth call</td>\n<td>\n<code>6</code>\n</td>\n<td>\n<code>4</code>\n</td>\n<td>\n<code>4</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>10</code>\n</td>\n</tr>\n</tbody>\n</table>","position":{"start":{"line":102,"column":1,"offset":4713},"end":{"line":196,"column":9,"offset":5746},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":198,"column":1,"offset":5748},"end":{"line":198,"column":23,"offset":5770},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":198,"column":23,"offset":5770},"end":{"line":198,"column":33,"offset":5780},"indent":[]}},{"type":"text","value":" would be that of the last callback invocation (","position":{"start":{"line":198,"column":33,"offset":5780},"end":{"line":198,"column":81,"offset":5828},"indent":[]}},{"type":"inlineCode","value":"10","position":{"start":{"line":198,"column":81,"offset":5828},"end":{"line":198,"column":85,"offset":5832},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":198,"column":85,"offset":5832},"end":{"line":198,"column":87,"offset":5834},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":5748},"end":{"line":198,"column":87,"offset":5834},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You can also provide an ","position":{"start":{"line":200,"column":1,"offset":5836},"end":{"line":200,"column":25,"offset":5860},"indent":[]}},{"type":"link","title":null,"url":"../../functions/arrow_functions","children":[{"type":"text","value":"Arrow Function","position":{"start":{"line":200,"column":26,"offset":5861},"end":{"line":200,"column":40,"offset":5875},"indent":[]}}],"position":{"start":{"line":200,"column":25,"offset":5860},"end":{"line":200,"column":74,"offset":5909},"indent":[]}},{"type":"text","value":" instead of a full function. The code below will produce the same output as the code in the block above:","position":{"start":{"line":200,"column":74,"offset":5909},"end":{"line":200,"column":178,"offset":6013},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":5836},"end":{"line":200,"column":178,"offset":6013},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"[0, 1, 2, 3, 4].reduce( (accumulator, currentValue, currentIndex, array) => accumulator + currentValue )","position":{"start":{"line":202,"column":1,"offset":6015},"end":{"line":202,"column":109,"offset":6123},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If you were to provide an ","position":{"start":{"line":204,"column":1,"offset":6125},"end":{"line":204,"column":27,"offset":6151},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":204,"column":27,"offset":6151},"end":{"line":204,"column":41,"offset":6165},"indent":[]}},{"type":"text","value":" as the second argument to ","position":{"start":{"line":204,"column":41,"offset":6165},"end":{"line":204,"column":68,"offset":6192},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":204,"column":68,"offset":6192},"end":{"line":204,"column":78,"offset":6202},"indent":[]}},{"type":"text","value":", the result would look like this:","position":{"start":{"line":204,"column":78,"offset":6202},"end":{"line":204,"column":112,"offset":6236},"indent":[]}}],"position":{"start":{"line":204,"column":1,"offset":6125},"end":{"line":204,"column":112,"offset":6236},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"[0, 1, 2, 3, 4].reduce((accumulator, currentValue, currentIndex, array) => {\n    return accumulator + currentValue\n}, 10)","position":{"start":{"line":206,"column":1,"offset":6238},"end":{"line":208,"column":11,"offset":6371},"indent":[1,1]}},{"type":"html","value":"<table>\n<thead>\n<tr class=\"header\">\n<th>\n<code>callback</code> iteration</th>\n<th>\n<code>accumulator</code>\n</th>\n<th>\n<code>currentValue</code>\n</th>\n<th>\n<code>currentIndex</code>\n</th>\n<th>\n<code>array</code>\n</th>\n<th>return value</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>first call</td>\n<td>\n<code>10</code>\n</td>\n<td>\n<code>0</code>\n</td>\n<td>\n<code>0</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>10</code>\n</td>\n</tr>\n<tr class=\"even\">\n<td>second call</td>\n<td>\n<code>10</code>\n</td>\n<td>\n<code>1</code>\n</td>\n<td>\n<code>1</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>11</code>\n</td>\n</tr>\n<tr class=\"odd\">\n<td>third call</td>\n<td>\n<code>11</code>\n</td>\n<td>\n<code>2</code>\n</td>\n<td>\n<code>2</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>13</code>\n</td>\n</tr>\n<tr class=\"even\">\n<td>fourth call</td>\n<td>\n<code>13</code>\n</td>\n<td>\n<code>3</code>\n</td>\n<td>\n<code>3</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>16</code>\n</td>\n</tr>\n<tr class=\"odd\">\n<td>fifth call</td>\n<td>\n<code>16</code>\n</td>\n<td>\n<code>4</code>\n</td>\n<td>\n<code>4</code>\n</td>\n<td>\n<code>[0, 1, 2, 3, 4]</code>\n</td>\n<td>\n<code>20</code>\n</td>\n</tr>\n</tbody>\n</table>","position":{"start":{"line":210,"column":1,"offset":6373},"end":{"line":322,"column":9,"offset":7602},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"The value returned by ","position":{"start":{"line":324,"column":1,"offset":7604},"end":{"line":324,"column":23,"offset":7626},"indent":[]}},{"type":"inlineCode","value":"reduce()","position":{"start":{"line":324,"column":23,"offset":7626},"end":{"line":324,"column":33,"offset":7636},"indent":[]}},{"type":"text","value":" in this case would be ","position":{"start":{"line":324,"column":33,"offset":7636},"end":{"line":324,"column":56,"offset":7659},"indent":[]}},{"type":"inlineCode","value":"20","position":{"start":{"line":324,"column":56,"offset":7659},"end":{"line":324,"column":60,"offset":7663},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":324,"column":60,"offset":7663},"end":{"line":324,"column":61,"offset":7664},"indent":[]}}],"position":{"start":{"line":324,"column":1,"offset":7604},"end":{"line":324,"column":61,"offset":7664},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Polyfill","position":{"start":{"line":326,"column":4,"offset":7669},"end":{"line":326,"column":12,"offset":7677},"indent":[]}}],"position":{"start":{"line":326,"column":1,"offset":7666},"end":{"line":326,"column":12,"offset":7677},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Production steps of ECMA-262, Edition 5, 15.4.4.21\n// Reference: https://es5.github.io/#x15.4.4.21\n// https://tc39.github.io/ecma262/#sec-array.prototype.reduce\nif (!Array.prototype.reduce) {\n  Object.defineProperty(Array.prototype, 'reduce', {\n    value: function(callback /*, initialValue*/) {\n      if (this === null) {\n        throw new TypeError( 'Array.prototype.reduce ' +\n          'called on null or undefined' );\n      }\n      if (typeof callback !== 'function') {\n        throw new TypeError( callback +\n          ' is not a function');\n      }\n\n      // 1. Let O be ? ToObject(this value).\n      var o = Object(this);\n\n      // 2. Let len be ? ToLength(? Get(O, \"length\")).\n      var len = o.length >>> 0;\n\n      // Steps 3, 4, 5, 6, 7\n      var k = 0;\n      var value;\n\n      if (arguments.length >= 2) {\n        value = arguments[1];\n      } else {\n        while (k < len && !(k in o)) {\n          k++;\n        }\n\n        // 3. If len is 0 and initialValue is not present,\n        //    throw a TypeError exception.\n        if (k >= len) {\n          throw new TypeError( 'Reduce of empty array ' +\n            'with no initial value' );\n        }\n        value = o[k++];\n      }\n\n      // 8. Repeat, while k < len\n      while (k < len) {\n        // a. Let Pk be ! ToString(k).\n        // b. Let kPresent be ? HasProperty(O, Pk).\n        // c. If kPresent is true, then\n        //    i.  Let kValue be ? Get(O, Pk).\n        //    ii. Let accumulator be ? Call(\n        //          callbackfn, undefined,\n        //          Â« accumulator, kValue, k, O Â»).\n        if (k in o) {\n          value = callback(value, o[k], k, o);\n        }\n\n        // d. Increase k by 1.\n        k++;\n      }\n\n      // 9. Return accumulator.\n      return value;\n    }\n  });\n}","position":{"start":{"line":328,"column":1,"offset":7679},"end":{"line":390,"column":6,"offset":9669},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":392,"column":3,"offset":9673},"end":{"line":392,"column":8,"offset":9678},"indent":[]}}],"position":{"start":{"line":392,"column":1,"offset":9671},"end":{"line":392,"column":10,"offset":9680},"indent":[]}},{"type":"text","value":" If you need to support truly obsolete JavaScript engines that do not support ","position":{"start":{"line":392,"column":10,"offset":9680},"end":{"line":392,"column":88,"offset":9758},"indent":[]}},{"type":"link","title":null,"url":"../object/defineproperty","children":[{"type":"inlineCode","value":"Object.defineProperty()","position":{"start":{"line":392,"column":89,"offset":9759},"end":{"line":392,"column":114,"offset":9784},"indent":[]}}],"position":{"start":{"line":392,"column":88,"offset":9758},"end":{"line":392,"column":141,"offset":9811},"indent":[]}},{"type":"text","value":", it is best not to polyfill ","position":{"start":{"line":392,"column":141,"offset":9811},"end":{"line":392,"column":170,"offset":9840},"indent":[]}},{"type":"inlineCode","value":"Array.prototype","position":{"start":{"line":392,"column":170,"offset":9840},"end":{"line":392,"column":187,"offset":9857},"indent":[]}},{"type":"text","value":" methods at all, as you cannot make them ","position":{"start":{"line":392,"column":187,"offset":9857},"end":{"line":392,"column":228,"offset":9898},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"non-enumerable","position":{"start":{"line":392,"column":230,"offset":9900},"end":{"line":392,"column":244,"offset":9914},"indent":[]}}],"position":{"start":{"line":392,"column":228,"offset":9898},"end":{"line":392,"column":246,"offset":9916},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":392,"column":246,"offset":9916},"end":{"line":392,"column":247,"offset":9917},"indent":[]}}],"position":{"start":{"line":392,"column":1,"offset":9671},"end":{"line":392,"column":247,"offset":9917},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":394,"column":4,"offset":9922},"end":{"line":394,"column":12,"offset":9930},"indent":[]}}],"position":{"start":{"line":394,"column":1,"offset":9919},"end":{"line":394,"column":12,"offset":9930},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sum all the values of an array","position":{"start":{"line":396,"column":5,"offset":9936},"end":{"line":396,"column":35,"offset":9966},"indent":[]}}],"position":{"start":{"line":396,"column":1,"offset":9932},"end":{"line":396,"column":35,"offset":9966},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let sum = [0, 1, 2, 3].reduce(function (accumulator, currentValue) {\n  return accumulator + currentValue\n}, 0)\n// sum is 6","position":{"start":{"line":398,"column":1,"offset":9968},"end":{"line":401,"column":16,"offset":10106},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":403,"column":1,"offset":10108},"end":{"line":403,"column":46,"offset":10153},"indent":[]}}],"position":{"start":{"line":403,"column":1,"offset":10108},"end":{"line":403,"column":46,"offset":10153},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let total = [ 0, 1, 2, 3 ].reduce(\n  ( accumulator, currentValue ) => accumulator + currentValue,\n  0\n)","position":{"start":{"line":405,"column":1,"offset":10155},"end":{"line":408,"column":6,"offset":10274},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sum of values in an object array","position":{"start":{"line":410,"column":5,"offset":10280},"end":{"line":410,"column":37,"offset":10312},"indent":[]}}],"position":{"start":{"line":410,"column":1,"offset":10276},"end":{"line":410,"column":37,"offset":10312},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To sum up the values contained in an array of objects, you ","position":{"start":{"line":412,"column":1,"offset":10314},"end":{"line":412,"column":60,"offset":10373},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"must","position":{"start":{"line":412,"column":62,"offset":10375},"end":{"line":412,"column":66,"offset":10379},"indent":[]}}],"position":{"start":{"line":412,"column":60,"offset":10373},"end":{"line":412,"column":68,"offset":10381},"indent":[]}},{"type":"text","value":" supply an ","position":{"start":{"line":412,"column":68,"offset":10381},"end":{"line":412,"column":79,"offset":10392},"indent":[]}},{"type":"inlineCode","value":"initialValue","position":{"start":{"line":412,"column":79,"offset":10392},"end":{"line":412,"column":93,"offset":10406},"indent":[]}},{"type":"text","value":", so that each item passes through your function.","position":{"start":{"line":412,"column":93,"offset":10406},"end":{"line":412,"column":142,"offset":10455},"indent":[]}}],"position":{"start":{"line":412,"column":1,"offset":10314},"end":{"line":412,"column":142,"offset":10455},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(function (accumulator, currentValue) {\n    return accumulator + currentValue.x\n}, initialValue)\n\nconsole.log(sum) // logs 6","position":{"start":{"line":414,"column":1,"offset":10457},"end":{"line":419,"column":31,"offset":10663},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":421,"column":1,"offset":10665},"end":{"line":421,"column":46,"offset":10710},"indent":[]}}],"position":{"start":{"line":421,"column":1,"offset":10665},"end":{"line":421,"column":46,"offset":10710},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let initialValue = 0\nlet sum = [{x: 1}, {x: 2}, {x: 3}].reduce(\n    (accumulator, currentValue) => accumulator + currentValue.x\n    , initialValue\n)\n\nconsole.log(sum) // logs 6","position":{"start":{"line":423,"column":1,"offset":10712},"end":{"line":429,"column":31,"offset":10912},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Flatten an array of arrays","position":{"start":{"line":431,"column":5,"offset":10918},"end":{"line":431,"column":31,"offset":10944},"indent":[]}}],"position":{"start":{"line":431,"column":1,"offset":10914},"end":{"line":431,"column":31,"offset":10944},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  function(accumulator, currentValue) {\n    return accumulator.concat(currentValue)\n  },\n  []\n)\n// flattened is [0, 1, 2, 3, 4, 5]","position":{"start":{"line":433,"column":1,"offset":10946},"end":{"line":439,"column":39,"offset":11153},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Alternatively written with an arrow function:","position":{"start":{"line":441,"column":1,"offset":11155},"end":{"line":441,"column":46,"offset":11200},"indent":[]}}],"position":{"start":{"line":441,"column":1,"offset":11155},"end":{"line":441,"column":46,"offset":11200},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let flattened = [[0, 1], [2, 3], [4, 5]].reduce(\n  ( accumulator, currentValue ) => accumulator.concat(currentValue),\n  []\n)","position":{"start":{"line":443,"column":1,"offset":11202},"end":{"line":446,"column":6,"offset":11342},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Counting instances of values in an object","position":{"start":{"line":448,"column":5,"offset":11348},"end":{"line":448,"column":46,"offset":11389},"indent":[]}}],"position":{"start":{"line":448,"column":1,"offset":11344},"end":{"line":448,"column":46,"offset":11389},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let names = ['Alice', 'Bob', 'Tiff', 'Bruce', 'Alice']\n\nlet countedNames = names.reduce(function (allNames, name) {\n  if (name in allNames) {\n    allNames[name]++\n  }\n  else {\n    allNames[name] = 1\n  }\n  return allNames\n}, {})\n// countedNames is:\n// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }","position":{"start":{"line":450,"column":1,"offset":11391},"end":{"line":462,"column":55,"offset":11737},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Grouping objects by a property","position":{"start":{"line":464,"column":5,"offset":11743},"end":{"line":464,"column":35,"offset":11773},"indent":[]}}],"position":{"start":{"line":464,"column":1,"offset":11739},"end":{"line":464,"column":35,"offset":11773},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let people = [\n  { name: 'Alice', age: 21 },\n  { name: 'Max', age: 20 },\n  { name: 'Jane', age: 20 }\n];\n\nfunction groupBy(objectArray, property) {\n  return objectArray.reduce(function (acc, obj) {\n    let key = obj[property]\n    if (!acc[key]) {\n      acc[key] = []\n    }\n    acc[key].push(obj)\n    return acc\n  }, {})\n}\n\nlet groupedPeople = groupBy(people, 'age')\n// groupedPeople is:\n// {\n//   20: [\n//     { name: 'Max', age: 20 },\n//     { name: 'Jane', age: 20 }\n//   ],\n//   21: [{ name: 'Alice', age: 21 }]\n// }","position":{"start":{"line":466,"column":1,"offset":11775},"end":{"line":491,"column":9,"offset":12389},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Bonding arrays contained in an array of objects using the spread operator and initialValue","position":{"start":{"line":493,"column":5,"offset":12395},"end":{"line":493,"column":95,"offset":12485},"indent":[]}}],"position":{"start":{"line":493,"column":1,"offset":12391},"end":{"line":493,"column":95,"offset":12485},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// friends - an array of objects\n// where object field \"books\" is a list of favorite books\nlet friends = [{\n  name: 'Anna',\n  books: ['Bible', 'Harry Potter'],\n  age: 21\n}, {\n  name: 'Bob',\n  books: ['War and peace', 'Romeo and Juliet'],\n  age: 26\n}, {\n  name: 'Alice',\n  books: ['The Lord of the Rings', 'The Shining'],\n  age: 18\n}]\n\n// allbooks - list which will contain all friends' books +\n// additional list contained in initialValue\nlet allbooks = friends.reduce(function(accumulator, currentValue) {\n  return [...accumulator, ...currentValue.books]\n}, ['Alphabet'])\n\n// allbooks = [\n//   'Alphabet', 'Bible', 'Harry Potter', 'War and peace',\n//   'Romeo and Juliet', 'The Lord of the Rings',\n//   'The Shining'\n// ]","position":{"start":{"line":495,"column":1,"offset":12487},"end":{"line":521,"column":9,"offset":13309},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Remove duplicate items in an array","position":{"start":{"line":523,"column":5,"offset":13315},"end":{"line":523,"column":39,"offset":13349},"indent":[]}}],"position":{"start":{"line":523,"column":1,"offset":13311},"end":{"line":523,"column":39,"offset":13349},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":525,"column":3,"offset":13353},"end":{"line":525,"column":8,"offset":13358},"indent":[]}}],"position":{"start":{"line":525,"column":1,"offset":13351},"end":{"line":525,"column":10,"offset":13360},"indent":[]}},{"type":"text","value":" If you are using an environment compatible with ","position":{"start":{"line":525,"column":10,"offset":13360},"end":{"line":525,"column":59,"offset":13409},"indent":[]}},{"type":"link","title":null,"url":"../set","children":[{"type":"inlineCode","value":"Set","position":{"start":{"line":525,"column":60,"offset":13410},"end":{"line":525,"column":65,"offset":13415},"indent":[]}}],"position":{"start":{"line":525,"column":59,"offset":13409},"end":{"line":525,"column":74,"offset":13424},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":525,"column":74,"offset":13424},"end":{"line":525,"column":79,"offset":13429},"indent":[]}},{"type":"link","title":null,"url":"from","children":[{"type":"inlineCode","value":"Array.from()","position":{"start":{"line":525,"column":80,"offset":13430},"end":{"line":525,"column":94,"offset":13444},"indent":[]}}],"position":{"start":{"line":525,"column":79,"offset":13429},"end":{"line":525,"column":101,"offset":13451},"indent":[]}},{"type":"text","value":", you could use ","position":{"start":{"line":525,"column":101,"offset":13451},"end":{"line":525,"column":117,"offset":13467},"indent":[]}},{"type":"inlineCode","value":"let orderedArray = Array.from(new Set(myArray))","position":{"start":{"line":525,"column":117,"offset":13467},"end":{"line":525,"column":166,"offset":13516},"indent":[]}},{"type":"text","value":" to get an array where duplicate items have been removed.","position":{"start":{"line":525,"column":166,"offset":13516},"end":{"line":525,"column":223,"offset":13573},"indent":[]}}],"position":{"start":{"line":525,"column":1,"offset":13351},"end":{"line":525,"column":223,"offset":13573},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"let myArray = ['a', 'b', 'a', 'b', 'c', 'e', 'e', 'c', 'd', 'd', 'd', 'd']\nlet myOrderedArray = myArray.reduce(function (accumulator, currentValue) {\n  if (accumulator.indexOf(currentValue) === -1) {\n    accumulator.push(currentValue)\n  }\n  return accumulator\n}, [])\n\nconsole.log(myOrderedArray)","position":{"start":{"line":527,"column":1,"offset":13575},"end":{"line":535,"column":32,"offset":13902},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Replace .filter().map() with .reduce()","position":{"start":{"line":537,"column":5,"offset":13908},"end":{"line":537,"column":43,"offset":13946},"indent":[]}}],"position":{"start":{"line":537,"column":1,"offset":13904},"end":{"line":537,"column":43,"offset":13946},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Using ","position":{"start":{"line":539,"column":1,"offset":13948},"end":{"line":539,"column":7,"offset":13954},"indent":[]}},{"type":"link","title":null,"url":"filter","children":[{"type":"inlineCode","value":"Array.filter()","position":{"start":{"line":539,"column":8,"offset":13955},"end":{"line":539,"column":24,"offset":13971},"indent":[]}}],"position":{"start":{"line":539,"column":7,"offset":13954},"end":{"line":539,"column":33,"offset":13980},"indent":[]}},{"type":"text","value":" then ","position":{"start":{"line":539,"column":33,"offset":13980},"end":{"line":539,"column":39,"offset":13986},"indent":[]}},{"type":"link","title":null,"url":"map","children":[{"type":"inlineCode","value":"Array.map()","position":{"start":{"line":539,"column":40,"offset":13987},"end":{"line":539,"column":53,"offset":14000},"indent":[]}}],"position":{"start":{"line":539,"column":39,"offset":13986},"end":{"line":539,"column":59,"offset":14006},"indent":[]}},{"type":"text","value":" traverses the array twice, but you can achieve the same effect while traversing only once with ","position":{"start":{"line":539,"column":59,"offset":14006},"end":{"line":539,"column":155,"offset":14102},"indent":[]}},{"type":"link","title":null,"url":"reduce","children":[{"type":"inlineCode","value":"Array.reduce()","position":{"start":{"line":539,"column":156,"offset":14103},"end":{"line":539,"column":172,"offset":14119},"indent":[]}}],"position":{"start":{"line":539,"column":155,"offset":14102},"end":{"line":539,"column":181,"offset":14128},"indent":[]}},{"type":"text","value":", thereby being more efficient. (If you like for loops, you can filter and map while traversing once with ","position":{"start":{"line":539,"column":181,"offset":14128},"end":{"line":539,"column":287,"offset":14234},"indent":[]}},{"type":"link","title":null,"url":"foreach","children":[{"type":"inlineCode","value":"Array.forEach()","position":{"start":{"line":539,"column":288,"offset":14235},"end":{"line":539,"column":305,"offset":14252},"indent":[]}}],"position":{"start":{"line":539,"column":287,"offset":14234},"end":{"line":539,"column":315,"offset":14262},"indent":[]}},{"type":"text","value":").","position":{"start":{"line":539,"column":315,"offset":14262},"end":{"line":539,"column":317,"offset":14264},"indent":[]}}],"position":{"start":{"line":539,"column":1,"offset":13948},"end":{"line":539,"column":317,"offset":14264},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const numbers = [-5, 6, 2, 0,];\n\nconst doubledPositiveNumbers = numbers.reduce((accumulator, currentValue) => {\n  if (currentValue > 0) {\n    const doubled = currentValue * 2;\n    accumulator.push(doubled);\n  }\n  return accumulator;\n}, []);\n\nconsole.log(doubledPositiveNumbers); // [12, 4]","position":{"start":{"line":541,"column":1,"offset":14266},"end":{"line":551,"column":52,"offset":14591},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Running Promises in Sequence","position":{"start":{"line":553,"column":5,"offset":14597},"end":{"line":553,"column":33,"offset":14625},"indent":[]}}],"position":{"start":{"line":553,"column":1,"offset":14593},"end":{"line":553,"column":33,"offset":14625},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"/**\n * Runs promises from array of functions that can return promises\n * in chained manner\n *\n * @param {array} arr - promise arr\n * @return {Object} promise object\n */\nfunction runPromiseInSequence(arr, input) {\n  return arr.reduce(\n    (promiseChain, currentFunction) => promiseChain.then(currentFunction),\n    Promise.resolve(input)\n  )\n}\n\n// promise function 1\nfunction p1(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 5)\n  })\n}\n\n// promise function 2\nfunction p2(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 2)\n  })\n}\n\n// function 3  - will be wrapped in a resolved promise by .then()\nfunction f3(a) {\n return a * 3\n}\n\n// promise function 4\nfunction p4(a) {\n  return new Promise((resolve, reject) => {\n    resolve(a * 4)\n  })\n}\n\nconst promiseArr = [p1, p2, f3, p4]\nrunPromiseInSequence(promiseArr, 10)\n  .then(console.log)   // 1200","position":{"start":{"line":555,"column":1,"offset":14627},"end":{"line":597,"column":35,"offset":15655},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Function composition enabling piping","position":{"start":{"line":599,"column":5,"offset":15661},"end":{"line":599,"column":41,"offset":15697},"indent":[]}}],"position":{"start":{"line":599,"column":1,"offset":15657},"end":{"line":599,"column":41,"offset":15697},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Building-blocks to use for composition\nconst double = x => x + x\nconst triple = x => 3 * x\nconst quadruple = x => 4 * x\n\n// Function composition enabling pipe functionality\nconst pipe = (...functions) => input => functions.reduce(\n    (acc, fn) => fn(acc),\n    input\n)\n\n// Composed functions for multiplication of specific values\nconst multiply6 = pipe(double, triple)\nconst multiply9 = pipe(triple, triple)\nconst multiply16 = pipe(quadruple, quadruple)\nconst multiply24 = pipe(double, triple, quadruple)\n\n// Usage\nmultiply6(6)   // 36\nmultiply9(9)   // 81\nmultiply16(16) // 256\nmultiply24(10) // 240","position":{"start":{"line":601,"column":1,"offset":15699},"end":{"line":622,"column":26,"offset":16378},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Write map using reduce","position":{"start":{"line":624,"column":5,"offset":16384},"end":{"line":624,"column":27,"offset":16406},"indent":[]}}],"position":{"start":{"line":624,"column":1,"offset":16380},"end":{"line":624,"column":27,"offset":16406},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"if (!Array.prototype.mapUsingReduce) {\n  Array.prototype.mapUsingReduce = function(callback, initialValue) {\n    return this.reduce(function(mappedArray, currentValue, index, array) {\n      mappedArray[index] = callback.call(initialValue, currentValue, index, array)\n      return mappedArray\n    }, [])\n  }\n}\n\n[1, 2, , 3].mapUsingReduce(\n  (currentValue, index, array) => currentValue + index + array.length\n) // [5, 7, , 10]","position":{"start":{"line":626,"column":1,"offset":16408},"end":{"line":637,"column":22,"offset":16877},"indent":[1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":638,"column":1,"offset":16878}}}}