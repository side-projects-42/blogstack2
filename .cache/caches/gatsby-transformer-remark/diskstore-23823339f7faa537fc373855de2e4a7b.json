{"expireTime":9007200914465207000,"key":"transformer-remark-markdown-ast-e57edd41c98389c6994d894f0f93ee48--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Promise.any()","position":{"start":{"line":3,"column":3,"offset":4},"end":{"line":3,"column":16,"offset":17},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":16,"offset":17},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":5,"column":1,"offset":19},"end":{"line":5,"column":16,"offset":34},"indent":[]}},{"type":"text","value":" takes an iterable of ","position":{"start":{"line":5,"column":16,"offset":34},"end":{"line":5,"column":38,"offset":56},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":5,"column":39,"offset":57},"end":{"line":5,"column":48,"offset":66},"indent":[]}}],"position":{"start":{"line":5,"column":38,"offset":56},"end":{"line":5,"column":61,"offset":79},"indent":[]}},{"type":"text","value":" objects and, as soon as one of the promises in the iterable fulfills, returns a single promise that resolves with the value from that promise. If no promises in the iterable fulfill (if all of the given promises are rejected), then the returned promise is rejected with an ","position":{"start":{"line":5,"column":61,"offset":79},"end":{"line":5,"column":335,"offset":353},"indent":[]}},{"type":"link","title":null,"url":"../aggregateerror","children":[{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":5,"column":336,"offset":354},"end":{"line":5,"column":352,"offset":370},"indent":[]}}],"position":{"start":{"line":5,"column":335,"offset":353},"end":{"line":5,"column":372,"offset":390},"indent":[]}},{"type":"text","value":", a new subclass of ","position":{"start":{"line":5,"column":372,"offset":390},"end":{"line":5,"column":392,"offset":410},"indent":[]}},{"type":"link","title":null,"url":"../error","children":[{"type":"inlineCode","value":"Error","position":{"start":{"line":5,"column":393,"offset":411},"end":{"line":5,"column":400,"offset":418},"indent":[]}}],"position":{"start":{"line":5,"column":392,"offset":410},"end":{"line":5,"column":411,"offset":429},"indent":[]}},{"type":"text","value":" that groups together individual errors. Essentially, this method is the opposite of ","position":{"start":{"line":5,"column":411,"offset":429},"end":{"line":5,"column":496,"offset":514},"indent":[]}},{"type":"link","title":null,"url":"all","children":[{"type":"inlineCode","value":"Promise.all()","position":{"start":{"line":5,"column":497,"offset":515},"end":{"line":5,"column":512,"offset":530},"indent":[]}}],"position":{"start":{"line":5,"column":496,"offset":514},"end":{"line":5,"column":518,"offset":536},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":5,"column":518,"offset":536},"end":{"line":5,"column":519,"offset":537},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":19},"end":{"line":5,"column":519,"offset":537},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":7,"column":4,"offset":542},"end":{"line":7,"column":10,"offset":548},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":539},"end":{"line":7,"column":10,"offset":548},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Promise.any(iterable);","position":{"start":{"line":9,"column":1,"offset":550},"end":{"line":9,"column":27,"offset":576},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Parameters","position":{"start":{"line":11,"column":5,"offset":582},"end":{"line":11,"column":15,"offset":592},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":578},"end":{"line":11,"column":15,"offset":592},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"iterable","position":{"start":{"line":13,"column":1,"offset":594},"end":{"line":13,"column":11,"offset":604},"indent":[]}},{"type":"text","value":"\nAn ","position":{"start":{"line":13,"column":11,"offset":604},"end":{"line":14,"column":4,"offset":608},"indent":[1]}},{"type":"link","title":null,"url":"../../iteration_protocols#the_iterable_protocol","children":[{"type":"text","value":"iterable","position":{"start":{"line":14,"column":5,"offset":609},"end":{"line":14,"column":13,"offset":617},"indent":[]}}],"position":{"start":{"line":14,"column":4,"offset":608},"end":{"line":14,"column":63,"offset":667},"indent":[]}},{"type":"text","value":" object, such as an ","position":{"start":{"line":14,"column":63,"offset":667},"end":{"line":14,"column":83,"offset":687},"indent":[]}},{"type":"link","title":null,"url":"../array","children":[{"type":"inlineCode","value":"Array","position":{"start":{"line":14,"column":84,"offset":688},"end":{"line":14,"column":91,"offset":695},"indent":[]}}],"position":{"start":{"line":14,"column":83,"offset":687},"end":{"line":14,"column":102,"offset":706},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":14,"column":102,"offset":706},"end":{"line":14,"column":103,"offset":707},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":594},"end":{"line":14,"column":103,"offset":707},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Return value","position":{"start":{"line":16,"column":5,"offset":713},"end":{"line":16,"column":17,"offset":725},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":709},"end":{"line":16,"column":17,"offset":725},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An ","position":{"start":{"line":18,"column":3,"offset":729},"end":{"line":18,"column":6,"offset":732},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"already rejected","position":{"start":{"line":18,"column":8,"offset":734},"end":{"line":18,"column":24,"offset":750},"indent":[]}}],"position":{"start":{"line":18,"column":6,"offset":732},"end":{"line":18,"column":26,"offset":752},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":18,"column":26,"offset":752},"end":{"line":18,"column":27,"offset":753},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":18,"column":28,"offset":754},"end":{"line":18,"column":37,"offset":763},"indent":[]}}],"position":{"start":{"line":18,"column":27,"offset":753},"end":{"line":18,"column":50,"offset":776},"indent":[]}},{"type":"text","value":" if the iterable passed is empty.","position":{"start":{"line":18,"column":50,"offset":776},"end":{"line":18,"column":83,"offset":809},"indent":[]}}],"position":{"start":{"line":18,"column":3,"offset":729},"end":{"line":18,"column":83,"offset":809},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":727},"end":{"line":18,"column":83,"offset":809},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"An ","position":{"start":{"line":19,"column":3,"offset":812},"end":{"line":19,"column":6,"offset":815},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"asynchronously resolved","position":{"start":{"line":19,"column":8,"offset":817},"end":{"line":19,"column":31,"offset":840},"indent":[]}}],"position":{"start":{"line":19,"column":6,"offset":815},"end":{"line":19,"column":33,"offset":842},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":19,"column":33,"offset":842},"end":{"line":19,"column":34,"offset":843},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":19,"column":35,"offset":844},"end":{"line":19,"column":44,"offset":853},"indent":[]}}],"position":{"start":{"line":19,"column":34,"offset":843},"end":{"line":19,"column":57,"offset":866},"indent":[]}},{"type":"text","value":" if the iterable passed contains no promises.","position":{"start":{"line":19,"column":57,"offset":866},"end":{"line":19,"column":102,"offset":911},"indent":[]}}],"position":{"start":{"line":19,"column":3,"offset":812},"end":{"line":19,"column":102,"offset":911},"indent":[]}}],"position":{"start":{"line":19,"column":1,"offset":810},"end":{"line":19,"column":102,"offset":911},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"A ","position":{"start":{"line":20,"column":3,"offset":914},"end":{"line":20,"column":5,"offset":916},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"pending","position":{"start":{"line":20,"column":7,"offset":918},"end":{"line":20,"column":14,"offset":925},"indent":[]}}],"position":{"start":{"line":20,"column":5,"offset":916},"end":{"line":20,"column":16,"offset":927},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":20,"column":16,"offset":927},"end":{"line":20,"column":17,"offset":928},"indent":[]}},{"type":"link","title":null,"url":"../promise","children":[{"type":"inlineCode","value":"Promise","position":{"start":{"line":20,"column":18,"offset":929},"end":{"line":20,"column":27,"offset":938},"indent":[]}}],"position":{"start":{"line":20,"column":17,"offset":928},"end":{"line":20,"column":40,"offset":951},"indent":[]}},{"type":"text","value":" in all other cases. This returned promise is then resolved/rejected ","position":{"start":{"line":20,"column":40,"offset":951},"end":{"line":20,"column":109,"offset":1020},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"asynchronously","position":{"start":{"line":20,"column":111,"offset":1022},"end":{"line":20,"column":125,"offset":1036},"indent":[]}}],"position":{"start":{"line":20,"column":109,"offset":1020},"end":{"line":20,"column":127,"offset":1038},"indent":[]}},{"type":"text","value":" (as soon as the stack is empty) when any of the promises in the given iterable resolve, or if all the promises have rejected.","position":{"start":{"line":20,"column":127,"offset":1038},"end":{"line":20,"column":253,"offset":1164},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":914},"end":{"line":20,"column":253,"offset":1164},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":912},"end":{"line":20,"column":253,"offset":1164},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":727},"end":{"line":20,"column":253,"offset":1164},"indent":[1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":22,"column":4,"offset":1169},"end":{"line":22,"column":15,"offset":1180},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":1166},"end":{"line":22,"column":15,"offset":1180},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"This method is useful for returning the first promise that fulfills. It short-circuits after a promise fulfills, so it does not wait for the other promises to complete once it finds one. Unlike ","position":{"start":{"line":24,"column":1,"offset":1182},"end":{"line":24,"column":195,"offset":1376},"indent":[]}},{"type":"link","title":null,"url":"all","children":[{"type":"inlineCode","value":"Promise.all()","position":{"start":{"line":24,"column":196,"offset":1377},"end":{"line":24,"column":211,"offset":1392},"indent":[]}}],"position":{"start":{"line":24,"column":195,"offset":1376},"end":{"line":24,"column":217,"offset":1398},"indent":[]}},{"type":"text","value":", which returns an ","position":{"start":{"line":24,"column":217,"offset":1398},"end":{"line":24,"column":236,"offset":1417},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"array","position":{"start":{"line":24,"column":237,"offset":1418},"end":{"line":24,"column":242,"offset":1423},"indent":[]}}],"position":{"start":{"line":24,"column":236,"offset":1417},"end":{"line":24,"column":243,"offset":1424},"indent":[]}},{"type":"text","value":" of fulfillment values, we only get one fulfillment value (assuming at least one promise fulfills). This can be beneficial if we need only one promise to fulfill but we do not care which one does. Note another difference: This method rejects upon receiving an ","position":{"start":{"line":24,"column":243,"offset":1424},"end":{"line":24,"column":503,"offset":1684},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"empty iterable","position":{"start":{"line":24,"column":504,"offset":1685},"end":{"line":24,"column":518,"offset":1699},"indent":[]}}],"position":{"start":{"line":24,"column":503,"offset":1684},"end":{"line":24,"column":519,"offset":1700},"indent":[]}},{"type":"text","value":", since, truthfully, the iterable contains no items that fulfill.","position":{"start":{"line":24,"column":519,"offset":1700},"end":{"line":24,"column":584,"offset":1765},"indent":[]}}],"position":{"start":{"line":24,"column":1,"offset":1182},"end":{"line":24,"column":584,"offset":1765},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Also, unlike ","position":{"start":{"line":26,"column":1,"offset":1767},"end":{"line":26,"column":14,"offset":1780},"indent":[]}},{"type":"link","title":null,"url":"race","children":[{"type":"inlineCode","value":"Promise.race()","position":{"start":{"line":26,"column":15,"offset":1781},"end":{"line":26,"column":31,"offset":1797},"indent":[]}}],"position":{"start":{"line":26,"column":14,"offset":1780},"end":{"line":26,"column":38,"offset":1804},"indent":[]}},{"type":"text","value":", which returns the first ","position":{"start":{"line":26,"column":38,"offset":1804},"end":{"line":26,"column":64,"offset":1830},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"settled","position":{"start":{"line":26,"column":65,"offset":1831},"end":{"line":26,"column":72,"offset":1838},"indent":[]}}],"position":{"start":{"line":26,"column":64,"offset":1830},"end":{"line":26,"column":73,"offset":1839},"indent":[]}},{"type":"text","value":" value (either fulfillment or rejection), this method returns the first ","position":{"start":{"line":26,"column":73,"offset":1839},"end":{"line":26,"column":145,"offset":1911},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"fulfilled","position":{"start":{"line":26,"column":146,"offset":1912},"end":{"line":26,"column":155,"offset":1921},"indent":[]}}],"position":{"start":{"line":26,"column":145,"offset":1911},"end":{"line":26,"column":156,"offset":1922},"indent":[]}},{"type":"text","value":" value. This method will ignore all rejected promises up until the first promise that fulfils.","position":{"start":{"line":26,"column":156,"offset":1922},"end":{"line":26,"column":250,"offset":2016},"indent":[]}}],"position":{"start":{"line":26,"column":1,"offset":1767},"end":{"line":26,"column":250,"offset":2016},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Fulfillment","position":{"start":{"line":28,"column":5,"offset":2022},"end":{"line":28,"column":16,"offset":2033},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":2018},"end":{"line":28,"column":16,"offset":2033},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The returned promise is fulfilled with ","position":{"start":{"line":30,"column":1,"offset":2035},"end":{"line":30,"column":40,"offset":2074},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"the first","position":{"start":{"line":30,"column":42,"offset":2076},"end":{"line":30,"column":51,"offset":2085},"indent":[]}}],"position":{"start":{"line":30,"column":40,"offset":2074},"end":{"line":30,"column":53,"offset":2087},"indent":[]}},{"type":"text","value":" resolved value (or non-promise value) in the iterable passed as the argument, whether or not the other promises have rejected.","position":{"start":{"line":30,"column":53,"offset":2087},"end":{"line":30,"column":180,"offset":2214},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":2035},"end":{"line":30,"column":180,"offset":2214},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If a nonempty ","position":{"start":{"line":32,"column":3,"offset":2218},"end":{"line":32,"column":17,"offset":2232},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"iterable","position":{"start":{"line":32,"column":18,"offset":2233},"end":{"line":32,"column":26,"offset":2241},"indent":[]}}],"position":{"start":{"line":32,"column":17,"offset":2232},"end":{"line":32,"column":27,"offset":2242},"indent":[]}},{"type":"text","value":" is passed, and ","position":{"start":{"line":32,"column":27,"offset":2242},"end":{"line":32,"column":43,"offset":2258},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"any","position":{"start":{"line":32,"column":45,"offset":2260},"end":{"line":32,"column":48,"offset":2263},"indent":[]}}],"position":{"start":{"line":32,"column":43,"offset":2258},"end":{"line":32,"column":50,"offset":2265},"indent":[]}},{"type":"text","value":" of the promises fulfill, or are not promises, then the promise returned by this method is fulfilled asynchronously.","position":{"start":{"line":32,"column":50,"offset":2265},"end":{"line":32,"column":166,"offset":2381},"indent":[]}}],"position":{"start":{"line":32,"column":3,"offset":2218},"end":{"line":32,"column":166,"offset":2381},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2216},"end":{"line":32,"column":166,"offset":2381},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":2216},"end":{"line":32,"column":166,"offset":2381},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Rejection","position":{"start":{"line":34,"column":5,"offset":2387},"end":{"line":34,"column":14,"offset":2396},"indent":[]}}],"position":{"start":{"line":34,"column":1,"offset":2383},"end":{"line":34,"column":14,"offset":2396},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"If all of the passed-in promises reject, ","position":{"start":{"line":36,"column":1,"offset":2398},"end":{"line":36,"column":42,"offset":2439},"indent":[]}},{"type":"inlineCode","value":"Promise.any","position":{"start":{"line":36,"column":42,"offset":2439},"end":{"line":36,"column":55,"offset":2452},"indent":[]}},{"type":"text","value":" asynchronously rejects with an ","position":{"start":{"line":36,"column":55,"offset":2452},"end":{"line":36,"column":87,"offset":2484},"indent":[]}},{"type":"link","title":null,"url":"../aggregateerror","children":[{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":36,"column":88,"offset":2485},"end":{"line":36,"column":104,"offset":2501},"indent":[]}}],"position":{"start":{"line":36,"column":87,"offset":2484},"end":{"line":36,"column":124,"offset":2521},"indent":[]}},{"type":"text","value":" object, which extends ","position":{"start":{"line":36,"column":124,"offset":2521},"end":{"line":36,"column":147,"offset":2544},"indent":[]}},{"type":"link","title":null,"url":"../error","children":[{"type":"inlineCode","value":"Error","position":{"start":{"line":36,"column":148,"offset":2545},"end":{"line":36,"column":155,"offset":2552},"indent":[]}}],"position":{"start":{"line":36,"column":147,"offset":2544},"end":{"line":36,"column":166,"offset":2563},"indent":[]}},{"type":"text","value":", and contains an ","position":{"start":{"line":36,"column":166,"offset":2563},"end":{"line":36,"column":184,"offset":2581},"indent":[]}},{"type":"inlineCode","value":"errors","position":{"start":{"line":36,"column":184,"offset":2581},"end":{"line":36,"column":192,"offset":2589},"indent":[]}},{"type":"text","value":" property with an array of rejection values.","position":{"start":{"line":36,"column":192,"offset":2589},"end":{"line":36,"column":236,"offset":2633},"indent":[]}}],"position":{"start":{"line":36,"column":1,"offset":2398},"end":{"line":36,"column":236,"offset":2633},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"If an empty iterable is passed, then the promise returned by this method is rejected synchronously. The rejected reason is an ","position":{"start":{"line":38,"column":3,"offset":2637},"end":{"line":38,"column":129,"offset":2763},"indent":[]}},{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":38,"column":129,"offset":2763},"end":{"line":38,"column":145,"offset":2779},"indent":[]}},{"type":"text","value":" object whose ","position":{"start":{"line":38,"column":145,"offset":2779},"end":{"line":38,"column":159,"offset":2793},"indent":[]}},{"type":"inlineCode","value":"errors","position":{"start":{"line":38,"column":159,"offset":2793},"end":{"line":38,"column":167,"offset":2801},"indent":[]}},{"type":"text","value":" property is an empty array.","position":{"start":{"line":38,"column":167,"offset":2801},"end":{"line":38,"column":195,"offset":2829},"indent":[]}}],"position":{"start":{"line":38,"column":3,"offset":2637},"end":{"line":38,"column":195,"offset":2829},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2635},"end":{"line":38,"column":195,"offset":2829},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":2635},"end":{"line":38,"column":195,"offset":2829},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":40,"column":4,"offset":2834},"end":{"line":40,"column":12,"offset":2842},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":2831},"end":{"line":40,"column":12,"offset":2842},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"First to fulfil","position":{"start":{"line":42,"column":5,"offset":2848},"end":{"line":42,"column":20,"offset":2863},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":2844},"end":{"line":42,"column":20,"offset":2863},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":44,"column":1,"offset":2865},"end":{"line":44,"column":16,"offset":2880},"indent":[]}},{"type":"text","value":" resolves with the first promise to fulfil, even if a promise rejects first. This is in contrast to ","position":{"start":{"line":44,"column":16,"offset":2880},"end":{"line":44,"column":116,"offset":2980},"indent":[]}},{"type":"link","title":null,"url":"race","children":[{"type":"inlineCode","value":"Promise.race()","position":{"start":{"line":44,"column":117,"offset":2981},"end":{"line":44,"column":133,"offset":2997},"indent":[]}}],"position":{"start":{"line":44,"column":116,"offset":2980},"end":{"line":44,"column":140,"offset":3004},"indent":[]}},{"type":"text","value":", which resolves or rejects with the first promise to settle.","position":{"start":{"line":44,"column":140,"offset":3004},"end":{"line":44,"column":201,"offset":3065},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":2865},"end":{"line":44,"column":201,"offset":3065},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const pErr = new Promise((resolve, reject) => {\n  reject(\"Always fails\");\n});\n\nconst pSlow = new Promise((resolve, reject) => {\n  setTimeout(resolve, 500, \"Done eventually\");\n});\n\nconst pFast = new Promise((resolve, reject) => {\n  setTimeout(resolve, 100, \"Done quick\");\n});\n\nPromise.any([pErr, pSlow, pFast]).then((value) => {\n  console.log(value);\n  // pFast fulfils first\n})\n// expected output: \"Done quick\"","position":{"start":{"line":46,"column":1,"offset":3067},"end":{"line":62,"column":37,"offset":3533},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Rejections with AggregateError","position":{"start":{"line":64,"column":5,"offset":3539},"end":{"line":64,"column":35,"offset":3569},"indent":[]}}],"position":{"start":{"line":64,"column":1,"offset":3535},"end":{"line":64,"column":35,"offset":3569},"indent":[]}},{"type":"paragraph","children":[{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":66,"column":1,"offset":3571},"end":{"line":66,"column":16,"offset":3586},"indent":[]}},{"type":"text","value":" rejects with an ","position":{"start":{"line":66,"column":16,"offset":3586},"end":{"line":66,"column":33,"offset":3603},"indent":[]}},{"type":"link","title":null,"url":"../aggregateerror","children":[{"type":"inlineCode","value":"AggregateError","position":{"start":{"line":66,"column":34,"offset":3604},"end":{"line":66,"column":50,"offset":3620},"indent":[]}}],"position":{"start":{"line":66,"column":33,"offset":3603},"end":{"line":66,"column":70,"offset":3640},"indent":[]}},{"type":"text","value":" if no promise fulfils.","position":{"start":{"line":66,"column":70,"offset":3640},"end":{"line":66,"column":93,"offset":3663},"indent":[]}}],"position":{"start":{"line":66,"column":1,"offset":3571},"end":{"line":66,"column":93,"offset":3663},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"const pErr = new Promise((resolve, reject) => {\n  reject('Always fails');\n});\n\nPromise.any([pErr]).catch((err) => {\n  console.log(err);\n})\n// expected output: \"AggregateError: No Promise in Promise.any was resolved\"","position":{"start":{"line":68,"column":1,"offset":3665},"end":{"line":75,"column":81,"offset":3908},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Displaying the first image loaded","position":{"start":{"line":77,"column":5,"offset":3914},"end":{"line":77,"column":38,"offset":3947},"indent":[]}}],"position":{"start":{"line":77,"column":1,"offset":3910},"end":{"line":77,"column":38,"offset":3947},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In this example, we have a function that fetches an image and returns a blob. We use ","position":{"start":{"line":79,"column":1,"offset":3949},"end":{"line":79,"column":86,"offset":4034},"indent":[]}},{"type":"inlineCode","value":"Promise.any()","position":{"start":{"line":79,"column":86,"offset":4034},"end":{"line":79,"column":101,"offset":4049},"indent":[]}},{"type":"text","value":" to fetch a couple of images and display the first one available (i.e. whose promise has resolved).","position":{"start":{"line":79,"column":101,"offset":4049},"end":{"line":79,"column":200,"offset":4148},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":3949},"end":{"line":79,"column":200,"offset":4148},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"function fetchAndDecode(url) {\n  return fetch(url).then(response => {\n    if(!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    } else {\n      return response.blob();\n    }\n  })\n}\n\nlet coffee = fetchAndDecode('coffee.jpg');\nlet tea = fetchAndDecode('tea.jpg');\n\nPromise.any([coffee, tea]).then(value => {\n  let objectURL = URL.createObjectURL(value);\n  let image = document.createElement('img');\n  image.src = objectURL;\n  document.body.appendChild(image);\n})\n.catch(e => {\n  console.log(e.message);\n});","position":{"start":{"line":81,"column":1,"offset":4150},"end":{"line":102,"column":8,"offset":4767},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":103,"column":1,"offset":4768}}}}