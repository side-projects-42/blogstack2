{"expireTime":9007200914465212000,"key":"transformer-remark-markdown-html-a57453785b724c8d563c6dce25c49012--","val":"<p>A common pattern in React is for a component to return multiple elements. Fragments let you group a list of children without adding extra nodes to the DOM.</p>\n<pre><code>render() {\n  return (\n    &#x3C;React.Fragment>\n      &#x3C;ChildA />\n      &#x3C;ChildB />\n      &#x3C;ChildC />\n    &#x3C;/React.Fragment>\n  );\n}\n</code></pre>\n<p>There is also a new <a href=\"https://reactjs.org/docs/fragments.html#short-syntax\">short syntax</a> for declaring them.</p>\n<h2><a href=\"https://reactjs.org/docs/fragments.html#motivation\"></a>Motivation</h2>\n<p>A common pattern is for a component to return a list of children. Take this example React snippet:</p>\n<pre><code>class Table extends React.Component {\n  render() {\n    return (\n      &#x3C;table>\n        &#x3C;tr>\n          &#x3C;Columns />\n        &#x3C;/tr>\n      &#x3C;/table>\n    );\n  }\n}\n</code></pre>\n<p><code>&#x3C;Columns /></code> would need to return multiple <code>&#x3C;td></code> elements in order for the rendered HTML to be valid. If a parent div was used inside the <code>render()</code> of <code>&#x3C;Columns /></code>, then the resulting HTML will be invalid.</p>\n<pre><code>class Columns extends React.Component {\n  render() {\n    return (\n      &#x3C;div>\n        &#x3C;td>Hello&#x3C;/td>\n        &#x3C;td>World&#x3C;/td>\n      &#x3C;/div>\n    );\n  }\n}\n</code></pre>\n<p>results in a <code>&#x3C;Table /></code> output of:</p>\n<pre><code>&#x3C;table>\n  &#x3C;tr>\n    &#x3C;div>\n      &#x3C;td>Hello&#x3C;/td>\n      &#x3C;td>World&#x3C;/td>\n    &#x3C;/div>\n  &#x3C;/tr>\n&#x3C;/table>\n</code></pre>\n<p>Fragments solve this problem.</p>\n<h2><a href=\"https://reactjs.org/docs/fragments.html#usage\"></a>Usage</h2>\n<pre><code>class Columns extends React.Component {\n  render() {\n    return (\n      &#x3C;React.Fragment>        &#x3C;td>Hello&#x3C;/td>\n        &#x3C;td>World&#x3C;/td>\n      &#x3C;/React.Fragment>    );\n  }\n}\n</code></pre>\n<p>which results in a correct <code>&#x3C;Table /></code> output of:</p>\n<pre><code>&#x3C;table>\n  &#x3C;tr>\n    &#x3C;td>Hello&#x3C;/td>\n    &#x3C;td>World&#x3C;/td>\n  &#x3C;/tr>\n&#x3C;/table>\n</code></pre>\n<h3><a href=\"https://reactjs.org/docs/fragments.html#short-syntax\"></a>Short Syntax</h3>\n<p>There is a new, shorter syntax you can use for declaring fragments. It looks like empty tags:</p>\n<pre><code>class Columns extends React.Component {\n  render() {\n    return (\n      &#x3C;>        &#x3C;td>Hello&#x3C;/td>\n        &#x3C;td>World&#x3C;/td>\n      &#x3C;/>    );\n  }\n}\n</code></pre>\n<p>You can use <code>&#x3C;>&#x3C;/></code> the same way you’d use any other element except that it doesn’t support keys or attributes.</p>\n<h3><a href=\"https://reactjs.org/docs/fragments.html#keyed-fragments\"></a>Keyed Fragments</h3>\n<p>Fragments declared with the explicit <code>&#x3C;React.Fragment></code> syntax may have keys. A use case for this is mapping a collection to an array of fragments — for example, to create a description list:</p>\n<pre><code>function Glossary(props) {\n  return (\n    &#x3C;dl>\n      {props.items.map(item => (\n        // Without the `key`, React will fire a key warning\n        &#x3C;React.Fragment key={item.id}>\n          &#x3C;dt>{item.term}&#x3C;/dt>\n          &#x3C;dd>{item.description}&#x3C;/dd>\n        &#x3C;/React.Fragment>\n      ))}\n    &#x3C;/dl>\n  );\n}\n</code></pre>\n<p><code>key</code> is the only attribute that can be passed to <code>Fragment</code>. In the future, we may add support for additional attributes, such as event handlers.</p>\n<iframe height=\"800\" style=\"width: 100%;\" scrolling=\"no\" title=\"Example: Fragments\" src=\"https://codepen.io/bgoonz/embed/VwQQWyV?default-tab=html%2Cresult\" frameborder=\"no\" loading=\"lazy\" allowtransparency=\"true\" allowfullscreen=\"true\">\n</iframe>"}