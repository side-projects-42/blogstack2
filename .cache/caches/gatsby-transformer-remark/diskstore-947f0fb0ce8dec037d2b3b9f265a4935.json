{"expireTime":9007200914465210000,"key":"transformer-remark-markdown-html-ast-d4c8c9869473caff508de3678f6b8077--","val":{"type":"root","children":[{"type":"element","tagName":"h1","properties":{},"children":[{"type":"text","value":"Map","position":{"start":{"line":3,"column":3,"offset":4},"end":{"line":3,"column":6,"offset":7}}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":6,"offset":7}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The ","position":{"start":{"line":5,"column":1,"offset":9},"end":{"line":5,"column":5,"offset":13}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":5,"column":5,"offset":13},"end":{"line":5,"column":10,"offset":18}}},{"type":"text","value":" object holds key-value pairs and remembers the original insertion order of the keys. Any value (both objects and ","position":{"start":{"line":5,"column":10,"offset":18},"end":{"line":5,"column":124,"offset":132}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Glossary/Primitive"},"children":[{"type":"text","value":"primitive values","position":{"start":{"line":5,"column":125,"offset":133},"end":{"line":5,"column":141,"offset":149}}}],"position":{"start":{"line":5,"column":124,"offset":132},"end":{"line":5,"column":203,"offset":211}}},{"type":"text","value":") may be used as either a key or a value.","position":{"start":{"line":5,"column":203,"offset":211},"end":{"line":5,"column":244,"offset":252}}}],"position":{"start":{"line":5,"column":1,"offset":9},"end":{"line":5,"column":244,"offset":252}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Description","position":{"start":{"line":7,"column":4,"offset":257},"end":{"line":7,"column":15,"offset":268}}}],"position":{"start":{"line":7,"column":1,"offset":254},"end":{"line":7,"column":15,"offset":268}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"A ","position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":3,"offset":272}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":9,"column":3,"offset":272},"end":{"line":9,"column":8,"offset":277}}},{"type":"text","value":" object iterates its elements in insertion order â€” a ","position":{"start":{"line":9,"column":8,"offset":277},"end":{"line":9,"column":61,"offset":330}}},{"type":"element","tagName":"a","properties":{"href":"../statements/for...of"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for...of"}],"position":{"start":{"line":9,"column":62,"offset":331},"end":{"line":9,"column":72,"offset":341}}}],"position":{"start":{"line":9,"column":61,"offset":330},"end":{"line":9,"column":97,"offset":366}}},{"type":"text","value":" loop returns an array of ","position":{"start":{"line":9,"column":97,"offset":366},"end":{"line":9,"column":123,"offset":392}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":9,"column":123,"offset":392},"end":{"line":9,"column":137,"offset":406}}},{"type":"text","value":" for each iteration.","position":{"start":{"line":9,"column":137,"offset":406},"end":{"line":9,"column":157,"offset":426}}}],"position":{"start":{"line":9,"column":1,"offset":270},"end":{"line":9,"column":157,"offset":426}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Key equality","position":{"start":{"line":11,"column":5,"offset":432},"end":{"line":11,"column":17,"offset":444}}}],"position":{"start":{"line":11,"column":1,"offset":428},"end":{"line":11,"column":17,"offset":444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"Key equality is based on the ","position":{"start":{"line":13,"column":3,"offset":448},"end":{"line":13,"column":32,"offset":477}}},{"type":"element","tagName":"a","properties":{"href":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness#same-value-zero_equality"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"sameValueZero"}],"position":{"start":{"line":13,"column":33,"offset":478},"end":{"line":13,"column":48,"offset":493}}}],"position":{"start":{"line":13,"column":32,"offset":477},"end":{"line":13,"column":165,"offset":610}}},{"type":"text","value":" algorithm.","position":{"start":{"line":13,"column":165,"offset":610},"end":{"line":13,"column":176,"offset":621}}}],"position":{"start":{"line":13,"column":1,"offset":446},"end":{"line":13,"column":176,"offset":621}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"nan"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":14,"column":4,"offset":625},"end":{"line":14,"column":9,"offset":630}}}],"position":{"start":{"line":14,"column":3,"offset":624},"end":{"line":14,"column":15,"offset":636}}},{"type":"text","value":" is considered the same as ","position":{"start":{"line":14,"column":15,"offset":636},"end":{"line":14,"column":42,"offset":663}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":14,"column":42,"offset":663},"end":{"line":14,"column":47,"offset":668}}},{"type":"text","value":" (even though ","position":{"start":{"line":14,"column":47,"offset":668},"end":{"line":14,"column":61,"offset":682}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN !== NaN"}],"position":{"start":{"line":14,"column":61,"offset":682},"end":{"line":14,"column":74,"offset":695}}},{"type":"text","value":") and all other values are considered equal according to the semantics of the ","position":{"start":{"line":14,"column":74,"offset":695},"end":{"line":14,"column":152,"offset":773}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"==="}],"position":{"start":{"line":14,"column":152,"offset":773},"end":{"line":14,"column":157,"offset":778}}},{"type":"text","value":" operator.","position":{"start":{"line":14,"column":157,"offset":778},"end":{"line":14,"column":167,"offset":788}}}],"position":{"start":{"line":14,"column":1,"offset":622},"end":{"line":14,"column":167,"offset":788}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"In the current ECMAScript specification, ","position":{"start":{"line":15,"column":3,"offset":791},"end":{"line":15,"column":44,"offset":832}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"-0"}],"position":{"start":{"line":15,"column":44,"offset":832},"end":{"line":15,"column":48,"offset":836}}},{"type":"text","value":" and ","position":{"start":{"line":15,"column":48,"offset":836},"end":{"line":15,"column":53,"offset":841}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"+0"}],"position":{"start":{"line":15,"column":53,"offset":841},"end":{"line":15,"column":57,"offset":845}}},{"type":"text","value":" are considered equal, although this was not so in earlier drafts. See ","position":{"start":{"line":15,"column":57,"offset":845},"end":{"line":15,"column":128,"offset":916}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"\"Value equality for -0 and 0\"","position":{"start":{"line":15,"column":129,"offset":917},"end":{"line":15,"column":158,"offset":946}}}],"position":{"start":{"line":15,"column":128,"offset":916},"end":{"line":15,"column":159,"offset":947}}},{"type":"text","value":" in the ","position":{"start":{"line":15,"column":159,"offset":947},"end":{"line":15,"column":167,"offset":955}}},{"type":"element","tagName":"a","properties":{"href":"#browser_compatibility"},"children":[{"type":"text","value":"Browser compatibility","position":{"start":{"line":15,"column":168,"offset":956},"end":{"line":15,"column":189,"offset":977}}}],"position":{"start":{"line":15,"column":167,"offset":955},"end":{"line":15,"column":214,"offset":1002}}},{"type":"text","value":" table for details.","position":{"start":{"line":15,"column":214,"offset":1002},"end":{"line":15,"column":233,"offset":1021}}}],"position":{"start":{"line":15,"column":1,"offset":789},"end":{"line":15,"column":233,"offset":1021}}},{"type":"text","value":"\n"}],"position":{"start":{"line":13,"column":1,"offset":446},"end":{"line":15,"column":233,"offset":1021}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Objects vs. Maps","position":{"start":{"line":17,"column":5,"offset":1027},"end":{"line":17,"column":21,"offset":1043}}}],"position":{"start":{"line":17,"column":1,"offset":1023},"end":{"line":17,"column":21,"offset":1043}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"object"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object"}],"position":{"start":{"line":19,"column":2,"offset":1046},"end":{"line":19,"column":10,"offset":1054}}}],"position":{"start":{"line":19,"column":1,"offset":1045},"end":{"line":19,"column":19,"offset":1063}}},{"type":"text","value":" is similar to ","position":{"start":{"line":19,"column":19,"offset":1063},"end":{"line":19,"column":34,"offset":1078}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":19,"column":34,"offset":1078},"end":{"line":19,"column":39,"offset":1083}}},{"type":"text","value":"â€”both let you set keys to values, retrieve those values, delete keys, and detect whether something is stored at a key. For this reason (and because there were no built-in alternatives), ","position":{"start":{"line":19,"column":39,"offset":1083},"end":{"line":19,"column":225,"offset":1269}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Object"}],"position":{"start":{"line":19,"column":225,"offset":1269},"end":{"line":19,"column":233,"offset":1277}}},{"type":"text","value":" has been used as ","position":{"start":{"line":19,"column":233,"offset":1277},"end":{"line":19,"column":251,"offset":1295}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":19,"column":251,"offset":1295},"end":{"line":19,"column":256,"offset":1300}}},{"type":"text","value":" historically.","position":{"start":{"line":19,"column":256,"offset":1300},"end":{"line":19,"column":270,"offset":1314}}}],"position":{"start":{"line":19,"column":1,"offset":1045},"end":{"line":19,"column":270,"offset":1314}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"However, there are important differences that make ","position":{"start":{"line":21,"column":1,"offset":1316},"end":{"line":21,"column":52,"offset":1367}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":21,"column":52,"offset":1367},"end":{"line":21,"column":57,"offset":1372}}},{"type":"text","value":" preferable in certain cases:","position":{"start":{"line":21,"column":57,"offset":1372},"end":{"line":21,"column":86,"offset":1401}}}],"position":{"start":{"line":21,"column":1,"offset":1316},"end":{"line":21,"column":86,"offset":1401}}},{"type":"text","value":"\n"},{"type":"raw","value":"<table>\n<colgroup>\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n<col style=\"width: 33%\" />\n</colgroup>\n<thead>\n<tr class=\"header\">\n<th>\n</th>\n<th>Map</th>\n<th>Object</th>\n</tr>\n</thead>\n<tbody>\n<tr class=\"odd\">\n<td>Accidental Keys</td>\n<td>A <code>Map</code> does not contain any keys by default. It only contains what is explicitly put into it.</td>\n<td>\n<p>An <code>Object</code> has a prototype, so it contains default keys that could collide with your own keys if you're not careful.</p>\n<div class=\"notecard note\">\n<p>\n<strong>Note:</strong> As of ES5, this can be bypassed by using <a href=\"object/create\">\n<code>Object.create(null)</code>\n</a>, but this is seldom done.</p>\n</div>\n</td>\n</tr>\n<tr class=\"even\">\n<td>Key Types</td>\n<td>A <code>Map</code>'s keys can be any value (including functions, objects, or any primitive).</td>\n<td>The keys of an <code>Object</code> must be either a <a href=\"string\">\n<code>String</code>\n</a> or a <a href=\"symbol\">\n<code>Symbol</code>\n</a>.</td>\n</tr>\n<tr class=\"odd\">\n<td>Key Order</td>\n<td>\n<p>The keys in <code>Map</code> are ordered in a simple, straightforward way: A <code>Map</code> object iterates entries, keys, and values in the order of entry insertion.</p>\n</td>\n<td>\n<p>Although the keys of an ordinary <code>Object</code> are ordered now, this was not always the case, and the order is complex. As a result, it's best not to rely on property order.</p>\n<p>The order was first defined for own properties only in ECMAScript 2015; ECMAScript 2020 defines order for inherited properties as well. See the <a href=\"https://tc39.es/ecma262/#sec-ordinaryownpropertykeys\">OrdinaryOwnPropertyKeys</a> and <a href=\"https://tc39.es/ecma262/#sec-enumerate-object-properties\">EnumerateObjectProperties</a> abstract specification operations. But note that no single mechanism iterates <strong>all</strong> of an object's properties; the various mechanisms each include different subsets of properties. (<a href=\"../statements/for...in\">\n<code>for-in</code>\n</a> includes only enumerable string-keyed properties; <a href=\"object/keys\">\n<code>Object.keys</code>\n</a> includes only own, enumerable, string-keyed properties; <a href=\"object/getownpropertynames\">\n<code>Object.getOwnPropertyNames</code>\n</a> includes own, string-keyed properties even if non-enumerable; <a href=\"object/getownpropertysymbols\">\n<code>Object.getOwnPropertySymbols</code>\n</a> does the same for just <code>Symbol</code>-keyed properties, etc.)</p>\n</td>\n</tr>\n<tr class=\"even\">\n<td>\n<p>Size</p>\n</td>\n<td>The number of items in a <code>Map</code> is easily retrieved from its <a href=\"map/size\">\n<code>size</code>\n</a> property.</td>\n<td>The number of items in an <code>Object</code> must be determined manually.</td>\n</tr>\n<tr class=\"odd\">\n<td>Iteration</td>\n<td>A <code>Map</code> is an <a href=\"../iteration_protocols\">iterable</a>, so it can be directly iterated.</td>\n<td>\n<p>\n<code>Object</code> does not implement an <a href=\"../iteration_protocols#the_iterable_protocol\">iteration protocol</a>, and so objects are not directly iterable using the JavaScript <a href=\"../statements/for...of\">for...of</a> statement (by default).</p>\n<div class=\"notecard note\">\n<p>\n<strong>Note:</strong>\n</p>\n<ul>\n<li>An object can implement the iteration protocol, or you can get an iterable for an object using <a href=\"object/keys\">\n<code>Object.keys</code>\n</a> or <a href=\"object/entries\">\n<code>Object.entries</code>\n</a>.</li>\n<li>The <a href=\"../statements/for...in\">for...in</a> statement allows you to iterate over the <em>enumerable</em> properties of an object.</li>\n</ul>\n</div>\n</td>\n</tr>\n<tr class=\"even\">\n<td>Performance</td>\n<td>\n<p>Performs better in scenarios involving frequent additions and removals of key-value pairs.</p>\n</td>\n<td>\n<p>Not optimized for frequent additions and removals of key-value pairs.</p>\n</td>\n</tr>\n</tbody>\n</table>","position":{"start":{"line":23,"column":1,"offset":1403},"end":{"line":118,"column":9,"offset":5286}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Setting object properties","position":{"start":{"line":120,"column":5,"offset":5292},"end":{"line":120,"column":30,"offset":5317}}}],"position":{"start":{"line":120,"column":1,"offset":5288},"end":{"line":120,"column":30,"offset":5317}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Setting Object properties works for Map objects as well, and can cause considerable confusion.","position":{"start":{"line":122,"column":1,"offset":5319},"end":{"line":122,"column":95,"offset":5413}}}],"position":{"start":{"line":122,"column":1,"offset":5319},"end":{"line":122,"column":95,"offset":5413}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Therefore, this appears to work in a way:","position":{"start":{"line":124,"column":1,"offset":5415},"end":{"line":124,"column":42,"offset":5456}}}],"position":{"start":{"line":124,"column":1,"offset":5415},"end":{"line":124,"column":42,"offset":5456}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let wrongMap = new Map()\nwrongMap['bla'] = 'blaa'\nwrongMap['bla2'] = 'blaaa2'\n\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n"}],"position":{"start":{"line":126,"column":1,"offset":5458},"end":{"line":130,"column":66,"offset":5614}}}],"position":{"start":{"line":126,"column":1,"offset":5458},"end":{"line":130,"column":66,"offset":5614}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"But that way of setting a property does not interact with the Map data structure. It uses the feature of the generic object. The value of 'bla' is not stored in the Map for queries. Other operations on the data fail:","position":{"start":{"line":132,"column":1,"offset":5616},"end":{"line":132,"column":217,"offset":5832}}}],"position":{"start":{"line":132,"column":1,"offset":5616},"end":{"line":132,"column":217,"offset":5832}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"wrongMap.has('bla')    // false\nwrongMap.delete('bla') // false\nconsole.log(wrongMap)  // Map { bla: 'blaa', bla2: 'blaaa2' }\n"}],"position":{"start":{"line":134,"column":1,"offset":5834},"end":{"line":136,"column":66,"offset":5971}}}],"position":{"start":{"line":134,"column":1,"offset":5834},"end":{"line":136,"column":66,"offset":5971}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"The correct usage for storing data in the Map is through the ","position":{"start":{"line":138,"column":1,"offset":5973},"end":{"line":138,"column":62,"offset":6034}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"set(key, value)"}],"position":{"start":{"line":138,"column":62,"offset":6034},"end":{"line":138,"column":79,"offset":6051}}},{"type":"text","value":" method.","position":{"start":{"line":138,"column":79,"offset":6051},"end":{"line":138,"column":87,"offset":6059}}}],"position":{"start":{"line":138,"column":1,"offset":5973},"end":{"line":138,"column":87,"offset":6059}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let contacts = new Map()\ncontacts.set('Jessie', {phone: \"213-555-1234\", address: \"123 N 1st Ave\"})\ncontacts.has('Jessie') // true\ncontacts.get('Hilary') // undefined\ncontacts.set('Hilary', {phone: \"617-555-4321\", address: \"321 S 2nd St\"})\ncontacts.get('Jessie') // {phone: \"213-555-1234\", address: \"123 N 1st Ave\"}\ncontacts.delete('Raymond') // false\ncontacts.delete('Jessie') // true\nconsole.log(contacts.size) // 1\n"}],"position":{"start":{"line":140,"column":1,"offset":6061},"end":{"line":148,"column":36,"offset":6513}}}],"position":{"start":{"line":140,"column":1,"offset":6061},"end":{"line":148,"column":36,"offset":6513}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Constructor","position":{"start":{"line":150,"column":4,"offset":6518},"end":{"line":150,"column":15,"offset":6529}}}],"position":{"start":{"line":150,"column":1,"offset":6515},"end":{"line":150,"column":15,"offset":6529}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/map"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map()"}],"position":{"start":{"line":152,"column":2,"offset":6532},"end":{"line":152,"column":9,"offset":6539}}}],"position":{"start":{"line":152,"column":1,"offset":6531},"end":{"line":152,"column":19,"offset":6549}}},{"type":"text","value":"\nCreates a new ","position":{"start":{"line":152,"column":19,"offset":6549},"end":{"line":153,"column":15,"offset":6564}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":153,"column":15,"offset":6564},"end":{"line":153,"column":20,"offset":6569}}},{"type":"text","value":" object.","position":{"start":{"line":153,"column":20,"offset":6569},"end":{"line":153,"column":28,"offset":6577}}}],"position":{"start":{"line":152,"column":1,"offset":6531},"end":{"line":153,"column":28,"offset":6577}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Static properties","position":{"start":{"line":155,"column":4,"offset":6582},"end":{"line":155,"column":21,"offset":6599}}}],"position":{"start":{"line":155,"column":1,"offset":6579},"end":{"line":155,"column":21,"offset":6599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/@@species"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"get Map[@@species]"}],"position":{"start":{"line":157,"column":2,"offset":6602},"end":{"line":157,"column":22,"offset":6622}}}],"position":{"start":{"line":157,"column":1,"offset":6601},"end":{"line":157,"column":38,"offset":6638}}},{"type":"text","value":"\nThe constructor function that is used to create derived objects.","position":{"start":{"line":157,"column":38,"offset":6638},"end":{"line":158,"column":65,"offset":6703}}}],"position":{"start":{"line":157,"column":1,"offset":6601},"end":{"line":158,"column":65,"offset":6703}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Instance properties","position":{"start":{"line":160,"column":4,"offset":6708},"end":{"line":160,"column":23,"offset":6727}}}],"position":{"start":{"line":160,"column":1,"offset":6705},"end":{"line":160,"column":23,"offset":6727}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/size"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.size"}],"position":{"start":{"line":162,"column":2,"offset":6730},"end":{"line":162,"column":22,"offset":6750}}}],"position":{"start":{"line":162,"column":1,"offset":6729},"end":{"line":162,"column":33,"offset":6761}}},{"type":"text","value":"\nReturns the number of key/value pairs in the ","position":{"start":{"line":162,"column":33,"offset":6761},"end":{"line":163,"column":46,"offset":6807}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":163,"column":46,"offset":6807},"end":{"line":163,"column":51,"offset":6812}}},{"type":"text","value":" object.","position":{"start":{"line":163,"column":51,"offset":6812},"end":{"line":163,"column":59,"offset":6820}}}],"position":{"start":{"line":162,"column":1,"offset":6729},"end":{"line":163,"column":59,"offset":6820}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Instance methods","position":{"start":{"line":165,"column":4,"offset":6825},"end":{"line":165,"column":20,"offset":6841}}}],"position":{"start":{"line":165,"column":1,"offset":6822},"end":{"line":165,"column":20,"offset":6841}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/clear"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.clear()"}],"position":{"start":{"line":167,"column":2,"offset":6844},"end":{"line":167,"column":25,"offset":6867}}}],"position":{"start":{"line":167,"column":1,"offset":6843},"end":{"line":167,"column":37,"offset":6879}}},{"type":"text","value":"\nRemoves all key-value pairs from the ","position":{"start":{"line":167,"column":37,"offset":6879},"end":{"line":168,"column":38,"offset":6917}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":168,"column":38,"offset":6917},"end":{"line":168,"column":43,"offset":6922}}},{"type":"text","value":" object.","position":{"start":{"line":168,"column":43,"offset":6922},"end":{"line":168,"column":51,"offset":6930}}}],"position":{"start":{"line":167,"column":1,"offset":6843},"end":{"line":168,"column":51,"offset":6930}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/delete"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.delete(key)"}],"position":{"start":{"line":170,"column":2,"offset":6933},"end":{"line":170,"column":29,"offset":6960}}}],"position":{"start":{"line":170,"column":1,"offset":6932},"end":{"line":170,"column":42,"offset":6973}}},{"type":"text","value":"\nReturns ","position":{"start":{"line":170,"column":42,"offset":6973},"end":{"line":171,"column":9,"offset":6982}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"true"}],"position":{"start":{"line":171,"column":9,"offset":6982},"end":{"line":171,"column":15,"offset":6988}}},{"type":"text","value":" if an element in the ","position":{"start":{"line":171,"column":15,"offset":6988},"end":{"line":171,"column":37,"offset":7010}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":171,"column":37,"offset":7010},"end":{"line":171,"column":42,"offset":7015}}},{"type":"text","value":" object existed and has been removed, or ","position":{"start":{"line":171,"column":42,"offset":7015},"end":{"line":171,"column":83,"offset":7056}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"false"}],"position":{"start":{"line":171,"column":83,"offset":7056},"end":{"line":171,"column":90,"offset":7063}}},{"type":"text","value":" if the element does not exist. ","position":{"start":{"line":171,"column":90,"offset":7063},"end":{"line":171,"column":122,"offset":7095}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.has(key)"}],"position":{"start":{"line":171,"column":122,"offset":7095},"end":{"line":171,"column":146,"offset":7119}}},{"type":"text","value":" will return ","position":{"start":{"line":171,"column":146,"offset":7119},"end":{"line":171,"column":159,"offset":7132}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"false"}],"position":{"start":{"line":171,"column":159,"offset":7132},"end":{"line":171,"column":166,"offset":7139}}},{"type":"text","value":" afterwards.","position":{"start":{"line":171,"column":166,"offset":7139},"end":{"line":171,"column":178,"offset":7151}}}],"position":{"start":{"line":170,"column":1,"offset":6932},"end":{"line":171,"column":178,"offset":7151}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/get"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.get(key)"}],"position":{"start":{"line":173,"column":2,"offset":7154},"end":{"line":173,"column":26,"offset":7178}}}],"position":{"start":{"line":173,"column":1,"offset":7153},"end":{"line":173,"column":36,"offset":7188}}},{"type":"text","value":"\nReturns the value associated to the ","position":{"start":{"line":173,"column":36,"offset":7188},"end":{"line":174,"column":37,"offset":7225}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":174,"column":37,"offset":7225},"end":{"line":174,"column":42,"offset":7230}}},{"type":"text","value":", or ","position":{"start":{"line":174,"column":42,"offset":7230},"end":{"line":174,"column":47,"offset":7235}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"undefined"}],"position":{"start":{"line":174,"column":47,"offset":7235},"end":{"line":174,"column":58,"offset":7246}}},{"type":"text","value":" if there is none.","position":{"start":{"line":174,"column":58,"offset":7246},"end":{"line":174,"column":76,"offset":7264}}}],"position":{"start":{"line":173,"column":1,"offset":7153},"end":{"line":174,"column":76,"offset":7264}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/has"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.has(key)"}],"position":{"start":{"line":176,"column":2,"offset":7267},"end":{"line":176,"column":26,"offset":7291}}}],"position":{"start":{"line":176,"column":1,"offset":7266},"end":{"line":176,"column":36,"offset":7301}}},{"type":"text","value":"\nReturns a boolean asserting whether a value has been associated to the ","position":{"start":{"line":176,"column":36,"offset":7301},"end":{"line":177,"column":72,"offset":7373}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":177,"column":72,"offset":7373},"end":{"line":177,"column":77,"offset":7378}}},{"type":"text","value":" in the ","position":{"start":{"line":177,"column":77,"offset":7378},"end":{"line":177,"column":85,"offset":7386}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":177,"column":85,"offset":7386},"end":{"line":177,"column":90,"offset":7391}}},{"type":"text","value":" object or not.","position":{"start":{"line":177,"column":90,"offset":7391},"end":{"line":177,"column":105,"offset":7406}}}],"position":{"start":{"line":176,"column":1,"offset":7266},"end":{"line":177,"column":105,"offset":7406}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/set"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.set(key, value)"}],"position":{"start":{"line":179,"column":2,"offset":7409},"end":{"line":179,"column":33,"offset":7440}}}],"position":{"start":{"line":179,"column":1,"offset":7408},"end":{"line":179,"column":43,"offset":7450}}},{"type":"text","value":"\nSets the ","position":{"start":{"line":179,"column":43,"offset":7450},"end":{"line":180,"column":10,"offset":7460}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"value"}],"position":{"start":{"line":180,"column":10,"offset":7460},"end":{"line":180,"column":17,"offset":7467}}},{"type":"text","value":" for the ","position":{"start":{"line":180,"column":17,"offset":7467},"end":{"line":180,"column":26,"offset":7476}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"key"}],"position":{"start":{"line":180,"column":26,"offset":7476},"end":{"line":180,"column":31,"offset":7481}}},{"type":"text","value":" in the ","position":{"start":{"line":180,"column":31,"offset":7481},"end":{"line":180,"column":39,"offset":7489}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":180,"column":39,"offset":7489},"end":{"line":180,"column":44,"offset":7494}}},{"type":"text","value":" object. Returns the ","position":{"start":{"line":180,"column":44,"offset":7494},"end":{"line":180,"column":65,"offset":7515}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":180,"column":65,"offset":7515},"end":{"line":180,"column":70,"offset":7520}}},{"type":"text","value":" object.","position":{"start":{"line":180,"column":70,"offset":7520},"end":{"line":180,"column":78,"offset":7528}}}],"position":{"start":{"line":179,"column":1,"offset":7408},"end":{"line":180,"column":78,"offset":7528}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iteration methods","position":{"start":{"line":182,"column":5,"offset":7534},"end":{"line":182,"column":22,"offset":7551}}}],"position":{"start":{"line":182,"column":1,"offset":7530},"end":{"line":182,"column":22,"offset":7551}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/@@iterator"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype[@@iterator]()"}],"position":{"start":{"line":184,"column":2,"offset":7554},"end":{"line":184,"column":31,"offset":7583}}}],"position":{"start":{"line":184,"column":1,"offset":7553},"end":{"line":184,"column":48,"offset":7600}}},{"type":"text","value":"\nReturns a new Iterator object that contains ","position":{"start":{"line":184,"column":48,"offset":7600},"end":{"line":185,"column":45,"offset":7645}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":185,"column":45,"offset":7645},"end":{"line":185,"column":59,"offset":7659}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":185,"column":59,"offset":7659},"end":{"line":185,"column":84,"offset":7684}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":185,"column":84,"offset":7684},"end":{"line":185,"column":89,"offset":7689}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":185,"column":89,"offset":7689},"end":{"line":185,"column":116,"offset":7716}}}],"position":{"start":{"line":184,"column":1,"offset":7553},"end":{"line":185,"column":116,"offset":7716}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/keys"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.keys()"}],"position":{"start":{"line":187,"column":2,"offset":7719},"end":{"line":187,"column":24,"offset":7741}}}],"position":{"start":{"line":187,"column":1,"offset":7718},"end":{"line":187,"column":35,"offset":7752}}},{"type":"text","value":"\nReturns a new Iterator object that contains the ","position":{"start":{"line":187,"column":35,"offset":7752},"end":{"line":188,"column":49,"offset":7801}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"keys","position":{"start":{"line":188,"column":51,"offset":7803},"end":{"line":188,"column":55,"offset":7807}}}],"position":{"start":{"line":188,"column":49,"offset":7801},"end":{"line":188,"column":57,"offset":7809}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":188,"column":57,"offset":7809},"end":{"line":188,"column":82,"offset":7834}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":188,"column":82,"offset":7834},"end":{"line":188,"column":87,"offset":7839}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":188,"column":87,"offset":7839},"end":{"line":188,"column":114,"offset":7866}}}],"position":{"start":{"line":187,"column":1,"offset":7718},"end":{"line":188,"column":114,"offset":7866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/values"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.values()"}],"position":{"start":{"line":190,"column":2,"offset":7869},"end":{"line":190,"column":26,"offset":7893}}}],"position":{"start":{"line":190,"column":1,"offset":7868},"end":{"line":190,"column":39,"offset":7906}}},{"type":"text","value":"\nReturns a new Iterator object that contains the ","position":{"start":{"line":190,"column":39,"offset":7906},"end":{"line":191,"column":49,"offset":7955}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"values","position":{"start":{"line":191,"column":51,"offset":7957},"end":{"line":191,"column":57,"offset":7963}}}],"position":{"start":{"line":191,"column":49,"offset":7955},"end":{"line":191,"column":59,"offset":7965}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":191,"column":59,"offset":7965},"end":{"line":191,"column":84,"offset":7990}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":191,"column":84,"offset":7990},"end":{"line":191,"column":89,"offset":7995}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":191,"column":89,"offset":7995},"end":{"line":191,"column":116,"offset":8022}}}],"position":{"start":{"line":190,"column":1,"offset":7868},"end":{"line":191,"column":116,"offset":8022}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/entries"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.entries()"}],"position":{"start":{"line":193,"column":2,"offset":8025},"end":{"line":193,"column":27,"offset":8050}}}],"position":{"start":{"line":193,"column":1,"offset":8024},"end":{"line":193,"column":41,"offset":8064}}},{"type":"text","value":"\nReturns a new Iterator object that contains ","position":{"start":{"line":193,"column":41,"offset":8064},"end":{"line":194,"column":45,"offset":8109}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"[key, value]"}],"position":{"start":{"line":194,"column":45,"offset":8109},"end":{"line":194,"column":59,"offset":8123}}},{"type":"text","value":" for each element in the ","position":{"start":{"line":194,"column":59,"offset":8123},"end":{"line":194,"column":84,"offset":8148}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":194,"column":84,"offset":8148},"end":{"line":194,"column":89,"offset":8153}}},{"type":"text","value":" object in insertion order.","position":{"start":{"line":194,"column":89,"offset":8153},"end":{"line":194,"column":116,"offset":8180}}}],"position":{"start":{"line":193,"column":1,"offset":8024},"end":{"line":194,"column":116,"offset":8180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"map/foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map.prototype.forEach(callbackFn[, thisArg])"}],"position":{"start":{"line":196,"column":2,"offset":8183},"end":{"line":196,"column":48,"offset":8229}}}],"position":{"start":{"line":196,"column":1,"offset":8182},"end":{"line":196,"column":62,"offset":8243}}},{"type":"text","value":"\nCalls ","position":{"start":{"line":196,"column":62,"offset":8243},"end":{"line":197,"column":7,"offset":8250}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"callbackFn"}],"position":{"start":{"line":197,"column":7,"offset":8250},"end":{"line":197,"column":19,"offset":8262}}},{"type":"text","value":" once for each key-value pair present in the ","position":{"start":{"line":197,"column":19,"offset":8262},"end":{"line":197,"column":64,"offset":8307}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":197,"column":64,"offset":8307},"end":{"line":197,"column":69,"offset":8312}}},{"type":"text","value":" object, in insertion order. If a ","position":{"start":{"line":197,"column":69,"offset":8312},"end":{"line":197,"column":103,"offset":8346}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"thisArg"}],"position":{"start":{"line":197,"column":103,"offset":8346},"end":{"line":197,"column":112,"offset":8355}}},{"type":"text","value":" parameter is provided to ","position":{"start":{"line":197,"column":112,"offset":8355},"end":{"line":197,"column":138,"offset":8381}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forEach"}],"position":{"start":{"line":197,"column":138,"offset":8381},"end":{"line":197,"column":147,"offset":8390}}},{"type":"text","value":", it will be used as the ","position":{"start":{"line":197,"column":147,"offset":8390},"end":{"line":197,"column":172,"offset":8415}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"this"}],"position":{"start":{"line":197,"column":172,"offset":8415},"end":{"line":197,"column":178,"offset":8421}}},{"type":"text","value":" value for each callback.","position":{"start":{"line":197,"column":178,"offset":8421},"end":{"line":197,"column":203,"offset":8446}}}],"position":{"start":{"line":196,"column":1,"offset":8182},"end":{"line":197,"column":203,"offset":8446}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Examples","position":{"start":{"line":199,"column":4,"offset":8451},"end":{"line":199,"column":12,"offset":8459}}}],"position":{"start":{"line":199,"column":1,"offset":8448},"end":{"line":199,"column":12,"offset":8459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Using the Map object","position":{"start":{"line":201,"column":5,"offset":8465},"end":{"line":201,"column":25,"offset":8485}}}],"position":{"start":{"line":201,"column":1,"offset":8461},"end":{"line":201,"column":25,"offset":8485}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\n\nlet keyString = 'a string'\nlet keyObj    = {}\nlet keyFunc   = function() {}\n\n// setting the values\nmyMap.set(keyString, \"value associated with 'a string'\")\nmyMap.set(keyObj, 'value associated with keyObj')\nmyMap.set(keyFunc, 'value associated with keyFunc')\n\nmyMap.size              // 3\n\n// getting the values\nmyMap.get(keyString)    // \"value associated with 'a string'\"\nmyMap.get(keyObj)       // \"value associated with keyObj\"\nmyMap.get(keyFunc)      // \"value associated with keyFunc\"\n\nmyMap.get('a string')    // \"value associated with 'a string'\"\n                         // because keyString === 'a string'\nmyMap.get({})            // undefined, because keyObj !== {}\nmyMap.get(function() {}) // undefined, because keyFunc !== function () {}\n"}],"position":{"start":{"line":203,"column":1,"offset":8487},"end":{"line":224,"column":78,"offset":9327}}}],"position":{"start":{"line":203,"column":1,"offset":8487},"end":{"line":224,"column":78,"offset":9327}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Using NaN as Map keys","position":{"start":{"line":226,"column":5,"offset":9333},"end":{"line":226,"column":26,"offset":9354}}}],"position":{"start":{"line":226,"column":1,"offset":9329},"end":{"line":226,"column":26,"offset":9354}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"a","properties":{"href":"nan"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":228,"column":2,"offset":9357},"end":{"line":228,"column":7,"offset":9362}}}],"position":{"start":{"line":228,"column":1,"offset":9356},"end":{"line":228,"column":13,"offset":9368}}},{"type":"text","value":" can also be used as a key. Even though every ","position":{"start":{"line":228,"column":13,"offset":9368},"end":{"line":228,"column":59,"offset":9414}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":228,"column":59,"offset":9414},"end":{"line":228,"column":64,"offset":9419}}},{"type":"text","value":" is not equal to itself (","position":{"start":{"line":228,"column":64,"offset":9419},"end":{"line":228,"column":89,"offset":9444}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN !== NaN"}],"position":{"start":{"line":228,"column":89,"offset":9444},"end":{"line":228,"column":102,"offset":9457}}},{"type":"text","value":" is true), the following example works because ","position":{"start":{"line":228,"column":102,"offset":9457},"end":{"line":228,"column":149,"offset":9504}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"NaN"}],"position":{"start":{"line":228,"column":149,"offset":9504},"end":{"line":228,"column":154,"offset":9509}}},{"type":"text","value":"s are indistinguishable from each other:","position":{"start":{"line":228,"column":154,"offset":9509},"end":{"line":228,"column":194,"offset":9549}}}],"position":{"start":{"line":228,"column":1,"offset":9356},"end":{"line":228,"column":194,"offset":9549}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\nmyMap.set(NaN, 'not a number')\n\nmyMap.get(NaN)\n// \"not a number\"\n\nlet otherNaN = Number('foo')\nmyMap.get(otherNaN)\n// \"not a number\"\n"}],"position":{"start":{"line":230,"column":1,"offset":9551},"end":{"line":238,"column":22,"offset":9733}}}],"position":{"start":{"line":230,"column":1,"offset":9551},"end":{"line":238,"column":22,"offset":9733}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterating Map with for..of","position":{"start":{"line":240,"column":5,"offset":9739},"end":{"line":240,"column":31,"offset":9765}}}],"position":{"start":{"line":240,"column":1,"offset":9735},"end":{"line":240,"column":31,"offset":9765}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be iterated using a ","position":{"start":{"line":242,"column":1,"offset":9767},"end":{"line":242,"column":30,"offset":9796}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"for..of"}],"position":{"start":{"line":242,"column":30,"offset":9796},"end":{"line":242,"column":39,"offset":9805}}},{"type":"text","value":" loop:","position":{"start":{"line":242,"column":39,"offset":9805},"end":{"line":242,"column":45,"offset":9811}}}],"position":{"start":{"line":242,"column":1,"offset":9767},"end":{"line":242,"column":45,"offset":9811}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let myMap = new Map()\nmyMap.set(0, 'zero')\nmyMap.set(1, 'one')\n\nfor (let [key, value] of myMap) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n\nfor (let key of myMap.keys()) {\n  console.log(key)\n}\n// 0\n// 1\n\nfor (let value of myMap.values()) {\n  console.log(value)\n}\n// zero\n// one\n\nfor (let [key, value] of myMap.entries()) {\n  console.log(key + ' = ' + value)\n}\n// 0 = zero\n// 1 = one\n"}],"position":{"start":{"line":244,"column":1,"offset":9813},"end":{"line":270,"column":15,"offset":10306}}}],"position":{"start":{"line":244,"column":1,"offset":9813},"end":{"line":270,"column":15,"offset":10306}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Iterating Map with forEach()","position":{"start":{"line":272,"column":5,"offset":10312},"end":{"line":272,"column":33,"offset":10340}}}],"position":{"start":{"line":272,"column":1,"offset":10308},"end":{"line":272,"column":33,"offset":10340}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be iterated using the ","position":{"start":{"line":274,"column":1,"offset":10342},"end":{"line":274,"column":32,"offset":10373}}},{"type":"element","tagName":"a","properties":{"href":"map/foreach"},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"forEach()"}],"position":{"start":{"line":274,"column":33,"offset":10374},"end":{"line":274,"column":44,"offset":10385}}}],"position":{"start":{"line":274,"column":32,"offset":10373},"end":{"line":274,"column":58,"offset":10399}}},{"type":"text","value":" method:","position":{"start":{"line":274,"column":58,"offset":10399},"end":{"line":274,"column":66,"offset":10407}}}],"position":{"start":{"line":274,"column":1,"offset":10342},"end":{"line":274,"column":66,"offset":10407}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"myMap.forEach(function(value, key) {\n  console.log(key + ' = ' + value)\n})\n// 0 = zero\n// 1 = one\n"}],"position":{"start":{"line":276,"column":1,"offset":10409},"end":{"line":280,"column":15,"offset":10526}}}],"position":{"start":{"line":276,"column":1,"offset":10409},"end":{"line":280,"column":15,"offset":10526}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Relation with Array objects","position":{"start":{"line":282,"column":5,"offset":10532},"end":{"line":282,"column":32,"offset":10559}}}],"position":{"start":{"line":282,"column":1,"offset":10528},"end":{"line":282,"column":32,"offset":10559}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let kvArray = [['key1', 'value1'], ['key2', 'value2']]\n\n// Use the regular Map constructor to transform a 2D key-value Array into a map\nlet myMap = new Map(kvArray)\n\nmyMap.get('key1') // returns \"value1\"\n\n// Use Array.from() to transform a map into a 2D key-value Array\nconsole.log(Array.from(myMap)) // Will show you exactly the same Array as kvArray\n\n// A succinct way to do the same, using the spread syntax\nconsole.log([...myMap])\n\n// Or use the keys() or values() iterators, and convert them to an array\nconsole.log(Array.from(myMap.keys())) // [\"key1\", \"key2\"]\n"}],"position":{"start":{"line":284,"column":1,"offset":10561},"end":{"line":298,"column":62,"offset":11167}}}],"position":{"start":{"line":284,"column":1,"offset":10561},"end":{"line":298,"column":62,"offset":11167}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Cloning and merging Maps","position":{"start":{"line":300,"column":5,"offset":11173},"end":{"line":300,"column":29,"offset":11197}}}],"position":{"start":{"line":300,"column":1,"offset":11169},"end":{"line":300,"column":29,"offset":11197}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Just like ","position":{"start":{"line":302,"column":1,"offset":11199},"end":{"line":302,"column":11,"offset":11209}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Array"}],"position":{"start":{"line":302,"column":11,"offset":11209},"end":{"line":302,"column":18,"offset":11216}}},{"type":"text","value":"s, ","position":{"start":{"line":302,"column":18,"offset":11216},"end":{"line":302,"column":21,"offset":11219}}},{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"Map"}],"position":{"start":{"line":302,"column":21,"offset":11219},"end":{"line":302,"column":26,"offset":11224}}},{"type":"text","value":"s can be cloned:","position":{"start":{"line":302,"column":26,"offset":11224},"end":{"line":302,"column":42,"offset":11240}}}],"position":{"start":{"line":302,"column":1,"offset":11199},"end":{"line":302,"column":42,"offset":11240}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let original = new Map([\n  [1, 'one']\n])\n\nlet clone = new Map(original)\n\nconsole.log(clone.get(1))       // one\nconsole.log(original === clone) // false (useful for shallow comparison)\n"}],"position":{"start":{"line":304,"column":1,"offset":11242},"end":{"line":311,"column":77,"offset":11450}}}],"position":{"start":{"line":304,"column":1,"offset":11242},"end":{"line":311,"column":77,"offset":11450}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"Note:","position":{"start":{"line":313,"column":3,"offset":11454},"end":{"line":313,"column":8,"offset":11459}}}],"position":{"start":{"line":313,"column":1,"offset":11452},"end":{"line":313,"column":10,"offset":11461}}},{"type":"text","value":" Keep in mind that ","position":{"start":{"line":313,"column":10,"offset":11461},"end":{"line":313,"column":29,"offset":11480}}},{"type":"element","tagName":"em","properties":{},"children":[{"type":"text","value":"the data itself","position":{"start":{"line":313,"column":30,"offset":11481},"end":{"line":313,"column":45,"offset":11496}}}],"position":{"start":{"line":313,"column":29,"offset":11480},"end":{"line":313,"column":46,"offset":11497}}},{"type":"text","value":" is not cloned.","position":{"start":{"line":313,"column":46,"offset":11497},"end":{"line":313,"column":61,"offset":11512}}}],"position":{"start":{"line":313,"column":1,"offset":11452},"end":{"line":313,"column":61,"offset":11512}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be merged, maintaining key uniqueness:","position":{"start":{"line":315,"column":1,"offset":11514},"end":{"line":315,"column":48,"offset":11561}}}],"position":{"start":{"line":315,"column":1,"offset":11514},"end":{"line":315,"column":48,"offset":11561}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge two maps. The last repeated key wins.\n// Spread operator essentially converts a Map to an Array\nlet merged = new Map([...first, ...second])\n\nconsole.log(merged.get(1)) // uno\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n"}],"position":{"start":{"line":317,"column":1,"offset":11563},"end":{"line":334,"column":40,"offset":12000}}}],"position":{"start":{"line":317,"column":1,"offset":11563},"end":{"line":334,"column":40,"offset":12000}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"Maps can be merged with Arrays, too:","position":{"start":{"line":336,"column":1,"offset":12002},"end":{"line":336,"column":37,"offset":12038}}}],"position":{"start":{"line":336,"column":1,"offset":12002},"end":{"line":336,"column":37,"offset":12038}}},{"type":"text","value":"\n"},{"type":"element","tagName":"pre","properties":{},"children":[{"type":"element","tagName":"code","properties":{},"children":[{"type":"text","value":"let first = new Map([\n  [1, 'one'],\n  [2, 'two'],\n  [3, 'three'],\n])\n\nlet second = new Map([\n  [1, 'uno'],\n  [2, 'dos']\n])\n\n// Merge maps with an array. The last repeated key wins.\nlet merged = new Map([...first, ...second, [1, 'eins']])\n\nconsole.log(merged.get(1)) // eins\nconsole.log(merged.get(2)) // dos\nconsole.log(merged.get(3)) // three\n"}],"position":{"start":{"line":338,"column":1,"offset":12040},"end":{"line":354,"column":40,"offset":12439}}}],"position":{"start":{"line":338,"column":1,"offset":12040},"end":{"line":354,"column":40,"offset":12439}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":355,"column":1,"offset":12440}}}}