{"expireTime":9007200914465207000,"key":"transformer-remark-markdown-ast-500d7bf7433e649a157f5365428e65ae--","val":{"type":"root","children":[{"type":"heading","depth":1,"children":[{"type":"text","value":"Arrow function expressions","position":{"start":{"line":3,"column":3,"offset":4},"end":{"line":3,"column":29,"offset":30},"indent":[]}}],"position":{"start":{"line":3,"column":1,"offset":2},"end":{"line":3,"column":29,"offset":30},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An ","position":{"start":{"line":5,"column":1,"offset":32},"end":{"line":5,"column":4,"offset":35},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"arrow function expression","position":{"start":{"line":5,"column":6,"offset":37},"end":{"line":5,"column":31,"offset":62},"indent":[]}}],"position":{"start":{"line":5,"column":4,"offset":35},"end":{"line":5,"column":33,"offset":64},"indent":[]}},{"type":"text","value":" is a compact alternative to a traditional ","position":{"start":{"line":5,"column":33,"offset":64},"end":{"line":5,"column":76,"offset":107},"indent":[]}},{"type":"link","title":null,"url":"../operators/function","children":[{"type":"text","value":"function expression","position":{"start":{"line":5,"column":77,"offset":108},"end":{"line":5,"column":96,"offset":127},"indent":[]}}],"position":{"start":{"line":5,"column":76,"offset":107},"end":{"line":5,"column":120,"offset":151},"indent":[]}},{"type":"text","value":", but is limited and can't be used in all situations.","position":{"start":{"line":5,"column":120,"offset":151},"end":{"line":5,"column":173,"offset":204},"indent":[]}}],"position":{"start":{"line":5,"column":1,"offset":32},"end":{"line":5,"column":173,"offset":204},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Differences & Limitations:","position":{"start":{"line":7,"column":3,"offset":208},"end":{"line":7,"column":29,"offset":234},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":206},"end":{"line":7,"column":31,"offset":236},"indent":[]}}],"position":{"start":{"line":7,"column":1,"offset":206},"end":{"line":7,"column":31,"offset":236},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Does not have its own bindings to ","position":{"start":{"line":9,"column":3,"offset":240},"end":{"line":9,"column":37,"offset":274},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":9,"column":37,"offset":274},"end":{"line":9,"column":43,"offset":280},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":9,"column":43,"offset":280},"end":{"line":9,"column":47,"offset":284},"indent":[]}},{"type":"inlineCode","value":"super","position":{"start":{"line":9,"column":47,"offset":284},"end":{"line":9,"column":54,"offset":291},"indent":[]}},{"type":"text","value":", and should not be used as ","position":{"start":{"line":9,"column":54,"offset":291},"end":{"line":9,"column":82,"offset":319},"indent":[]}},{"type":"inlineCode","value":"methods","position":{"start":{"line":9,"column":82,"offset":319},"end":{"line":9,"column":91,"offset":328},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":9,"column":91,"offset":328},"end":{"line":9,"column":92,"offset":329},"indent":[]}}],"position":{"start":{"line":9,"column":3,"offset":240},"end":{"line":9,"column":92,"offset":329},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":238},"end":{"line":9,"column":92,"offset":329},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Does not have ","position":{"start":{"line":10,"column":3,"offset":332},"end":{"line":10,"column":17,"offset":346},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":10,"column":17,"offset":346},"end":{"line":10,"column":28,"offset":357},"indent":[]}},{"type":"text","value":", or ","position":{"start":{"line":10,"column":28,"offset":357},"end":{"line":10,"column":33,"offset":362},"indent":[]}},{"type":"inlineCode","value":"new.target","position":{"start":{"line":10,"column":33,"offset":362},"end":{"line":10,"column":45,"offset":374},"indent":[]}},{"type":"text","value":" keywords.","position":{"start":{"line":10,"column":45,"offset":374},"end":{"line":10,"column":55,"offset":384},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":332},"end":{"line":10,"column":55,"offset":384},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":330},"end":{"line":10,"column":55,"offset":384},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Not suitable for ","position":{"start":{"line":11,"column":3,"offset":387},"end":{"line":11,"column":20,"offset":404},"indent":[]}},{"type":"inlineCode","value":"call","position":{"start":{"line":11,"column":20,"offset":404},"end":{"line":11,"column":26,"offset":410},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":11,"column":26,"offset":410},"end":{"line":11,"column":28,"offset":412},"indent":[]}},{"type":"inlineCode","value":"apply","position":{"start":{"line":11,"column":28,"offset":412},"end":{"line":11,"column":35,"offset":419},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":11,"column":35,"offset":419},"end":{"line":11,"column":40,"offset":424},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/function/bind","children":[{"type":"inlineCode","value":"bind","position":{"start":{"line":11,"column":41,"offset":425},"end":{"line":11,"column":47,"offset":431},"indent":[]}}],"position":{"start":{"line":11,"column":40,"offset":424},"end":{"line":11,"column":81,"offset":465},"indent":[]}},{"type":"text","value":" methods, which generally rely on establishing a ","position":{"start":{"line":11,"column":81,"offset":465},"end":{"line":11,"column":130,"offset":514},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Scope","children":[{"type":"text","value":"scope","position":{"start":{"line":11,"column":131,"offset":515},"end":{"line":11,"column":136,"offset":520},"indent":[]}}],"position":{"start":{"line":11,"column":130,"offset":514},"end":{"line":11,"column":194,"offset":578},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":11,"column":194,"offset":578},"end":{"line":11,"column":195,"offset":579},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":387},"end":{"line":11,"column":195,"offset":579},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":385},"end":{"line":11,"column":195,"offset":579},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can not be used as ","position":{"start":{"line":12,"column":3,"offset":582},"end":{"line":12,"column":22,"offset":601},"indent":[]}},{"type":"link","title":null,"url":"https://developer.mozilla.org/en-US/docs/Glossary/Constructor","children":[{"type":"text","value":"constructors","position":{"start":{"line":12,"column":23,"offset":602},"end":{"line":12,"column":35,"offset":614},"indent":[]}}],"position":{"start":{"line":12,"column":22,"offset":601},"end":{"line":12,"column":99,"offset":678},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":12,"column":99,"offset":678},"end":{"line":12,"column":100,"offset":679},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":582},"end":{"line":12,"column":100,"offset":679},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":580},"end":{"line":12,"column":100,"offset":679},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Can not use ","position":{"start":{"line":13,"column":3,"offset":682},"end":{"line":13,"column":15,"offset":694},"indent":[]}},{"type":"inlineCode","value":"yield","position":{"start":{"line":13,"column":15,"offset":694},"end":{"line":13,"column":22,"offset":701},"indent":[]}},{"type":"text","value":", within its body.","position":{"start":{"line":13,"column":22,"offset":701},"end":{"line":13,"column":40,"offset":719},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":682},"end":{"line":13,"column":40,"offset":719},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":680},"end":{"line":13,"column":40,"offset":719},"indent":[]}}],"position":{"start":{"line":9,"column":1,"offset":238},"end":{"line":13,"column":40,"offset":719},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Comparing traditional functions to arrow functions","position":{"start":{"line":15,"column":5,"offset":725},"end":{"line":15,"column":55,"offset":775},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":721},"end":{"line":15,"column":55,"offset":775},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Let's decompose a \"traditional function\" down to the simplest \"arrow function\" step-by-step:\nNOTE: Each step along the way is a valid \"arrow function\"","position":{"start":{"line":17,"column":1,"offset":777},"end":{"line":18,"column":58,"offset":927},"indent":[1]}}],"position":{"start":{"line":17,"column":1,"offset":777},"end":{"line":18,"column":58,"offset":927},"indent":[1]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction (a){\n  return a + 100;\n}\n\n// Arrow Function Break Down\n\n// 1. Remove the word \"function\" and place arrow between the argument and opening body bracket\n(a) => {\n  return a + 100;\n}\n\n// 2. Remove the body brackets and word \"return\" -- the return is implied.\n(a) => a + 100;\n\n// 3. Remove the argument parentheses\na => a + 100;","position":{"start":{"line":20,"column":1,"offset":929},"end":{"line":36,"column":18,"offset":1338},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Note:","position":{"start":{"line":38,"column":3,"offset":1342},"end":{"line":38,"column":8,"offset":1347},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1340},"end":{"line":38,"column":10,"offset":1349},"indent":[]}},{"type":"text","value":" As shown above, the { brackets } and ( parentheses ) and \"return\" are optional, but may be required.","position":{"start":{"line":38,"column":10,"offset":1349},"end":{"line":38,"column":111,"offset":1450},"indent":[]}}],"position":{"start":{"line":38,"column":1,"offset":1340},"end":{"line":38,"column":111,"offset":1450},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example, if you have ","position":{"start":{"line":40,"column":1,"offset":1452},"end":{"line":40,"column":26,"offset":1477},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"multiple arguments","position":{"start":{"line":40,"column":28,"offset":1479},"end":{"line":40,"column":46,"offset":1497},"indent":[]}}],"position":{"start":{"line":40,"column":26,"offset":1477},"end":{"line":40,"column":48,"offset":1499},"indent":[]}},{"type":"text","value":" or ","position":{"start":{"line":40,"column":48,"offset":1499},"end":{"line":40,"column":52,"offset":1503},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"no arguments","position":{"start":{"line":40,"column":54,"offset":1505},"end":{"line":40,"column":66,"offset":1517},"indent":[]}}],"position":{"start":{"line":40,"column":52,"offset":1503},"end":{"line":40,"column":68,"offset":1519},"indent":[]}},{"type":"text","value":", you'll need to re-introduce parentheses around the arguments:","position":{"start":{"line":40,"column":68,"offset":1519},"end":{"line":40,"column":131,"offset":1582},"indent":[]}}],"position":{"start":{"line":40,"column":1,"offset":1452},"end":{"line":40,"column":131,"offset":1582},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction (a, b){\n  return a + b + 100;\n}\n\n// Arrow Function\n(a, b) => a + b + 100;\n\n// Traditional Function (no arguments)\nlet a = 4;\nlet b = 2;\nfunction (){\n  return a + b + 100;\n}\n\n// Arrow Function (no arguments)\nlet a = 4;\nlet b = 2;\n() => a + b + 100;","position":{"start":{"line":42,"column":1,"offset":1584},"end":{"line":60,"column":23,"offset":1928},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Likewise, if the body requires ","position":{"start":{"line":62,"column":1,"offset":1930},"end":{"line":62,"column":32,"offset":1961},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"additional lines","position":{"start":{"line":62,"column":34,"offset":1963},"end":{"line":62,"column":50,"offset":1979},"indent":[]}}],"position":{"start":{"line":62,"column":32,"offset":1961},"end":{"line":62,"column":52,"offset":1981},"indent":[]}},{"type":"text","value":" of processing, you'll need to re-introduce brackets ","position":{"start":{"line":62,"column":52,"offset":1981},"end":{"line":62,"column":105,"offset":2034},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"PLUS the \"return\"","position":{"start":{"line":62,"column":107,"offset":2036},"end":{"line":62,"column":124,"offset":2053},"indent":[]}}],"position":{"start":{"line":62,"column":105,"offset":2034},"end":{"line":62,"column":126,"offset":2055},"indent":[]}},{"type":"text","value":" (arrow functions do not magically guess what or when you want to \"return\"):","position":{"start":{"line":62,"column":126,"offset":2055},"end":{"line":62,"column":202,"offset":2131},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1930},"end":{"line":62,"column":202,"offset":2131},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction (a, b){\n  let chuck = 42;\n  return a + b + chuck;\n}\n\n// Arrow Function\n(a, b) => {\n  let chuck = 42;\n  return a + b + chuck;\n}","position":{"start":{"line":64,"column":1,"offset":2133},"end":{"line":74,"column":6,"offset":2332},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"And finally, for ","position":{"start":{"line":76,"column":1,"offset":2334},"end":{"line":76,"column":18,"offset":2351},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"named functions","position":{"start":{"line":76,"column":20,"offset":2353},"end":{"line":76,"column":35,"offset":2368},"indent":[]}}],"position":{"start":{"line":76,"column":18,"offset":2351},"end":{"line":76,"column":37,"offset":2370},"indent":[]}},{"type":"text","value":" we treat arrow expressions like variables","position":{"start":{"line":76,"column":37,"offset":2370},"end":{"line":76,"column":79,"offset":2412},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2334},"end":{"line":76,"column":79,"offset":2412},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// Traditional Function\nfunction bob (a){\n  return a + 100;\n}\n\n// Arrow Function\nlet bob = a => a + 100;","position":{"start":{"line":78,"column":1,"offset":2414},"end":{"line":84,"column":28,"offset":2542},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Syntax","position":{"start":{"line":86,"column":4,"offset":2547},"end":{"line":86,"column":10,"offset":2553},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2544},"end":{"line":86,"column":10,"offset":2553},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Basic syntax","position":{"start":{"line":88,"column":5,"offset":2559},"end":{"line":88,"column":17,"offset":2571},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2555},"end":{"line":88,"column":17,"offset":2571},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"One param. With simple expression return is not needed:","position":{"start":{"line":90,"column":1,"offset":2573},"end":{"line":90,"column":56,"offset":2628},"indent":[]}}],"position":{"start":{"line":90,"column":1,"offset":2573},"end":{"line":90,"column":56,"offset":2628},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"param => expression","position":{"start":{"line":92,"column":1,"offset":2630},"end":{"line":92,"column":24,"offset":2653},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Multiple params require parentheses. With simple expression return is not needed:","position":{"start":{"line":94,"column":1,"offset":2655},"end":{"line":94,"column":82,"offset":2736},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":2655},"end":{"line":94,"column":82,"offset":2736},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(param1, paramN) => expression","position":{"start":{"line":96,"column":1,"offset":2738},"end":{"line":96,"column":35,"offset":2772},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Multiline statements require body brackets and return:","position":{"start":{"line":98,"column":1,"offset":2774},"end":{"line":98,"column":55,"offset":2828},"indent":[]}}],"position":{"start":{"line":98,"column":1,"offset":2774},"end":{"line":98,"column":55,"offset":2828},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"param => {\n  let a = 1;\n  return a + param;\n}","position":{"start":{"line":100,"column":1,"offset":2830},"end":{"line":103,"column":6,"offset":2891},"indent":[1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Multiple params require parentheses. Multiline statements require body brackets and return:","position":{"start":{"line":105,"column":1,"offset":2893},"end":{"line":105,"column":92,"offset":2984},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":2893},"end":{"line":105,"column":92,"offset":2984},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(param1, paramN) => {\n   let a = 1;\n   return a + param1 + paramN;\n}","position":{"start":{"line":107,"column":1,"offset":2986},"end":{"line":110,"column":6,"offset":3070},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Advanced syntax","position":{"start":{"line":112,"column":5,"offset":3076},"end":{"line":112,"column":20,"offset":3091},"indent":[]}}],"position":{"start":{"line":112,"column":1,"offset":3072},"end":{"line":112,"column":20,"offset":3091},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"To return an object literal expression requires parentheses around expression:","position":{"start":{"line":114,"column":1,"offset":3093},"end":{"line":114,"column":79,"offset":3171},"indent":[]}}],"position":{"start":{"line":114,"column":1,"offset":3093},"end":{"line":114,"column":79,"offset":3171},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"params => ({foo: \"a\"}) // returning the object {foo: \"a\"}","position":{"start":{"line":116,"column":1,"offset":3173},"end":{"line":116,"column":62,"offset":3234},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"rest_parameters","children":[{"type":"text","value":"Rest parameters","position":{"start":{"line":118,"column":2,"offset":3237},"end":{"line":118,"column":17,"offset":3252},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":3236},"end":{"line":118,"column":35,"offset":3270},"indent":[]}},{"type":"text","value":" are supported:","position":{"start":{"line":118,"column":35,"offset":3270},"end":{"line":118,"column":50,"offset":3285},"indent":[]}}],"position":{"start":{"line":118,"column":1,"offset":3236},"end":{"line":118,"column":50,"offset":3285},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(a, b, ...r) => expression","position":{"start":{"line":120,"column":1,"offset":3287},"end":{"line":120,"column":31,"offset":3317},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"default_parameters","children":[{"type":"text","value":"Default parameters","position":{"start":{"line":122,"column":2,"offset":3320},"end":{"line":122,"column":20,"offset":3338},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3319},"end":{"line":122,"column":41,"offset":3359},"indent":[]}},{"type":"text","value":" are supported:","position":{"start":{"line":122,"column":41,"offset":3359},"end":{"line":122,"column":56,"offset":3374},"indent":[]}}],"position":{"start":{"line":122,"column":1,"offset":3319},"end":{"line":122,"column":56,"offset":3374},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"(a=400, b=20, c) => expression","position":{"start":{"line":124,"column":1,"offset":3376},"end":{"line":124,"column":35,"offset":3410},"indent":[]}},{"type":"paragraph","children":[{"type":"link","title":null,"url":"../operators/destructuring_assignment","children":[{"type":"text","value":"Destructuring","position":{"start":{"line":126,"column":2,"offset":3413},"end":{"line":126,"column":15,"offset":3426},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3412},"end":{"line":126,"column":55,"offset":3466},"indent":[]}},{"type":"text","value":" within params supported:","position":{"start":{"line":126,"column":55,"offset":3466},"end":{"line":126,"column":80,"offset":3491},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":3412},"end":{"line":126,"column":80,"offset":3491},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"([a, b] = [10, 20]) => a + b;  // result is 30\n({ a, b } = { a: 10, b: 20 }) => a + b; // result is 30","position":{"start":{"line":128,"column":1,"offset":3493},"end":{"line":129,"column":60,"offset":3603},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Description","position":{"start":{"line":131,"column":4,"offset":3608},"end":{"line":131,"column":15,"offset":3619},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":3605},"end":{"line":131,"column":15,"offset":3619},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Arrow functions used as methods","position":{"start":{"line":133,"column":5,"offset":3625},"end":{"line":133,"column":36,"offset":3656},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":3621},"end":{"line":133,"column":36,"offset":3656},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"As stated previously, arrow function expressions are best suited for non-method functions. Let's see what happens when we try to use them as methods:","position":{"start":{"line":135,"column":1,"offset":3658},"end":{"line":135,"column":150,"offset":3807},"indent":[]}}],"position":{"start":{"line":135,"column":1,"offset":3658},"end":{"line":135,"column":150,"offset":3807},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"'use strict';\n\nvar obj = { // does not create a new scope\n  i: 10,\n  b: () => console.log(this.i, this),\n  c: function() {\n    console.log(this.i, this);\n  }\n}\n\nobj.b(); // prints undefined, Window {...} (or the global object)\nobj.c(); // prints 10, Object {...}","position":{"start":{"line":137,"column":1,"offset":3809},"end":{"line":148,"column":40,"offset":4111},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions do not have their own ","position":{"start":{"line":150,"column":1,"offset":4113},"end":{"line":150,"column":39,"offset":4151},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":150,"column":39,"offset":4151},"end":{"line":150,"column":45,"offset":4157},"indent":[]}},{"type":"text","value":". Another example involving ","position":{"start":{"line":150,"column":45,"offset":4157},"end":{"line":150,"column":73,"offset":4185},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/object/defineproperty","children":[{"type":"inlineCode","value":"Object.defineProperty()","position":{"start":{"line":150,"column":74,"offset":4186},"end":{"line":150,"column":99,"offset":4211},"indent":[]}}],"position":{"start":{"line":150,"column":73,"offset":4185},"end":{"line":150,"column":141,"offset":4253},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":150,"column":141,"offset":4253},"end":{"line":150,"column":142,"offset":4254},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":4113},"end":{"line":150,"column":142,"offset":4254},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"'use strict';\n\nvar obj = {\n  a: 10\n};\n\nObject.defineProperty(obj, 'b', {\n  get: () => {\n    console.log(this.a, typeof this.a, this); // undefined 'undefined' Window {...} (or the global object)\n    return this.a + 10; // represents global object 'Window', therefore 'this.a' returns 'undefined'\n  }\n});","position":{"start":{"line":152,"column":1,"offset":4256},"end":{"line":163,"column":8,"offset":4599},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"call, apply and bind","position":{"start":{"line":165,"column":5,"offset":4605},"end":{"line":165,"column":25,"offset":4625},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":4601},"end":{"line":165,"column":25,"offset":4625},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":167,"column":1,"offset":4627},"end":{"line":167,"column":5,"offset":4631},"indent":[]}},{"type":"inlineCode","value":"call","position":{"start":{"line":167,"column":5,"offset":4631},"end":{"line":167,"column":11,"offset":4637},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":167,"column":11,"offset":4637},"end":{"line":167,"column":13,"offset":4639},"indent":[]}},{"type":"inlineCode","value":"apply","position":{"start":{"line":167,"column":13,"offset":4639},"end":{"line":167,"column":20,"offset":4646},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":167,"column":20,"offset":4646},"end":{"line":167,"column":25,"offset":4651},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/function/bind","children":[{"type":"inlineCode","value":"bind","position":{"start":{"line":167,"column":26,"offset":4652},"end":{"line":167,"column":32,"offset":4658},"indent":[]}}],"position":{"start":{"line":167,"column":25,"offset":4651},"end":{"line":167,"column":66,"offset":4692},"indent":[]}},{"type":"text","value":" methods are ","position":{"start":{"line":167,"column":66,"offset":4692},"end":{"line":167,"column":79,"offset":4705},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"NOT suitable","position":{"start":{"line":167,"column":81,"offset":4707},"end":{"line":167,"column":93,"offset":4719},"indent":[]}}],"position":{"start":{"line":167,"column":79,"offset":4705},"end":{"line":167,"column":95,"offset":4721},"indent":[]}},{"type":"text","value":" for Arrow functions -- as they were designed to allow methods to execute within different scopes -- because ","position":{"start":{"line":167,"column":95,"offset":4721},"end":{"line":167,"column":204,"offset":4830},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"Arrow functions establish \"this\" based on the scope the Arrow function is defined within.","position":{"start":{"line":167,"column":206,"offset":4832},"end":{"line":167,"column":295,"offset":4921},"indent":[]}}],"position":{"start":{"line":167,"column":204,"offset":4830},"end":{"line":167,"column":297,"offset":4923},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":4627},"end":{"line":167,"column":297,"offset":4923},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"For example ","position":{"start":{"line":169,"column":1,"offset":4925},"end":{"line":169,"column":13,"offset":4937},"indent":[]}},{"type":"inlineCode","value":"call","position":{"start":{"line":169,"column":13,"offset":4937},"end":{"line":169,"column":19,"offset":4943},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":169,"column":19,"offset":4943},"end":{"line":169,"column":21,"offset":4945},"indent":[]}},{"type":"inlineCode","value":"apply","position":{"start":{"line":169,"column":21,"offset":4945},"end":{"line":169,"column":28,"offset":4952},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":169,"column":28,"offset":4952},"end":{"line":169,"column":33,"offset":4957},"indent":[]}},{"type":"link","title":null,"url":"../global_objects/function/bind","children":[{"type":"inlineCode","value":"bind","position":{"start":{"line":169,"column":34,"offset":4958},"end":{"line":169,"column":40,"offset":4964},"indent":[]}}],"position":{"start":{"line":169,"column":33,"offset":4957},"end":{"line":169,"column":74,"offset":4998},"indent":[]}},{"type":"text","value":" work as expected with Traditional functions, because we establish the scope for each of the methods:","position":{"start":{"line":169,"column":74,"offset":4998},"end":{"line":169,"column":175,"offset":5099},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":4925},"end":{"line":169,"column":175,"offset":5099},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// ----------------------\n// Traditional Example\n// ----------------------\n// A simplistic object with its very own \"this\".\nvar obj = {\n    num: 100\n}\n\n// Setting \"num\" on window to show how it is NOT used.\nwindow.num = 2020; // yikes!\n\n// A simple traditional function to operate on \"this\"\nvar add = function (a, b, c) {\n  return this.num + a + b + c;\n}\n\n// call\nvar result = add.call(obj, 1, 2, 3) // establishing the scope as \"obj\"\nconsole.log(result) // result 106\n\n// apply\nconst arr = [1, 2, 3]\nvar result = add.apply(obj, arr) // establishing the scope as \"obj\"\nconsole.log(result) // result 106\n\n// bind\nvar result = add.bind(obj) // establishing the scope as \"obj\"\nconsole.log(result(1, 2, 3)) // result 106","position":{"start":{"line":171,"column":1,"offset":5101},"end":{"line":198,"column":47,"offset":5909},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"With Arrow functions, since our ","position":{"start":{"line":200,"column":1,"offset":5911},"end":{"line":200,"column":33,"offset":5943},"indent":[]}},{"type":"inlineCode","value":"add","position":{"start":{"line":200,"column":33,"offset":5943},"end":{"line":200,"column":38,"offset":5948},"indent":[]}},{"type":"text","value":" function is essentially created on the ","position":{"start":{"line":200,"column":38,"offset":5948},"end":{"line":200,"column":78,"offset":5988},"indent":[]}},{"type":"inlineCode","value":"window","position":{"start":{"line":200,"column":78,"offset":5988},"end":{"line":200,"column":86,"offset":5996},"indent":[]}},{"type":"text","value":" (global) scope, it will assume ","position":{"start":{"line":200,"column":86,"offset":5996},"end":{"line":200,"column":118,"offset":6028},"indent":[]}},{"type":"inlineCode","value":"this","position":{"start":{"line":200,"column":118,"offset":6028},"end":{"line":200,"column":124,"offset":6034},"indent":[]}},{"type":"text","value":" is the window.","position":{"start":{"line":200,"column":124,"offset":6034},"end":{"line":200,"column":139,"offset":6049},"indent":[]}}],"position":{"start":{"line":200,"column":1,"offset":5911},"end":{"line":200,"column":139,"offset":6049},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"// ----------------------\n// Arrow Example\n// ----------------------\n\n// A simplistic object with its very own \"this\".\nvar obj = {\n    num: 100\n}\n\n// Setting \"num\" on window to show how it gets picked up.\nwindow.num = 2020; // yikes!\n\n// Arrow Function\nvar add = (a, b, c) => this.num + a + b + c;\n\n// call\nconsole.log(add.call(obj, 1, 2, 3)) // result 2026\n\n// apply\nconst arr = [1, 2, 3]\nconsole.log(add.apply(obj, arr)) // result 2026\n\n// bind\nconst bound = add.bind(obj)\nconsole.log(bound(1, 2, 3)) // result 2026","position":{"start":{"line":202,"column":1,"offset":6051},"end":{"line":226,"column":47,"offset":6644},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Perhaps the greatest benefit of using Arrow functions is with DOM-level methods (setTimeout, setInterval, addEventListener) that usually required some kind of closure, call, apply or bind to ensure the function executed in the proper scope.","position":{"start":{"line":228,"column":1,"offset":6646},"end":{"line":228,"column":241,"offset":6886},"indent":[]}}],"position":{"start":{"line":228,"column":1,"offset":6646},"end":{"line":228,"column":241,"offset":6886},"indent":[]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Traditional Example:","position":{"start":{"line":230,"column":3,"offset":6890},"end":{"line":230,"column":23,"offset":6910},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":6888},"end":{"line":230,"column":25,"offset":6912},"indent":[]}}],"position":{"start":{"line":230,"column":1,"offset":6888},"end":{"line":230,"column":25,"offset":6912},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var obj = {\n    count : 10,\n    doSomethingLater : function (){\n        setTimeout(function(){ // the function executes on the window scope\n            this.count++;\n            console.log(this.count);\n        }, 300);\n    }\n}\n\nobj.doSomethingLater(); // console prints \"NaN\", because the property \"count\" is not in the window scope.","position":{"start":{"line":232,"column":1,"offset":6914},"end":{"line":242,"column":110,"offset":7288},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"Arrow Example:","position":{"start":{"line":244,"column":3,"offset":7292},"end":{"line":244,"column":17,"offset":7306},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":7290},"end":{"line":244,"column":19,"offset":7308},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":7290},"end":{"line":244,"column":19,"offset":7308},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var obj = {\n    count : 10,\n    doSomethingLater : function(){ // of course, arrow functions are not suited for methods\n        setTimeout( () => { // since the arrow function was created within the \"obj\", it assumes the object's \"this\"\n            this.count++;\n            console.log(this.count);\n        }, 300);\n    }\n}\n\nobj.doSomethingLater();","position":{"start":{"line":246,"column":1,"offset":7310},"end":{"line":256,"column":28,"offset":7699},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"No binding of ","position":{"start":{"line":258,"column":5,"offset":7705},"end":{"line":258,"column":19,"offset":7719},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":258,"column":19,"offset":7719},"end":{"line":258,"column":30,"offset":7730},"indent":[]}}],"position":{"start":{"line":258,"column":1,"offset":7701},"end":{"line":258,"column":30,"offset":7730},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions do not have their own ","position":{"start":{"line":260,"column":1,"offset":7732},"end":{"line":260,"column":39,"offset":7770},"indent":[]}},{"type":"link","title":null,"url":"arguments","children":[{"type":"inlineCode","value":"arguments","position":{"start":{"line":260,"column":40,"offset":7771},"end":{"line":260,"column":51,"offset":7782},"indent":[]}},{"type":"text","value":" object","position":{"start":{"line":260,"column":51,"offset":7782},"end":{"line":260,"column":58,"offset":7789},"indent":[]}}],"position":{"start":{"line":260,"column":39,"offset":7770},"end":{"line":260,"column":70,"offset":7801},"indent":[]}},{"type":"text","value":". Thus, in this example, ","position":{"start":{"line":260,"column":70,"offset":7801},"end":{"line":260,"column":95,"offset":7826},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":260,"column":95,"offset":7826},"end":{"line":260,"column":106,"offset":7837},"indent":[]}},{"type":"text","value":" is a reference to the arguments of the enclosing scope:","position":{"start":{"line":260,"column":106,"offset":7837},"end":{"line":260,"column":162,"offset":7893},"indent":[]}}],"position":{"start":{"line":260,"column":1,"offset":7732},"end":{"line":260,"column":162,"offset":7893},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var arguments = [1, 2, 3];\nvar arr = () => arguments[0];\n\narr(); // 1\n\nfunction foo(n) {\n  var f = () => arguments[0] + n; // foo's implicit arguments binding. arguments[0] is n\n  return f();\n}\n\nfoo(3); // 3 + 3 = 6","position":{"start":{"line":262,"column":1,"offset":7895},"end":{"line":272,"column":25,"offset":8142},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"In most cases, using ","position":{"start":{"line":274,"column":1,"offset":8144},"end":{"line":274,"column":22,"offset":8165},"indent":[]}},{"type":"link","title":null,"url":"rest_parameters","children":[{"type":"text","value":"rest parameters","position":{"start":{"line":274,"column":23,"offset":8166},"end":{"line":274,"column":38,"offset":8181},"indent":[]}}],"position":{"start":{"line":274,"column":22,"offset":8165},"end":{"line":274,"column":56,"offset":8199},"indent":[]}},{"type":"text","value":" is a good alternative to using an ","position":{"start":{"line":274,"column":56,"offset":8199},"end":{"line":274,"column":91,"offset":8234},"indent":[]}},{"type":"inlineCode","value":"arguments","position":{"start":{"line":274,"column":91,"offset":8234},"end":{"line":274,"column":102,"offset":8245},"indent":[]}},{"type":"text","value":" object.","position":{"start":{"line":274,"column":102,"offset":8245},"end":{"line":274,"column":110,"offset":8253},"indent":[]}}],"position":{"start":{"line":274,"column":1,"offset":8144},"end":{"line":274,"column":110,"offset":8253},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"function foo(n) {\n  var f = (...args) => args[0] + n;\n  return f(10);\n}\n\nfoo(1); // 11","position":{"start":{"line":276,"column":1,"offset":8255},"end":{"line":281,"column":18,"offset":8361},"indent":[1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use of the ","position":{"start":{"line":283,"column":5,"offset":8367},"end":{"line":283,"column":16,"offset":8378},"indent":[]}},{"type":"inlineCode","value":"new","position":{"start":{"line":283,"column":16,"offset":8378},"end":{"line":283,"column":21,"offset":8383},"indent":[]}},{"type":"text","value":" operator","position":{"start":{"line":283,"column":21,"offset":8383},"end":{"line":283,"column":30,"offset":8392},"indent":[]}}],"position":{"start":{"line":283,"column":1,"offset":8363},"end":{"line":283,"column":30,"offset":8392},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions cannot be used as constructors and will throw an error when used with ","position":{"start":{"line":285,"column":1,"offset":8394},"end":{"line":285,"column":87,"offset":8480},"indent":[]}},{"type":"inlineCode","value":"new","position":{"start":{"line":285,"column":87,"offset":8480},"end":{"line":285,"column":92,"offset":8485},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":285,"column":92,"offset":8485},"end":{"line":285,"column":93,"offset":8486},"indent":[]}}],"position":{"start":{"line":285,"column":1,"offset":8394},"end":{"line":285,"column":93,"offset":8486},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var Foo = () => {};\nvar foo = new Foo(); // TypeError: Foo is not a constructor","position":{"start":{"line":287,"column":1,"offset":8488},"end":{"line":288,"column":64,"offset":8575},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use of ","position":{"start":{"line":290,"column":5,"offset":8581},"end":{"line":290,"column":12,"offset":8588},"indent":[]}},{"type":"inlineCode","value":"prototype","position":{"start":{"line":290,"column":12,"offset":8588},"end":{"line":290,"column":23,"offset":8599},"indent":[]}},{"type":"text","value":" property","position":{"start":{"line":290,"column":23,"offset":8599},"end":{"line":290,"column":32,"offset":8608},"indent":[]}}],"position":{"start":{"line":290,"column":1,"offset":8577},"end":{"line":290,"column":32,"offset":8608},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions do not have a ","position":{"start":{"line":292,"column":1,"offset":8610},"end":{"line":292,"column":31,"offset":8640},"indent":[]}},{"type":"inlineCode","value":"prototype","position":{"start":{"line":292,"column":31,"offset":8640},"end":{"line":292,"column":42,"offset":8651},"indent":[]}},{"type":"text","value":" property.","position":{"start":{"line":292,"column":42,"offset":8651},"end":{"line":292,"column":52,"offset":8661},"indent":[]}}],"position":{"start":{"line":292,"column":1,"offset":8610},"end":{"line":292,"column":52,"offset":8661},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var Foo = () => {};\nconsole.log(Foo.prototype); // undefined","position":{"start":{"line":294,"column":1,"offset":8663},"end":{"line":295,"column":45,"offset":8731},"indent":[1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Use of the ","position":{"start":{"line":297,"column":5,"offset":8737},"end":{"line":297,"column":16,"offset":8748},"indent":[]}},{"type":"inlineCode","value":"yield","position":{"start":{"line":297,"column":16,"offset":8748},"end":{"line":297,"column":23,"offset":8755},"indent":[]}},{"type":"text","value":" keyword","position":{"start":{"line":297,"column":23,"offset":8755},"end":{"line":297,"column":31,"offset":8763},"indent":[]}}],"position":{"start":{"line":297,"column":1,"offset":8733},"end":{"line":297,"column":31,"offset":8763},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":299,"column":1,"offset":8765},"end":{"line":299,"column":5,"offset":8769},"indent":[]}},{"type":"inlineCode","value":"yield","position":{"start":{"line":299,"column":5,"offset":8769},"end":{"line":299,"column":12,"offset":8776},"indent":[]}},{"type":"text","value":" keyword may not be used in an arrow function's body (except when permitted within functions further nested within it). As a consequence, arrow functions cannot be used as generators.","position":{"start":{"line":299,"column":12,"offset":8776},"end":{"line":299,"column":195,"offset":8959},"indent":[]}}],"position":{"start":{"line":299,"column":1,"offset":8765},"end":{"line":299,"column":195,"offset":8959},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Function body","position":{"start":{"line":301,"column":5,"offset":8965},"end":{"line":301,"column":18,"offset":8978},"indent":[]}}],"position":{"start":{"line":301,"column":1,"offset":8961},"end":{"line":301,"column":18,"offset":8978},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Arrow functions can have either a \"concise body\" or the usual \"block body\".","position":{"start":{"line":303,"column":1,"offset":8980},"end":{"line":303,"column":76,"offset":9055},"indent":[]}}],"position":{"start":{"line":303,"column":1,"offset":8980},"end":{"line":303,"column":76,"offset":9055},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"In a concise body, only an expression is specified, which becomes the implicit return value. In a block body, you must use an explicit ","position":{"start":{"line":305,"column":1,"offset":9057},"end":{"line":305,"column":136,"offset":9192},"indent":[]}},{"type":"inlineCode","value":"return","position":{"start":{"line":305,"column":136,"offset":9192},"end":{"line":305,"column":144,"offset":9200},"indent":[]}},{"type":"text","value":" statement.","position":{"start":{"line":305,"column":144,"offset":9200},"end":{"line":305,"column":155,"offset":9211},"indent":[]}}],"position":{"start":{"line":305,"column":1,"offset":9057},"end":{"line":305,"column":155,"offset":9211},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = x => x * x;\n// concise body syntax, implied \"return\"\n\nvar func = (x, y) => { return x + y; };\n// with block body, explicit \"return\" needed","position":{"start":{"line":307,"column":1,"offset":9213},"end":{"line":311,"column":49,"offset":9378},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Returning object literals","position":{"start":{"line":313,"column":5,"offset":9384},"end":{"line":313,"column":30,"offset":9409},"indent":[]}}],"position":{"start":{"line":313,"column":1,"offset":9380},"end":{"line":313,"column":30,"offset":9409},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Keep in mind that returning object literals using the concise body syntax ","position":{"start":{"line":315,"column":1,"offset":9411},"end":{"line":315,"column":75,"offset":9485},"indent":[]}},{"type":"inlineCode","value":"params => {object:literal}","position":{"start":{"line":315,"column":75,"offset":9485},"end":{"line":315,"column":103,"offset":9513},"indent":[]}},{"type":"text","value":" will not work as expected.","position":{"start":{"line":315,"column":103,"offset":9513},"end":{"line":315,"column":130,"offset":9540},"indent":[]}}],"position":{"start":{"line":315,"column":1,"offset":9411},"end":{"line":315,"column":130,"offset":9540},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = () => { foo: 1 };\n// Calling func() returns undefined!\n\nvar func = () => { foo: function() {} };\n// SyntaxError: function statement requires a name","position":{"start":{"line":317,"column":1,"offset":9542},"end":{"line":321,"column":55,"offset":9716},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"This is because the code inside braces ({}) is parsed as a sequence of statements (i.e. ","position":{"start":{"line":323,"column":1,"offset":9718},"end":{"line":323,"column":89,"offset":9806},"indent":[]}},{"type":"inlineCode","value":"foo","position":{"start":{"line":323,"column":89,"offset":9806},"end":{"line":323,"column":94,"offset":9811},"indent":[]}},{"type":"text","value":" is treated like a label, not a key in an object literal).","position":{"start":{"line":323,"column":94,"offset":9811},"end":{"line":323,"column":152,"offset":9869},"indent":[]}}],"position":{"start":{"line":323,"column":1,"offset":9718},"end":{"line":323,"column":152,"offset":9869},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"You must wrap the object literal in parentheses:","position":{"start":{"line":325,"column":1,"offset":9871},"end":{"line":325,"column":49,"offset":9919},"indent":[]}}],"position":{"start":{"line":325,"column":1,"offset":9871},"end":{"line":325,"column":49,"offset":9919},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = () => ({ foo: 1 });","position":{"start":{"line":327,"column":1,"offset":9921},"end":{"line":327,"column":35,"offset":9955},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Line breaks","position":{"start":{"line":329,"column":5,"offset":9961},"end":{"line":329,"column":16,"offset":9972},"indent":[]}}],"position":{"start":{"line":329,"column":1,"offset":9957},"end":{"line":329,"column":16,"offset":9972},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"An arrow function cannot contain a line break between its parameters and its arrow.","position":{"start":{"line":331,"column":1,"offset":9974},"end":{"line":331,"column":84,"offset":10057},"indent":[]}}],"position":{"start":{"line":331,"column":1,"offset":9974},"end":{"line":331,"column":84,"offset":10057},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = (a, b, c)\n  => 1;\n// SyntaxError: expected expression, got '=>'","position":{"start":{"line":333,"column":1,"offset":10059},"end":{"line":335,"column":50,"offset":10145},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"However, this can be amended by putting the line break after the arrow or using parentheses/braces as seen below to ensure that the code stays pretty and fluffy. You can also put line breaks between arguments.","position":{"start":{"line":337,"column":1,"offset":10147},"end":{"line":337,"column":210,"offset":10356},"indent":[]}}],"position":{"start":{"line":337,"column":1,"offset":10147},"end":{"line":337,"column":210,"offset":10356},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"var func = (a, b, c) =>\n  1;\n\nvar func = (a, b, c) => (\n  1\n);\n\nvar func = (a, b, c) => {\n  return 1\n};\n\nvar func = (\n  a,\n  b,\n  c\n) => 1;\n\n// no SyntaxError thrown","position":{"start":{"line":339,"column":1,"offset":10358},"end":{"line":356,"column":29,"offset":10579},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Parsing order","position":{"start":{"line":358,"column":5,"offset":10585},"end":{"line":358,"column":18,"offset":10598},"indent":[]}}],"position":{"start":{"line":358,"column":1,"offset":10581},"end":{"line":358,"column":18,"offset":10598},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Although the arrow in an arrow function is not an operator, arrow functions have special parsing rules that interact differently with ","position":{"start":{"line":360,"column":1,"offset":10600},"end":{"line":360,"column":135,"offset":10734},"indent":[]}},{"type":"link","title":null,"url":"../operators/operator_precedence","children":[{"type":"text","value":"operator precedence","position":{"start":{"line":360,"column":136,"offset":10735},"end":{"line":360,"column":155,"offset":10754},"indent":[]}}],"position":{"start":{"line":360,"column":135,"offset":10734},"end":{"line":360,"column":190,"offset":10789},"indent":[]}},{"type":"text","value":" compared to regular functions.","position":{"start":{"line":360,"column":190,"offset":10789},"end":{"line":360,"column":221,"offset":10820},"indent":[]}}],"position":{"start":{"line":360,"column":1,"offset":10600},"end":{"line":360,"column":221,"offset":10820},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n    let callback;\n\n    callback = callback || function() {}; // ok\n\n    callback = callback || () => {};\n    // SyntaxError: invalid arrow-function arguments\n\n    callback = callback || (() => {});    // ok","position":{"start":{"line":361,"column":1,"offset":10821},"end":{"line":371,"column":4,"offset":11040},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Examples","position":{"start":{"line":372,"column":4,"offset":11044},"end":{"line":372,"column":12,"offset":11052},"indent":[]}}],"position":{"start":{"line":372,"column":1,"offset":11041},"end":{"line":372,"column":12,"offset":11052},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Basic usage","position":{"start":{"line":374,"column":5,"offset":11058},"end":{"line":374,"column":16,"offset":11069},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":11054},"end":{"line":374,"column":16,"offset":11069},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n    // An empty arrow function returns undefined\n    let empty = () => {};\n\n    (() => 'foobar')();\n    // Returns \"foobar\"\n    // (this is an Immediately Invoked Function Expression)\n\n    var simple = a => a > 15 ? 15 : a;\n    simple(16); // 15\n    simple(10); // 10\n\n    let max = (a, b) => a > b ? a : b;\n\n    // Easy array filtering, mapping, ...\n\n    var arr = [5, 6, 13, 0, 1, 18, 23];\n\n    var sum = arr.reduce((a, b) => a + b);\n    // 66\n\n    var even = arr.filter(v => v % 2 == 0);\n    // [6, 0, 18]\n\n    var double = arr.map(v => v * 2);\n    // [10, 12, 26, 0, 2, 36, 46]\n\n    // More concise promise chains\n    promise.then(a => {\n      // ...\n    }).then(b => {\n      // ...\n    });\n\n    // Parameterless arrow functions that are visually easier to parse\n    setTimeout( () => {\n      console.log('I happen sooner');\n      setTimeout( () => {\n        // deeper code\n        console.log('I happen later');\n      }, 1);\n    }, 1);","position":{"start":{"line":375,"column":1,"offset":11070},"end":{"line":418,"column":4,"offset":12023},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":419,"column":1,"offset":12024}}}}