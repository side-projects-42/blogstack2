{"expireTime":9007200914465207000,"key":"transformer-remark-markdown-ast-2594c5e0c584b14da397566135234a1a--","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Gist Archive","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":16,"offset":16},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":16,"offset":16},"indent":[]}},{"type":"html","value":"<h2>Gist Archive</h2>","position":{"start":{"line":4,"column":1,"offset":18},"end":{"line":4,"column":22,"offset":39},"indent":[]}},{"type":"html","value":"<iframe style=\"resize:both; overflow:scroll;\"  sandbox=\"allow-scripts\" style=\"resize:both; overflow:scroll;\"    src=\"https://bgoonzgist.netlify.app/\" height=\"800px\" width=\"1000px\" scrolling=\"yes\"   frameborder=\"yes\" loading=\"lazy\"  allowfullscreen=\"true\"  frameborder=\"0\" >\n</iframe>\n<br>","position":{"start":{"line":6,"column":1,"offset":41},"end":{"line":8,"column":5,"offset":329},"indent":[1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":10,"column":1,"offset":331},"end":{"line":10,"column":5,"offset":335},"indent":[]}},{"type":"html","value":"<br>\n<br>\n<br>\n<br>","position":{"start":{"line":12,"column":1,"offset":337},"end":{"line":15,"column":5,"offset":356},"indent":[1,1,1]}},{"type":"html","value":"<br>","position":{"start":{"line":17,"column":1,"offset":358},"end":{"line":17,"column":5,"offset":362},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":19,"column":1,"offset":364},"end":{"line":19,"column":4,"offset":367},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Featured Gists:","position":{"start":{"line":21,"column":4,"offset":372},"end":{"line":21,"column":19,"offset":387},"indent":[]}}],"position":{"start":{"line":21,"column":1,"offset":369},"end":{"line":21,"column":19,"offset":387},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nconst Promise = require('bluebird');\nconst fs = Promise.promisifyAll(require('fs'));\nconst crypto = require('crypto');\nconst path = require('path');\nconst pathA = '.';\nconst pathB = '/path/to/the/directory/you/want/to/compare/it/to';\nlet hashes = [];\nfunction hashDirIn(folder) {\n    var pathPromiseA = fs\n        .readdirAsync(folder)\n        .map(function (fileName) {\n            var workPath = path.join(folder, fileName);\n            var statPromise = fs.statAsync(workPath);\n            return Promise.join(statPromise, fileName, function (statPromise, fileName) {\n                if (statPromise.isFile()) {\n                    function makeStream(file, callback) {\n                        var result = fs.createReadStream(workPath);\n                        return callback(result);\n                    }\n                    function process(stream) {\n                        var hash = crypto.createHash('md5');\n                        return new Promise(function (resolve, reject) {\n                            stream.on('data', function updateProcess(chunk) {\n                                hash.update(chunk, 'utf8');\n                            });\n                            stream.on('end', resolve);\n                        }).then(function publish() {\n                            var digest = hash.digest('hex');\n                            hashes.push({ digest: digest, path: workPath });\n                        });\n                    }\n                    return makeStream(fileName, process);\n                }\n            });\n        })\n        .then(function () {\n            if (i == 1) {\n                hashes.sort(function (a, b) {\n                    if (a.digest < b.digest) {\n                        return -1;\n                    }\n                    if (a.digest > b.digest) {\n                        return 1;\n                    }\n                    return 0;\n                });\n                var dupe = 1;\n                hashes.map(function (obj, index) {\n                    if (index - 1 >= 0) {\n                        if (obj.digest == hashes[index - 1].digest) {\n                            console.log('Dupe ' + dupe + ' found:');\n                            console.log(obj.path);\n                            console.log('Equal to:');\n                            console.log(hashes[index - 1].path + '\\n');\n                            dupe++;\n                        }\n                    }\n                });\n            }\n            i++;\n        });\n}\nvar i = 0;\nhashDirIn(pathA);\nhashDirIn(pathB);","position":{"start":{"line":23,"column":1,"offset":389},"end":{"line":90,"column":4,"offset":2954},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":92,"column":1,"offset":2956},"end":{"line":92,"column":4,"offset":2959},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":94,"column":1,"offset":2961},"end":{"line":94,"column":4,"offset":2964},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"will replace any spaces in file names with an underscore!","position":{"start":{"line":96,"column":3,"offset":2968},"end":{"line":96,"column":60,"offset":3025},"indent":[]}}],"position":{"start":{"line":96,"column":3,"offset":2968},"end":{"line":96,"column":60,"offset":3025},"indent":[]}}],"position":{"start":{"line":96,"column":1,"offset":2966},"end":{"line":96,"column":60,"offset":3025},"indent":[]}},{"type":"code","lang":"console","meta":null,"value":" for file in *; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n  ## TAKING IT A STEP FURTHER:\n # Let's do it recursivley:\n  function RecurseDirs ()\n{\n    oldIFS=$IFS\n    IFS=$'\\n'\n    for f in \"$@\"\n    do\n  # YOUR CODE HERE!\n\n[![-----------------------------------------------------](https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/colored.png)]\n\nfor file in \\*; do mv \"$file\" `echo $file | tr ' ' '_'` ; done\n        if [[ -d \"${f}\" ]]; then\ncd \"${f}\"\n            RecurseDirs $(ls -1 \".\")\n            cd ..\n        fi\n    done\n    IFS=$oldIFS\n}\nRecurseDirs \"./\"","position":{"start":{"line":98,"column":1,"offset":3027},"end":{"line":124,"column":4,"offset":3629},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":126,"column":1,"offset":3631},"end":{"line":126,"column":4,"offset":3634},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Copy to clipboard jQuerry","position":{"start":{"line":128,"column":5,"offset":3640},"end":{"line":128,"column":30,"offset":3665},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":3636},"end":{"line":128,"column":30,"offset":3665},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"Language: Javascript/Jquery","position":{"start":{"line":130,"column":3,"offset":3669},"end":{"line":130,"column":30,"offset":3696},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":3669},"end":{"line":130,"column":30,"offset":3696},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3667},"end":{"line":130,"column":30,"offset":3696},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"In combination with the script tag : ","position":{"start":{"line":132,"column":3,"offset":3700},"end":{"line":132,"column":40,"offset":3737},"indent":[]}},{"type":"html","value":"<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js\">","position":{"start":{"line":132,"column":40,"offset":3737},"end":{"line":132,"column":119,"offset":3816},"indent":[]}},{"type":"text","value":" > ","position":{"start":{"line":132,"column":119,"offset":3816},"end":{"line":132,"column":122,"offset":3819},"indent":[]}},{"type":"html","value":"</script>","position":{"start":{"line":132,"column":122,"offset":3819},"end":{"line":132,"column":131,"offset":3828},"indent":[]}},{"type":"text","value":" , this snippet will add a copy to clipboard button to all of your embedded ","position":{"start":{"line":132,"column":131,"offset":3828},"end":{"line":132,"column":207,"offset":3904},"indent":[]}},{"type":"html","value":"<code>","position":{"start":{"line":132,"column":207,"offset":3904},"end":{"line":132,"column":213,"offset":3910},"indent":[]}},{"type":"text","value":" blocks.","position":{"start":{"line":132,"column":213,"offset":3910},"end":{"line":132,"column":221,"offset":3918},"indent":[]}}],"position":{"start":{"line":132,"column":3,"offset":3700},"end":{"line":132,"column":221,"offset":3918},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3698},"end":{"line":132,"column":221,"offset":3918},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n$(document).ready(function () {\n    $('code, pre').append('<span class=\"command-copy\" >\n<i class=\"fa fa-clipboard\" aria-hidden=\"true\">\n</i>\n</span>');\n    $('code span.command-copy').click(function (e) {\n        var text = $(this).parent().text().trim(); //.text();\n        var copyHex = document.createElement('input');\n        copyHex.value = text;\n        document.body.appendChild(copyHex);\n        copyHex.select();\n        document.execCommand('copy');\n        console.log(copyHex.value);\n        document.body.removeChild(copyHex);\n    });\n\n    $('pre span.command-copy').click(function (e) {\n        var text = $(this).parent().text().trim();\n        var copyHex = document.createElement('input');\n        copyHex.value = text;\n        document.body.appendChild(copyHex);\n        copyHex.select();\n        document.execCommand('copy');\n        console.log(copyHex.value);\n        document.body.removeChild(copyHex);\n    });\n});","position":{"start":{"line":134,"column":1,"offset":3920},"end":{"line":163,"column":4,"offset":4868},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":165,"column":1,"offset":4870},"end":{"line":165,"column":4,"offset":4873},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Append Files in PWD","position":{"start":{"line":167,"column":5,"offset":4879},"end":{"line":167,"column":24,"offset":4898},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":4875},"end":{"line":167,"column":24,"offset":4898},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n//APPEND-DIR.js\nconst fs = require('fs');\nlet cat = require('child_process').execSync('cat *').toString('UTF-8');\nfs.writeFile('output.md', cat, (err) => {\n    if (err) throw err;\n});","position":{"start":{"line":169,"column":1,"offset":4900},"end":{"line":177,"column":4,"offset":5096},"indent":[1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":179,"column":1,"offset":5098},"end":{"line":179,"column":4,"offset":5101},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"doesUserFrequentStarbucks.js","position":{"start":{"line":181,"column":5,"offset":5107},"end":{"line":181,"column":33,"offset":5135},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":5103},"end":{"line":181,"column":33,"offset":5135},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nconst isAppleDevice = /Mac|iPod|iPhone|iPad/.test(navigator.platform);\nconsole.log(isAppleDevice);\n// Result: will return true if user is on an Apple device","position":{"start":{"line":183,"column":1,"offset":5137},"end":{"line":188,"column":4,"offset":5306},"indent":[1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":190,"column":1,"offset":5308},"end":{"line":190,"column":4,"offset":5311},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"arr-intersection.js","position":{"start":{"line":192,"column":5,"offset":5317},"end":{"line":192,"column":24,"offset":5336},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":5313},"end":{"line":192,"column":24,"offset":5336},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n/*\n function named intersection(firstArr) that takes in an array and\nreturns a function.\nWhen the function returned by intersection is invoked\npassing in an array (secondArr) it returns a new array containing the elements\ncommon to both firstArr and secondArr.\n*/\nfunction intersection(firstArr) {\n    return (secondArr) => {\n        let common = [];\n        for (let i = 0; i < firstArr.length; i++) {\n            let el = firstArr[i];\n            if (secondArr.indexOf(el) > -1) {\n                common.push(el);\n            }\n        }\n        return common;\n    };\n}\nlet abc = intersection(['a', 'b', 'c']); // returns a function\nconsole.log(abc(['b', 'd', 'c'])); // returns [ 'b', 'c' ]\n\nlet fame = intersection(['f', 'a', 'm', 'e']); // returns a function\nconsole.log(fame(['a', 'f', 'z', 'b'])); // returns [ 'f', 'a' ]","position":{"start":{"line":194,"column":1,"offset":5338},"end":{"line":220,"column":4,"offset":6179},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":222,"column":1,"offset":6181},"end":{"line":222,"column":4,"offset":6184},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"arr-of-cum-partial-sums.js","position":{"start":{"line":224,"column":5,"offset":6190},"end":{"line":224,"column":31,"offset":6216},"indent":[]}}],"position":{"start":{"line":224,"column":1,"offset":6186},"end":{"line":224,"column":31,"offset":6216},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n/*\nFirst is recurSum(arr, start) which returns the sum of the elements of arr from the index start till the very end.\nSecond is partrecurSum() that recursively concatenates the required sum into an array and when we reach the end of the array, it returns the concatenated array.\n*/\n//arr.length -1 = 5\n//                   arr   [    1,    7,    12,   6,    5,    10   ]\n//                   ind   [    0     1     2     3     4      5   ]\n//                              ↟                              ↟\n//                            start                           end\n\nfunction recurSum(arr, start = 0, sum = 0) {\n    if (start < arr.length) {\n        return recurSum(arr, start + 1, sum + arr[start]);\n    }\n    return sum;\n}\n\nfunction rPartSumsArr(arr, partSum = [], start = 0, end = arr.length - 1) {\n    if (start <= end) {\n        return rPartSumsArr(arr, partSum.concat(recurSum(arr, start)), ++start, end);\n    }\n    return partSum.reverse();\n}\n\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\nconsole.log('rPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]: ', rPartSumsArr(arr));\nconsole.log('rPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]: ', rPartSumsArr(arr1));\nconsole.log('------------------------------------------------rPartSumArr------------------------------------------------');\n/*\n------------------------------------------------rPartSumArr------------------------------------------------\nrPartSumsArr(arr)=[ 1, 1, 5, 2, 6, 10 ]:  [ 10, 16, 18, 23, 24, 25 ]\nrPartSumsArr(arr1)=[ 1, 7, 12, 6, 5, 10 ]:  [ 10, 15, 21, 33, 40, 41 ]\n------------------------------------------------rPartSumArr------------------------------------------------\n*/","position":{"start":{"line":226,"column":1,"offset":6218},"end":{"line":262,"column":4,"offset":7953},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":264,"column":1,"offset":7955},"end":{"line":264,"column":4,"offset":7958},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"camel2Kabab.js","position":{"start":{"line":266,"column":5,"offset":7964},"end":{"line":266,"column":19,"offset":7978},"indent":[]}}],"position":{"start":{"line":266,"column":1,"offset":7960},"end":{"line":266,"column":19,"offset":7978},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":268,"column":1,"offset":7980},"end":{"line":268,"column":4,"offset":7983},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nfunction camelToKebab(value) {\n    return value.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\n}","position":{"start":{"line":270,"column":1,"offset":7985},"end":{"line":275,"column":4,"offset":8098},"indent":[1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":277,"column":1,"offset":8100},"end":{"line":277,"column":4,"offset":8103},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"camelCase.js","position":{"start":{"line":279,"column":5,"offset":8109},"end":{"line":279,"column":17,"offset":8121},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":8105},"end":{"line":279,"column":17,"offset":8121},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":281,"column":1,"offset":8123},"end":{"line":281,"column":4,"offset":8126},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nfunction camel(str) {\n    return str.replace(/(?:^\\w|[A-Z]|\\b\\w|\\s+)/g, function (match, index) {\n        if (+match === 0) return ''; // or if (/\\s+/.test(match)) for white spaces\n        return index === 0 ? match.toLowerCase() : match.toUpperCase();\n    });\n}","position":{"start":{"line":283,"column":1,"offset":8128},"end":{"line":291,"column":4,"offset":8403},"indent":[1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":293,"column":1,"offset":8405},"end":{"line":293,"column":4,"offset":8408},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"concatLinkedLists.js","position":{"start":{"line":295,"column":5,"offset":8414},"end":{"line":295,"column":25,"offset":8434},"indent":[]}}],"position":{"start":{"line":295,"column":1,"offset":8410},"end":{"line":295,"column":25,"offset":8434},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":297,"column":1,"offset":8436},"end":{"line":297,"column":4,"offset":8439},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nfunction addTwoNumbers(l1, l2) {\n    let result = new ListNode(0);\n    let currentNode = result;\n    let carryOver = 0;\n    while (l1 != null || l2 != null) {\n        let v1 = 0;\n        let v2 = 0;\n        if (l1 != null) v1 = l1.val;\n        if (l2 != null) v2 = l2.val;\n        let sum = v1 + v2 + carryOver;\n        carryOver = Math.floor(sum / 10);\n        sum = sum % 10;\n        currentNode.next = new ListNode(sum);\n        currentNode = currentNode.next;\n        if (l1 != null) l1 = l1.next;\n        if (l2 != null) l2 = l2.next;\n    }\n    if (carryOver > 0) {\n        currentNode.next = new ListNode(carryOver);\n    }\n    return result.next;\n}","position":{"start":{"line":299,"column":1,"offset":8441},"end":{"line":323,"column":4,"offset":9108},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":325,"column":1,"offset":9110},"end":{"line":325,"column":4,"offset":9113},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"fast-is-alpha-numeric.js","position":{"start":{"line":327,"column":5,"offset":9119},"end":{"line":327,"column":29,"offset":9143},"indent":[]}}],"position":{"start":{"line":327,"column":1,"offset":9115},"end":{"line":327,"column":29,"offset":9143},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n//Function to test if a character is alpha numeric that is faster than a regular\n//expression in JavaScript\n\nlet isAlphaNumeric = (char) => {\n    char = char.toString();\n    let id = char.charCodeAt(0);\n    if (\n        !(id > 47 && id < 58) && // if not numeric(0-9)\n        !(id > 64 && id < 91) && // if not letter(A-Z)\n        !(id > 96 && id < 123) // if not letter(a-z)\n    ) {\n        return false;\n    }\n    return true;\n};\n\nconsole.log(isAlphaNumeric('A')); //true\nconsole.log(isAlphaNumeric(2)); //true\nconsole.log(isAlphaNumeric('z')); //true\nconsole.log(isAlphaNumeric(' ')); //false\nconsole.log(isAlphaNumeric('!')); //false","position":{"start":{"line":329,"column":1,"offset":9145},"end":{"line":352,"column":4,"offset":9795},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":354,"column":1,"offset":9797},"end":{"line":354,"column":4,"offset":9800},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"find-n-replace.js","position":{"start":{"line":356,"column":5,"offset":9806},"end":{"line":356,"column":22,"offset":9823},"indent":[]}}],"position":{"start":{"line":356,"column":1,"offset":9802},"end":{"line":356,"column":22,"offset":9823},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":358,"column":1,"offset":9825},"end":{"line":358,"column":4,"offset":9828},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nfunction replaceWords(str, before, after) {\n    if (/^[A-Z]/.test(before)) {\n        after = after[0].toUpperCase() + after.substring(1);\n    } else {\n        after = after[0].toLowerCase() + after.substring(1);\n    }\n    return str.replace(before, after);\n}\nconsole.log(replaceWords('Let us go to the store', 'store', 'mall')); //\"Let us go to the mall\"\nconsole.log(replaceWords('He is Sleeping on the couch', 'Sleeping', 'sitting')); //\"He is Sitting on the couch\"\nconsole.log(replaceWords('His name is Tom', 'Tom', 'john'));\n//\"His name is John\"","position":{"start":{"line":360,"column":1,"offset":9830},"end":{"line":374,"column":4,"offset":10391},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":376,"column":1,"offset":10393},"end":{"line":376,"column":4,"offset":10396},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"flatten-arr.js","position":{"start":{"line":378,"column":5,"offset":10402},"end":{"line":378,"column":19,"offset":10416},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":10398},"end":{"line":378,"column":19,"offset":10416},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\n/*Simple Function to flatten an array into a single layer */\nconst flatten = (array) => array.reduce((accum, ele) => accum.concat(Array.isArray(ele) ? flatten(ele) : ele), []);","position":{"start":{"line":380,"column":1,"offset":10418},"end":{"line":384,"column":4,"offset":10607},"indent":[1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":386,"column":1,"offset":10609},"end":{"line":386,"column":4,"offset":10612},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"isWeekDay.js","position":{"start":{"line":388,"column":5,"offset":10618},"end":{"line":388,"column":17,"offset":10630},"indent":[]}}],"position":{"start":{"line":388,"column":1,"offset":10614},"end":{"line":388,"column":17,"offset":10630},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nconst isWeekday = (date) => date.getDay() % 6 !== 0;\nconsole.log(isWeekday(new Date(2021, 0, 11)));\n// Result: true (Monday)\nconsole.log(isWeekday(new Date(2021, 0, 10)));\n// Result: false (Sunday)","position":{"start":{"line":390,"column":1,"offset":10632},"end":{"line":397,"column":4,"offset":10842},"indent":[1,1,1,1,1,1,1]}},{"type":"thematicBreak","position":{"start":{"line":399,"column":1,"offset":10844},"end":{"line":399,"column":4,"offset":10847},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"longest-common-prefix.js","position":{"start":{"line":401,"column":5,"offset":10853},"end":{"line":401,"column":29,"offset":10877},"indent":[]}}],"position":{"start":{"line":401,"column":1,"offset":10849},"end":{"line":401,"column":29,"offset":10877},"indent":[]}},{"type":"thematicBreak","position":{"start":{"line":403,"column":1,"offset":10879},"end":{"line":403,"column":4,"offset":10882},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"//\nfunction longestCommonPrefix(strs) {\n    let prefix = '';\n    if (strs.length === 0) return prefix;\n    for (let i = 0; i < strs[0].length; i++) {\n        const character = strs[0][i];\n        for (let j = 0; j < strs.length; j++) {\n            if (strs[j][i] !== character) return prefix;\n        }\n        prefix = prefix + character;\n    }\n    return prefix;\n}","position":{"start":{"line":405,"column":1,"offset":10884},"end":{"line":419,"column":4,"offset":11260},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":420,"column":1,"offset":11261}}}}